<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="5311"><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (33 samples, 0.62%)</title><rect x="1.5063%" y="117" width="0.6214%" height="15" fill="rgb(227,0,7)" fg:x="80" fg:w="33"/><text x="1.7563%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (33 samples, 0.62%)</title><rect x="1.5063%" y="101" width="0.6214%" height="15" fill="rgb(217,0,24)" fg:x="80" fg:w="33"/><text x="1.7563%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (33 samples, 0.62%)</title><rect x="1.5063%" y="85" width="0.6214%" height="15" fill="rgb(221,193,54)" fg:x="80" fg:w="33"/><text x="1.7563%" y="95.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (9 samples, 0.17%)</title><rect x="1.9582%" y="69" width="0.1695%" height="15" fill="rgb(248,212,6)" fg:x="104" fg:w="9"/><text x="2.2082%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="2.1088%" y="53" width="0.0188%" height="15" fill="rgb(208,68,35)" fg:x="112" fg:w="1"/><text x="2.3588%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="24.2327%" y="53" width="0.0188%" height="15" fill="rgb(232,128,0)" fg:x="1287" fg:w="1"/><text x="24.4827%" y="63.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="24.2327%" y="37" width="0.0188%" height="15" fill="rgb(207,160,47)" fg:x="1287" fg:w="1"/><text x="24.4827%" y="47.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (1,539 samples, 28.98%)</title><rect x="2.2406%" y="101" width="28.9776%" height="15" fill="rgb(228,23,34)" fg:x="119" fg:w="1539"/><text x="2.4906%" y="111.50">&lt;absim::clients::LocalSimulationClient&lt;S&gt; as ab..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,539 samples, 28.98%)</title><rect x="2.2406%" y="85" width="28.9776%" height="15" fill="rgb(218,30,26)" fg:x="119" fg:w="1539"/><text x="2.4906%" y="95.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,539 samples, 28.98%)</title><rect x="2.2406%" y="69" width="28.9776%" height="15" fill="rgb(220,122,19)" fg:x="119" fg:w="1539"/><text x="2.4906%" y="79.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::c..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (370 samples, 6.97%)</title><rect x="24.2516%" y="53" width="6.9667%" height="15" fill="rgb(250,228,42)" fg:x="1288" fg:w="370"/><text x="24.5016%" y="63.50">&lt;briolett..</text></g><g><title>__rdl_alloc (60 samples, 1.13%)</title><rect x="30.0885%" y="37" width="1.1297%" height="15" fill="rgb(240,193,28)" fg:x="1598" fg:w="60"/><text x="30.3385%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="31.3877%" y="85" width="0.0565%" height="15" fill="rgb(216,20,37)" fg:x="1667" fg:w="3"/><text x="31.6377%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.09%)</title><rect x="31.4442%" y="85" width="0.0941%" height="15" fill="rgb(206,188,39)" fg:x="1670" fg:w="5"/><text x="31.6942%" y="95.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.06%)</title><rect x="31.4818%" y="69" width="0.0565%" height="15" fill="rgb(217,207,13)" fg:x="1672" fg:w="3"/><text x="31.7318%" y="79.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (18 samples, 0.34%)</title><rect x="31.2182%" y="101" width="0.3389%" height="15" fill="rgb(231,73,38)" fg:x="1658" fg:w="18"/><text x="31.4682%" y="111.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="31.5383%" y="85" width="0.0188%" height="15" fill="rgb(225,20,46)" fg:x="1675" fg:w="1"/><text x="31.7883%" y="95.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.02%)</title><rect x="31.5383%" y="69" width="0.0188%" height="15" fill="rgb(210,31,41)" fg:x="1675" fg:w="1"/><text x="31.7883%" y="79.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (36 samples, 0.68%)</title><rect x="31.5571%" y="101" width="0.6778%" height="15" fill="rgb(221,200,47)" fg:x="1676" fg:w="36"/><text x="31.8071%" y="111.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (36 samples, 0.68%)</title><rect x="31.5571%" y="85" width="0.6778%" height="15" fill="rgb(226,26,5)" fg:x="1676" fg:w="36"/><text x="31.8071%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (36 samples, 0.68%)</title><rect x="31.5571%" y="69" width="0.6778%" height="15" fill="rgb(249,33,26)" fg:x="1676" fg:w="36"/><text x="31.8071%" y="79.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (7 samples, 0.13%)</title><rect x="32.1032%" y="53" width="0.1318%" height="15" fill="rgb(235,183,28)" fg:x="1705" fg:w="7"/><text x="32.3532%" y="63.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="32.1973%" y="37" width="0.0377%" height="15" fill="rgb(221,5,38)" fg:x="1710" fg:w="2"/><text x="32.4473%" y="47.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (11 samples, 0.21%)</title><rect x="32.2350%" y="101" width="0.2071%" height="15" fill="rgb(247,18,42)" fg:x="1712" fg:w="11"/><text x="32.4850%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="76.0685%" y="53" width="0.0188%" height="15" fill="rgb(241,131,45)" fg:x="4040" fg:w="1"/><text x="76.3185%" y="63.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (3,087 samples, 58.12%)</title><rect x="32.5174%" y="85" width="58.1246%" height="15" fill="rgb(249,31,29)" fg:x="1727" fg:w="3087"/><text x="32.7674%" y="95.50">&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3,086 samples, 58.11%)</title><rect x="32.5362%" y="69" width="58.1058%" height="15" fill="rgb(225,111,53)" fg:x="1728" fg:w="3086"/><text x="32.7862%" y="79.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (773 samples, 14.55%)</title><rect x="76.0874%" y="53" width="14.5547%" height="15" fill="rgb(238,160,17)" fg:x="4041" fg:w="773"/><text x="76.3374%" y="63.50">&lt;briolette_sim::Coin a..</text></g><g><title>__rdl_alloc (115 samples, 2.17%)</title><rect x="88.4767%" y="37" width="2.1653%" height="15" fill="rgb(214,148,48)" fg:x="4699" fg:w="115"/><text x="88.7267%" y="47.50">_..</text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="93.4287%" y="69" width="0.0188%" height="15" fill="rgb(232,36,49)" fg:x="4962" fg:w="1"/><text x="93.6787%" y="79.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (3,242 samples, 61.04%)</title><rect x="32.4421%" y="101" width="61.0431%" height="15" fill="rgb(209,103,24)" fg:x="1723" fg:w="3242"/><text x="32.6921%" y="111.50">&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (151 samples, 2.84%)</title><rect x="90.6421%" y="85" width="2.8432%" height="15" fill="rgb(229,88,8)" fg:x="4814" fg:w="151"/><text x="90.8921%" y="95.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (2 samples, 0.04%)</title><rect x="93.4476%" y="69" width="0.0377%" height="15" fill="rgb(213,181,19)" fg:x="4963" fg:w="2"/><text x="93.6976%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (5 samples, 0.09%)</title><rect x="93.4852%" y="85" width="0.0941%" height="15" fill="rgb(254,191,54)" fg:x="4965" fg:w="5"/><text x="93.7352%" y="95.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (6 samples, 0.11%)</title><rect x="93.4852%" y="101" width="0.1130%" height="15" fill="rgb(241,83,37)" fg:x="4965" fg:w="6"/><text x="93.7352%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (1 samples, 0.02%)</title><rect x="93.5794%" y="85" width="0.0188%" height="15" fill="rgb(233,36,39)" fg:x="4970" fg:w="1"/><text x="93.8294%" y="95.50"></text></g><g><title>core::ops::function::Fn::call (1 samples, 0.02%)</title><rect x="93.5982%" y="101" width="0.0188%" height="15" fill="rgb(226,3,54)" fg:x="4971" fg:w="1"/><text x="93.8482%" y="111.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.02%)</title><rect x="93.5982%" y="85" width="0.0188%" height="15" fill="rgb(245,192,40)" fg:x="4971" fg:w="1"/><text x="93.8482%" y="95.50"></text></g><g><title>core::fmt::write (1 samples, 0.02%)</title><rect x="93.5982%" y="69" width="0.0188%" height="15" fill="rgb(238,167,29)" fg:x="4971" fg:w="1"/><text x="93.8482%" y="79.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.24%)</title><rect x="95.6129%" y="85" width="0.2448%" height="15" fill="rgb(232,182,51)" fg:x="5078" fg:w="13"/><text x="95.8629%" y="95.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (4,979 samples, 93.75%)</title><rect x="2.1277%" y="117" width="93.7488%" height="15" fill="rgb(231,60,39)" fg:x="113" fg:w="4979"/><text x="2.3777%" y="127.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (120 samples, 2.26%)</title><rect x="93.6170%" y="101" width="2.2595%" height="15" fill="rgb(208,69,12)" fg:x="4972" fg:w="120"/><text x="93.8670%" y="111.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (1 samples, 0.02%)</title><rect x="95.8577%" y="85" width="0.0188%" height="15" fill="rgb(235,93,37)" fg:x="5091" fg:w="1"/><text x="96.1077%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="95.8765%" y="117" width="0.0377%" height="15" fill="rgb(213,116,39)" fg:x="5092" fg:w="2"/><text x="96.1265%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (71 samples, 1.34%)</title><rect x="95.9141%" y="117" width="1.3368%" height="15" fill="rgb(222,207,29)" fg:x="5094" fg:w="71"/><text x="96.1641%" y="127.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (71 samples, 1.34%)</title><rect x="95.9141%" y="101" width="1.3368%" height="15" fill="rgb(206,96,30)" fg:x="5094" fg:w="71"/><text x="96.1641%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.81%)</title><rect x="96.4413%" y="85" width="0.8096%" height="15" fill="rgb(218,138,4)" fg:x="5122" fg:w="43"/><text x="96.6913%" y="95.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="97.1945%" y="69" width="0.0565%" height="15" fill="rgb(250,191,14)" fg:x="5162" fg:w="3"/><text x="97.4445%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="97.2322%" y="53" width="0.0188%" height="15" fill="rgb(239,60,40)" fg:x="5164" fg:w="1"/><text x="97.4822%" y="63.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="97.2510%" y="117" width="0.0377%" height="15" fill="rgb(206,27,48)" fg:x="5165" fg:w="2"/><text x="97.5010%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (2 samples, 0.04%)</title><rect x="97.2886%" y="101" width="0.0377%" height="15" fill="rgb(225,35,8)" fg:x="5167" fg:w="2"/><text x="97.5386%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (13 samples, 0.24%)</title><rect x="97.2886%" y="117" width="0.2448%" height="15" fill="rgb(250,213,24)" fg:x="5167" fg:w="13"/><text x="97.5386%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (11 samples, 0.21%)</title><rect x="97.3263%" y="101" width="0.2071%" height="15" fill="rgb(247,123,22)" fg:x="5169" fg:w="11"/><text x="97.5763%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.21%)</title><rect x="97.3263%" y="85" width="0.2071%" height="15" fill="rgb(231,138,38)" fg:x="5169" fg:w="11"/><text x="97.5763%" y="95.50"></text></g><g><title>_start (5,183 samples, 97.59%)</title><rect x="0.0000%" y="229" width="97.5899%" height="15" fill="rgb(231,145,46)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="239.50">_start</text></g><g><title>__libc_start_main (5,183 samples, 97.59%)</title><rect x="0.0000%" y="213" width="97.5899%" height="15" fill="rgb(251,118,11)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="223.50">__libc_start_main</text></g><g><title>main (5,183 samples, 97.59%)</title><rect x="0.0000%" y="197" width="97.5899%" height="15" fill="rgb(217,147,25)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="207.50">main</text></g><g><title>std::rt::lang_start_internal (5,183 samples, 97.59%)</title><rect x="0.0000%" y="181" width="97.5899%" height="15" fill="rgb(247,81,37)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="191.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (5,183 samples, 97.59%)</title><rect x="0.0000%" y="165" width="97.5899%" height="15" fill="rgb(209,12,38)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="175.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (5,183 samples, 97.59%)</title><rect x="0.0000%" y="149" width="97.5899%" height="15" fill="rgb(227,1,9)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="159.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (5,183 samples, 97.59%)</title><rect x="0.0000%" y="133" width="97.5899%" height="15" fill="rgb(248,47,43)" fg:x="0" fg:w="5183"/><text x="0.2500%" y="143.50">briolette_sim::main</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (3 samples, 0.06%)</title><rect x="97.5334%" y="117" width="0.0565%" height="15" fill="rgb(221,10,30)" fg:x="5180" fg:w="3"/><text x="97.7834%" y="127.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="97.5711%" y="101" width="0.0188%" height="15" fill="rgb(210,229,1)" fg:x="5182" fg:w="1"/><text x="97.8211%" y="111.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (1 samples, 0.02%)</title><rect x="97.6276%" y="149" width="0.0188%" height="15" fill="rgb(222,148,37)" fg:x="5185" fg:w="1"/><text x="97.8776%" y="159.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.6276%" y="133" width="0.0188%" height="15" fill="rgb(234,67,33)" fg:x="5185" fg:w="1"/><text x="97.8776%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.6276%" y="117" width="0.0188%" height="15" fill="rgb(247,98,35)" fg:x="5185" fg:w="1"/><text x="97.8776%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="97.6464%" y="149" width="0.0377%" height="15" fill="rgb(247,138,52)" fg:x="5186" fg:w="2"/><text x="97.8964%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.6652%" y="133" width="0.0188%" height="15" fill="rgb(213,79,30)" fg:x="5187" fg:w="1"/><text x="97.9152%" y="143.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="97.6652%" y="117" width="0.0188%" height="15" fill="rgb(246,177,23)" fg:x="5187" fg:w="1"/><text x="97.9152%" y="127.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (1 samples, 0.02%)</title><rect x="97.6841%" y="149" width="0.0188%" height="15" fill="rgb(230,62,27)" fg:x="5188" fg:w="1"/><text x="97.9341%" y="159.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (4 samples, 0.08%)</title><rect x="97.7594%" y="133" width="0.0753%" height="15" fill="rgb(216,154,8)" fg:x="5192" fg:w="4"/><text x="98.0094%" y="143.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="97.7782%" y="117" width="0.0565%" height="15" fill="rgb(244,35,45)" fg:x="5193" fg:w="3"/><text x="98.0282%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.04%)</title><rect x="97.7970%" y="101" width="0.0377%" height="15" fill="rgb(251,115,12)" fg:x="5194" fg:w="2"/><text x="98.0470%" y="111.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (8 samples, 0.15%)</title><rect x="97.7029%" y="149" width="0.1506%" height="15" fill="rgb(240,54,50)" fg:x="5189" fg:w="8"/><text x="97.9529%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="97.8347%" y="133" width="0.0188%" height="15" fill="rgb(233,84,52)" fg:x="5196" fg:w="1"/><text x="98.0847%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="97.8347%" y="117" width="0.0188%" height="15" fill="rgb(207,117,47)" fg:x="5196" fg:w="1"/><text x="98.0847%" y="127.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run::{{closure}}::{{closure}} (16 samples, 0.30%)</title><rect x="97.5899%" y="181" width="0.3013%" height="15" fill="rgb(249,43,39)" fg:x="5183" fg:w="16"/><text x="97.8399%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (16 samples, 0.30%)</title><rect x="97.5899%" y="165" width="0.3013%" height="15" fill="rgb(209,38,44)" fg:x="5183" fg:w="16"/><text x="97.8399%" y="175.50"></text></g><g><title>rand::seq::IteratorRandom::choose (2 samples, 0.04%)</title><rect x="97.8535%" y="149" width="0.0377%" height="15" fill="rgb(236,212,23)" fg:x="5197" fg:w="2"/><text x="98.1035%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.04%)</title><rect x="97.8535%" y="133" width="0.0377%" height="15" fill="rgb(242,79,21)" fg:x="5197" fg:w="2"/><text x="98.1035%" y="143.50"></text></g><g><title>all (5,311 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="5311"/><text x="0.2500%" y="271.50"></text></g><g><title>briolette-sim (5,311 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="5311"/><text x="0.2500%" y="255.50">briolette-sim</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (128 samples, 2.41%)</title><rect x="97.5899%" y="229" width="2.4101%" height="15" fill="rgb(211,81,21)" fg:x="5183" fg:w="128"/><text x="97.8399%" y="239.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (128 samples, 2.41%)</title><rect x="97.5899%" y="213" width="2.4101%" height="15" fill="rgb(208,190,38)" fg:x="5183" fg:w="128"/><text x="97.8399%" y="223.50">co..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (128 samples, 2.41%)</title><rect x="97.5899%" y="197" width="2.4101%" height="15" fill="rgb(235,213,38)" fg:x="5183" fg:w="128"/><text x="97.8399%" y="207.50">st..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;absim::clients::LocalSimulationClient&lt;briolette_sim::simulator::Simulator&gt; as absim::SimulationClient&lt;briolette_sim::simulator::Simulator&gt;&gt;::run::{{closure}}&gt; (112 samples, 2.11%)</title><rect x="97.8912%" y="181" width="2.1088%" height="15" fill="rgb(237,122,38)" fg:x="5199" fg:w="112"/><text x="98.1412%" y="191.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;absim::WorldView&lt;briolette_sim::simulator::Simulator&gt;&gt; (112 samples, 2.11%)</title><rect x="97.8912%" y="165" width="2.1088%" height="15" fill="rgb(244,218,35)" fg:x="5199" fg:w="112"/><text x="98.1412%" y="175.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (112 samples, 2.11%)</title><rect x="97.8912%" y="149" width="2.1088%" height="15" fill="rgb(240,68,47)" fg:x="5199" fg:w="112"/><text x="98.1412%" y="159.50">c..</text></g><g><title>__rdl_dealloc (19 samples, 0.36%)</title><rect x="99.6423%" y="133" width="0.3577%" height="15" fill="rgb(210,16,53)" fg:x="5292" fg:w="19"/><text x="99.8923%" y="143.50"></text></g></svg></svg>