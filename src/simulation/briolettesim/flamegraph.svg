<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="7288046"><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (120,703 samples, 1.66%)</title><rect x="7.8949%" y="197" width="1.6562%" height="15" fill="rgb(208,198,18)" fg:x="575386" fg:w="120703"/><text x="8.1449%" y="207.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (120,569 samples, 1.65%)</title><rect x="7.8968%" y="181" width="1.6543%" height="15" fill="rgb(233,45,11)" fg:x="575520" fg:w="120569"/><text x="8.1468%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (119,796 samples, 1.64%)</title><rect x="7.9074%" y="165" width="1.6437%" height="15" fill="rgb(233,211,25)" fg:x="576293" fg:w="119796"/><text x="8.1574%" y="175.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (57,534 samples, 0.79%)</title><rect x="8.7617%" y="149" width="0.7894%" height="15" fill="rgb(220,68,7)" fg:x="638555" fg:w="57534"/><text x="9.0117%" y="159.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (120,899 samples, 1.66%)</title><rect x="7.8927%" y="213" width="1.6589%" height="15" fill="rgb(226,112,5)" fg:x="575223" fg:w="120899"/><text x="8.1427%" y="223.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::enqueue_delayed (786 samples, 0.01%)</title><rect x="9.5516%" y="213" width="0.0108%" height="15" fill="rgb(231,150,37)" fg:x="696122" fg:w="786"/><text x="9.8016%" y="223.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::collect (1,646 samples, 0.02%)</title><rect x="13.5817%" y="197" width="0.0226%" height="15" fill="rgb(206,123,33)" fg:x="989843" fg:w="1646"/><text x="13.8317%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100,400 samples, 1.38%)</title><rect x="14.1024%" y="181" width="1.3776%" height="15" fill="rgb(253,227,42)" fg:x="1027787" fg:w="100400"/><text x="14.3524%" y="191.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (34,420 samples, 0.47%)</title><rect x="18.6481%" y="117" width="0.4723%" height="15" fill="rgb(227,204,19)" fg:x="1359085" fg:w="34420"/><text x="18.8981%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (85,815 samples, 1.18%)</title><rect x="17.9430%" y="133" width="1.1775%" height="15" fill="rgb(248,219,10)" fg:x="1307691" fg:w="85815"/><text x="18.1930%" y="143.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (118,980 samples, 1.63%)</title><rect x="17.4879%" y="149" width="1.6325%" height="15" fill="rgb(221,28,29)" fg:x="1274528" fg:w="118980"/><text x="17.7379%" y="159.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (138,016 samples, 1.89%)</title><rect x="17.2279%" y="165" width="1.8937%" height="15" fill="rgb(208,18,28)" fg:x="1255579" fg:w="138016"/><text x="17.4779%" y="175.50">&lt;..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (28,150 samples, 0.39%)</title><rect x="19.8179%" y="133" width="0.3862%" height="15" fill="rgb(232,211,21)" fg:x="1444340" fg:w="28150"/><text x="20.0679%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (62,404 samples, 0.86%)</title><rect x="19.3481%" y="149" width="0.8563%" height="15" fill="rgb(236,107,3)" fg:x="1410097" fg:w="62404"/><text x="19.5981%" y="159.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (78,908 samples, 1.08%)</title><rect x="19.1217%" y="165" width="1.0827%" height="15" fill="rgb(217,59,19)" fg:x="1393595" fg:w="78908"/><text x="19.3717%" y="175.50"></text></g><g><title>rand::rngs::thread::thread_rng (843 samples, 0.01%)</title><rect x="20.8096%" y="149" width="0.0116%" height="15" fill="rgb(251,227,42)" fg:x="1516612" fg:w="843"/><text x="21.0596%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide (839 samples, 0.01%)</title><rect x="20.8212%" y="149" width="0.0115%" height="15" fill="rgb(221,24,36)" fg:x="1517455" fg:w="839"/><text x="21.0712%" y="159.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (82,523 samples, 1.13%)</title><rect x="20.2044%" y="165" width="1.1323%" height="15" fill="rgb(232,163,38)" fg:x="1472503" fg:w="82523"/><text x="20.4544%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (36,732 samples, 0.50%)</title><rect x="20.8327%" y="149" width="0.5040%" height="15" fill="rgb(235,226,28)" fg:x="1518294" fg:w="36732"/><text x="21.0827%" y="159.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (31,025 samples, 0.43%)</title><rect x="21.3367%" y="165" width="0.4257%" height="15" fill="rgb(251,148,1)" fg:x="1555026" fg:w="31025"/><text x="21.5867%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (947 samples, 0.01%)</title><rect x="21.7494%" y="149" width="0.0130%" height="15" fill="rgb(238,86,30)" fg:x="1585104" fg:w="947"/><text x="21.9994%" y="159.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (37,740 samples, 0.52%)</title><rect x="27.3154%" y="101" width="0.5178%" height="15" fill="rgb(217,95,54)" fg:x="1990758" fg:w="37740"/><text x="27.5654%" y="111.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (162,145 samples, 2.22%)</title><rect x="25.6085%" y="149" width="2.2248%" height="15" fill="rgb(237,120,34)" fg:x="1866362" fg:w="162145"/><text x="25.8585%" y="159.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (152,601 samples, 2.09%)</title><rect x="25.7395%" y="133" width="2.0939%" height="15" fill="rgb(253,61,32)" fg:x="1875906" fg:w="152601"/><text x="25.9895%" y="143.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (97,082 samples, 1.33%)</title><rect x="26.5013%" y="117" width="1.3321%" height="15" fill="rgb(226,168,17)" fg:x="1931425" fg:w="97082"/><text x="26.7513%" y="127.50"></text></g><g><title>__rdl_dealloc (1,044 samples, 0.01%)</title><rect x="27.8413%" y="149" width="0.0143%" height="15" fill="rgb(232,87,25)" fg:x="2029087" fg:w="1044"/><text x="28.0913%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (52,214 samples, 0.72%)</title><rect x="28.4600%" y="133" width="0.7164%" height="15" fill="rgb(217,55,0)" fg:x="2074179" fg:w="52214"/><text x="28.7100%" y="143.50"></text></g><g><title>__rdl_realloc (12,686 samples, 0.17%)</title><rect x="29.0024%" y="117" width="0.1741%" height="15" fill="rgb(220,95,50)" fg:x="2113707" fg:w="12686"/><text x="29.2524%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (97,715 samples, 1.34%)</title><rect x="27.8556%" y="149" width="1.3408%" height="15" fill="rgb(206,41,47)" fg:x="2030131" fg:w="97715"/><text x="28.1056%" y="159.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (1,453 samples, 0.02%)</title><rect x="29.1764%" y="133" width="0.0199%" height="15" fill="rgb(216,189,15)" fg:x="2126393" fg:w="1453"/><text x="29.4264%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (23,433 samples, 0.32%)</title><rect x="29.1964%" y="149" width="0.3215%" height="15" fill="rgb(249,102,51)" fg:x="2127846" fg:w="23433"/><text x="29.4464%" y="159.50"></text></g><g><title>__rdl_dealloc (9,252 samples, 0.13%)</title><rect x="29.3910%" y="133" width="0.1269%" height="15" fill="rgb(205,14,10)" fg:x="2142027" fg:w="9252"/><text x="29.6410%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (1,798 samples, 0.02%)</title><rect x="29.5179%" y="149" width="0.0247%" height="15" fill="rgb(243,105,5)" fg:x="2151279" fg:w="1798"/><text x="29.7679%" y="159.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (579,330 samples, 7.95%)</title><rect x="21.7739%" y="165" width="7.9490%" height="15" fill="rgb(225,48,52)" fg:x="1586895" fg:w="579330"/><text x="22.0239%" y="175.50">briolette_s..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (12,339 samples, 0.17%)</title><rect x="29.5537%" y="149" width="0.1693%" height="15" fill="rgb(245,56,9)" fg:x="2153886" fg:w="12339"/><text x="29.8037%" y="159.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6,698 samples, 0.09%)</title><rect x="29.7230%" y="165" width="0.0919%" height="15" fill="rgb(241,77,35)" fg:x="2166225" fg:w="6698"/><text x="29.9730%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,284 samples, 0.03%)</title><rect x="29.7836%" y="149" width="0.0313%" height="15" fill="rgb(223,67,17)" fg:x="2170639" fg:w="2284"/><text x="30.0336%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (14,426 samples, 0.20%)</title><rect x="29.8153%" y="165" width="0.1979%" height="15" fill="rgb(253,225,51)" fg:x="2172956" fg:w="14426"/><text x="30.0653%" y="175.50"></text></g><g><title>__rdl_dealloc (4,476 samples, 0.06%)</title><rect x="29.9519%" y="149" width="0.0614%" height="15" fill="rgb(206,52,14)" fg:x="2182906" fg:w="4476"/><text x="30.2019%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (8,877 samples, 0.12%)</title><rect x="30.0133%" y="165" width="0.1218%" height="15" fill="rgb(237,113,27)" fg:x="2187382" fg:w="8877"/><text x="30.2633%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12,889 samples, 0.18%)</title><rect x="30.1351%" y="165" width="0.1769%" height="15" fill="rgb(233,20,15)" fg:x="2196259" fg:w="12889"/><text x="30.3851%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,206 samples, 0.11%)</title><rect x="30.1993%" y="149" width="0.1126%" height="15" fill="rgb(208,99,33)" fg:x="2200942" fg:w="8206"/><text x="30.4493%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,787 samples, 0.04%)</title><rect x="30.2737%" y="133" width="0.0382%" height="15" fill="rgb(222,222,34)" fg:x="2206361" fg:w="2787"/><text x="30.5237%" y="143.50"></text></g><g><title>rand::rng::Rng::gen_range (9,763 samples, 0.13%)</title><rect x="30.3119%" y="165" width="0.1340%" height="15" fill="rgb(241,223,14)" fg:x="2209148" fg:w="9763"/><text x="30.5619%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3,183 samples, 0.04%)</title><rect x="30.4022%" y="149" width="0.0437%" height="15" fill="rgb(246,8,38)" fg:x="2215728" fg:w="3183"/><text x="30.6522%" y="159.50"></text></g><g><title>rand::seq::IteratorRandom::choose (146,671 samples, 2.01%)</title><rect x="30.4459%" y="165" width="2.0125%" height="15" fill="rgb(214,73,13)" fg:x="2218911" fg:w="146671"/><text x="30.6959%" y="175.50">r..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (13,770 samples, 0.19%)</title><rect x="32.2694%" y="149" width="0.1889%" height="15" fill="rgb(212,29,32)" fg:x="2351812" fg:w="13770"/><text x="32.5194%" y="159.50"></text></g><g><title>__floor_sse41 (1,335 samples, 0.02%)</title><rect x="32.7385%" y="149" width="0.0183%" height="15" fill="rgb(222,25,44)" fg:x="2385996" fg:w="1335"/><text x="32.9885%" y="159.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (1,276,859 samples, 17.52%)</title><rect x="15.4800%" y="181" width="17.5199%" height="15" fill="rgb(235,161,8)" fg:x="1128187" fg:w="1276859"/><text x="15.7300%" y="191.50">&lt;briolette_sim::simulator::..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (39,464 samples, 0.54%)</title><rect x="32.4584%" y="165" width="0.5415%" height="15" fill="rgb(234,71,51)" fg:x="2365582" fg:w="39464"/><text x="32.7084%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (16,829 samples, 0.23%)</title><rect x="32.7690%" y="149" width="0.2309%" height="15" fill="rgb(226,53,32)" fg:x="2388217" fg:w="16829"/><text x="33.0190%" y="159.50"></text></g><g><title>rand_chacha::guts::init_chacha (1,836 samples, 0.03%)</title><rect x="33.4380%" y="165" width="0.0252%" height="15" fill="rgb(236,222,18)" fg:x="2436976" fg:w="1836"/><text x="33.6880%" y="175.50"></text></g><g><title>rand_chacha::guts::init_chacha::impl_avx (1,300 samples, 0.02%)</title><rect x="33.4453%" y="149" width="0.0178%" height="15" fill="rgb(212,156,10)" fg:x="2437512" fg:w="1300"/><text x="33.6953%" y="159.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as core::clone::Clone&gt;::clone (36,848 samples, 0.51%)</title><rect x="32.9999%" y="181" width="0.5056%" height="15" fill="rgb(226,144,13)" fg:x="2405046" fg:w="36848"/><text x="33.2499%" y="191.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64::pcg32 (3,082 samples, 0.04%)</title><rect x="33.4632%" y="165" width="0.0423%" height="15" fill="rgb(254,169,46)" fg:x="2438812" fg:w="3082"/><text x="33.7132%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (3,237 samples, 0.04%)</title><rect x="33.5106%" y="181" width="0.0444%" height="15" fill="rgb(247,144,31)" fg:x="2442270" fg:w="3237"/><text x="33.7606%" y="191.50"></text></g><g><title>__rdl_dealloc (992 samples, 0.01%)</title><rect x="33.5414%" y="165" width="0.0136%" height="15" fill="rgb(235,106,1)" fg:x="2444515" fg:w="992"/><text x="33.7914%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::WorldView&lt;briolette_sim::simulator::Simulator&gt;&gt; (3,657 samples, 0.05%)</title><rect x="33.5557%" y="181" width="0.0502%" height="15" fill="rgb(209,155,43)" fg:x="2445552" fg:w="3657"/><text x="33.8057%" y="191.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (1,490,899 samples, 20.46%)</title><rect x="13.6043%" y="197" width="20.4568%" height="15" fill="rgb(235,146,15)" fg:x="991489" fg:w="1490899"/><text x="13.8543%" y="207.50">&lt;absim::clients::LocalSimulation..</text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (33,179 samples, 0.46%)</title><rect x="33.6058%" y="181" width="0.4553%" height="15" fill="rgb(227,147,35)" fg:x="2449209" fg:w="33179"/><text x="33.8558%" y="191.50"></text></g><g><title>__rdl_dealloc (15,953 samples, 0.22%)</title><rect x="33.8422%" y="165" width="0.2189%" height="15" fill="rgb(250,12,18)" fg:x="2466435" fg:w="15953"/><text x="34.0922%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (72,992 samples, 1.00%)</title><rect x="44.7815%" y="181" width="1.0015%" height="15" fill="rgb(249,42,51)" fg:x="3263696" fg:w="72992"/><text x="45.0315%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,552 samples, 0.04%)</title><rect x="46.9099%" y="149" width="0.0350%" height="15" fill="rgb(225,159,42)" fg:x="3418818" fg:w="2552"/><text x="47.1599%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4,798 samples, 0.07%)</title><rect x="46.8806%" y="165" width="0.0658%" height="15" fill="rgb(236,225,19)" fg:x="3416681" fg:w="4798"/><text x="47.1306%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (51,860 samples, 0.71%)</title><rect x="46.9465%" y="165" width="0.7116%" height="15" fill="rgb(249,122,7)" fg:x="3421479" fg:w="51860"/><text x="47.1965%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (136,662 samples, 1.88%)</title><rect x="45.7830%" y="181" width="1.8752%" height="15" fill="rgb(235,49,2)" fg:x="3336688" fg:w="136662"/><text x="46.0330%" y="191.50">&lt;..</text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (89,461 samples, 1.23%)</title><rect x="47.6582%" y="181" width="1.2275%" height="15" fill="rgb(229,146,27)" fg:x="3473350" fg:w="89461"/><text x="47.9082%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,693 samples, 0.04%)</title><rect x="48.8487%" y="165" width="0.0370%" height="15" fill="rgb(248,190,49)" fg:x="3560118" fg:w="2693"/><text x="49.0987%" y="175.50"></text></g><g><title>__rdl_dealloc (7,594 samples, 0.10%)</title><rect x="48.8883%" y="181" width="0.1042%" height="15" fill="rgb(239,210,41)" fg:x="3563005" fg:w="7594"/><text x="49.1383%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (21,570 samples, 0.30%)</title><rect x="49.2553%" y="165" width="0.2960%" height="15" fill="rgb(226,170,5)" fg:x="3589750" fg:w="21570"/><text x="49.5053%" y="175.50"></text></g><g><title>__rdl_realloc (5,023 samples, 0.07%)</title><rect x="49.4824%" y="149" width="0.0689%" height="15" fill="rgb(215,79,26)" fg:x="3606297" fg:w="5023"/><text x="49.7324%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (41,485 samples, 0.57%)</title><rect x="48.9925%" y="181" width="0.5692%" height="15" fill="rgb(237,57,19)" fg:x="3570599" fg:w="41485"/><text x="49.2425%" y="191.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (764 samples, 0.01%)</title><rect x="49.5513%" y="165" width="0.0105%" height="15" fill="rgb(212,28,51)" fg:x="3611320" fg:w="764"/><text x="49.8013%" y="175.50"></text></g><g><title>briolette_sim::simulator::&lt;impl absim::Enqueue&lt;briolette_sim::simulator::Simulator&gt; for alloc::vec::Vec&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt;&gt;::enqueue (1,927 samples, 0.03%)</title><rect x="49.5662%" y="181" width="0.0264%" height="15" fill="rgb(209,79,39)" fg:x="3612409" fg:w="1927"/><text x="49.8162%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (930 samples, 0.01%)</title><rect x="49.5799%" y="165" width="0.0128%" height="15" fill="rgb(222,117,39)" fg:x="3613406" fg:w="930"/><text x="49.8299%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (12,433 samples, 0.17%)</title><rect x="49.5927%" y="181" width="0.1706%" height="15" fill="rgb(237,79,5)" fg:x="3614336" fg:w="12433"/><text x="49.8427%" y="191.50"></text></g><g><title>__rdl_dealloc (1,875 samples, 0.03%)</title><rect x="49.7375%" y="165" width="0.0257%" height="15" fill="rgb(236,175,43)" fg:x="3624894" fg:w="1875"/><text x="49.9875%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (22,027 samples, 0.30%)</title><rect x="49.7633%" y="181" width="0.3022%" height="15" fill="rgb(234,204,22)" fg:x="3626769" fg:w="22027"/><text x="50.0133%" y="191.50"></text></g><g><title>__rdl_dealloc (9,953 samples, 0.14%)</title><rect x="49.9289%" y="165" width="0.1366%" height="15" fill="rgb(246,27,8)" fg:x="3638843" fg:w="9953"/><text x="50.1789%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (1,490 samples, 0.02%)</title><rect x="50.0655%" y="181" width="0.0204%" height="15" fill="rgb(243,39,6)" fg:x="3648796" fg:w="1490"/><text x="50.3155%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (24,341 samples, 0.33%)</title><rect x="50.0859%" y="181" width="0.3340%" height="15" fill="rgb(239,172,43)" fg:x="3650286" fg:w="24341"/><text x="50.3359%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4,992 samples, 0.07%)</title><rect x="50.4313%" y="181" width="0.0685%" height="15" fill="rgb(250,116,6)" fg:x="3675455" fg:w="4992"/><text x="50.6813%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (1,197,888 samples, 16.44%)</title><rect x="34.0635%" y="197" width="16.4363%" height="15" fill="rgb(217,151,43)" fg:x="2482562" fg:w="1197888"/><text x="34.3135%" y="207.50">&lt;briolette_sim::simulator..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (138,576 samples, 1.90%)</title><rect x="50.5146%" y="181" width="1.9014%" height="15" fill="rgb(226,86,13)" fg:x="3681527" fg:w="138576"/><text x="50.7646%" y="191.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (137,559 samples, 1.89%)</title><rect x="50.5286%" y="165" width="1.8875%" height="15" fill="rgb(240,7,26)" fg:x="3682544" fg:w="137559"/><text x="50.7786%" y="175.50">&lt;..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (58,845 samples, 0.81%)</title><rect x="51.6086%" y="149" width="0.8074%" height="15" fill="rgb(228,219,50)" fg:x="3761258" fg:w="58845"/><text x="51.8586%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (2,443 samples, 0.03%)</title><rect x="52.4160%" y="181" width="0.0335%" height="15" fill="rgb(244,52,36)" fg:x="3820103" fg:w="2443"/><text x="52.6660%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,273 samples, 0.03%)</title><rect x="52.4495%" y="181" width="0.0312%" height="15" fill="rgb(223,213,20)" fg:x="3822546" fg:w="2273"/><text x="52.6995%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,438 samples, 0.02%)</title><rect x="52.4610%" y="165" width="0.0197%" height="15" fill="rgb(212,175,49)" fg:x="3823381" fg:w="1438"/><text x="52.7110%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (145,028 samples, 1.99%)</title><rect x="50.4998%" y="197" width="1.9899%" height="15" fill="rgb(217,222,29)" fg:x="3680450" fg:w="145028"/><text x="50.7498%" y="207.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18,941 samples, 0.26%)</title><rect x="58.6615%" y="181" width="0.2599%" height="15" fill="rgb(231,38,13)" fg:x="4275276" fg:w="18941"/><text x="58.9115%" y="191.50"></text></g><g><title>absim::graph_utils::SimulationGraph::at_location_mut (1,578 samples, 0.02%)</title><rect x="58.9255%" y="181" width="0.0217%" height="15" fill="rgb(214,180,54)" fg:x="4294515" fg:w="1578"/><text x="59.1755%" y="191.50"></text></g><g><title>absim::graph_utils::SimulationGraph::reset (2,319 samples, 0.03%)</title><rect x="58.9471%" y="181" width="0.0318%" height="15" fill="rgb(233,91,7)" fg:x="4296093" fg:w="2319"/><text x="59.1971%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,918 samples, 0.05%)</title><rect x="59.0352%" y="165" width="0.0538%" height="15" fill="rgb(239,186,9)" fg:x="4302511" fg:w="3918"/><text x="59.2852%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,131 samples, 0.11%)</title><rect x="58.9789%" y="181" width="0.1116%" height="15" fill="rgb(207,116,39)" fg:x="4298412" fg:w="8131"/><text x="59.2289%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (26,116 samples, 0.36%)</title><rect x="59.0905%" y="181" width="0.3583%" height="15" fill="rgb(225,160,9)" fg:x="4306543" fg:w="26116"/><text x="59.3405%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,024 samples, 0.11%)</title><rect x="59.3387%" y="165" width="0.1101%" height="15" fill="rgb(253,40,47)" fg:x="4324635" fg:w="8024"/><text x="59.5887%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (531,975 samples, 7.30%)</title><rect x="52.4898%" y="197" width="7.2993%" height="15" fill="rgb(224,3,11)" fg:x="3825478" fg:w="531975"/><text x="52.7398%" y="207.50">&lt;briolette..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24,723 samples, 0.34%)</title><rect x="59.4498%" y="181" width="0.3392%" height="15" fill="rgb(227,140,17)" fg:x="4332730" fg:w="24723"/><text x="59.6998%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14,479 samples, 0.20%)</title><rect x="59.5904%" y="165" width="0.1987%" height="15" fill="rgb(233,42,37)" fg:x="4342974" fg:w="14479"/><text x="59.8404%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,518 samples, 0.05%)</title><rect x="59.7408%" y="149" width="0.0483%" height="15" fill="rgb(222,59,39)" fg:x="4353935" fg:w="3518"/><text x="59.9908%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (99,445 samples, 1.36%)</title><rect x="61.4860%" y="181" width="1.3645%" height="15" fill="rgb(217,203,37)" fg:x="4481125" fg:w="99445"/><text x="61.7360%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (25,470 samples, 0.35%)</title><rect x="63.2191%" y="165" width="0.3495%" height="15" fill="rgb(222,208,41)" fg:x="4607434" fg:w="25470"/><text x="63.4691%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,465 samples, 0.10%)</title><rect x="63.4661%" y="149" width="0.1024%" height="15" fill="rgb(211,174,17)" fg:x="4625439" fg:w="7465"/><text x="63.7161%" y="159.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (328,724 samples, 4.51%)</title><rect x="59.7890%" y="197" width="4.5105%" height="15" fill="rgb(231,197,41)" fg:x="4357453" fg:w="328724"/><text x="60.0390%" y="207.50">&lt;brio..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (105,308 samples, 1.44%)</title><rect x="62.8546%" y="181" width="1.4449%" height="15" fill="rgb(230,51,53)" fg:x="4580869" fg:w="105308"/><text x="63.1046%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (53,273 samples, 0.73%)</title><rect x="63.5685%" y="165" width="0.7310%" height="15" fill="rgb(242,192,12)" fg:x="4632904" fg:w="53273"/><text x="63.8185%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (21,677 samples, 0.30%)</title><rect x="64.0021%" y="149" width="0.2974%" height="15" fill="rgb(206,188,0)" fg:x="4664500" fg:w="21677"/><text x="64.2521%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,163 samples, 0.08%)</title><rect x="64.2149%" y="133" width="0.0846%" height="15" fill="rgb(222,143,39)" fg:x="4680014" fg:w="6163"/><text x="64.4649%" y="143.50"></text></g><g><title>__rdl_dealloc (11,192 samples, 0.15%)</title><rect x="64.2995%" y="197" width="0.1536%" height="15" fill="rgb(247,77,37)" fg:x="4686177" fg:w="11192"/><text x="64.5495%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (17,191 samples, 0.24%)</title><rect x="64.5182%" y="181" width="0.2359%" height="15" fill="rgb(220,226,46)" fg:x="4702118" fg:w="17191"/><text x="64.7682%" y="191.50"></text></g><g><title>__rdl_dealloc (7,131 samples, 0.10%)</title><rect x="64.6563%" y="165" width="0.0978%" height="15" fill="rgb(249,38,16)" fg:x="4712178" fg:w="7131"/><text x="64.9063%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (66,448 samples, 0.91%)</title><rect x="64.7541%" y="181" width="0.9117%" height="15" fill="rgb(212,202,38)" fg:x="4719309" fg:w="66448"/><text x="65.0041%" y="191.50"></text></g><g><title>__rdl_dealloc (4,290 samples, 0.06%)</title><rect x="65.6070%" y="165" width="0.0589%" height="15" fill="rgb(220,201,40)" fg:x="4781467" fg:w="4290"/><text x="65.8570%" y="175.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (108,556 samples, 1.49%)</title><rect x="64.4531%" y="197" width="1.4895%" height="15" fill="rgb(250,89,35)" fg:x="4697369" fg:w="108556"/><text x="64.7031%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (20,168 samples, 0.28%)</title><rect x="65.6658%" y="181" width="0.2767%" height="15" fill="rgb(233,143,0)" fg:x="4785757" fg:w="20168"/><text x="65.9158%" y="191.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (1,595 samples, 0.02%)</title><rect x="65.9696%" y="133" width="0.0219%" height="15" fill="rgb(249,103,2)" fg:x="4807896" fg:w="1595"/><text x="66.2196%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,081 samples, 0.01%)</title><rect x="65.9767%" y="117" width="0.0148%" height="15" fill="rgb(250,83,35)" fg:x="4808410" fg:w="1081"/><text x="66.2267%" y="127.50"></text></g><g><title>std::io::Write::write_all (741 samples, 0.01%)</title><rect x="65.9813%" y="101" width="0.0102%" height="15" fill="rgb(234,38,28)" fg:x="4808750" fg:w="741"/><text x="66.2313%" y="111.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (2,834 samples, 0.04%)</title><rect x="65.9639%" y="149" width="0.0389%" height="15" fill="rgb(219,226,6)" fg:x="4807482" fg:w="2834"/><text x="66.2139%" y="159.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (736 samples, 0.01%)</title><rect x="65.9927%" y="133" width="0.0101%" height="15" fill="rgb(227,55,8)" fg:x="4809580" fg:w="736"/><text x="66.2427%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (4,438 samples, 0.06%)</title><rect x="65.9456%" y="181" width="0.0609%" height="15" fill="rgb(243,53,53)" fg:x="4806146" fg:w="4438"/><text x="66.1956%" y="191.50"></text></g><g><title>core::fmt::write (4,252 samples, 0.06%)</title><rect x="65.9482%" y="165" width="0.0583%" height="15" fill="rgb(240,200,31)" fg:x="4806332" fg:w="4252"/><text x="66.1982%" y="175.50"></text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (4,708 samples, 0.06%)</title><rect x="65.9428%" y="197" width="0.0646%" height="15" fill="rgb(221,3,51)" fg:x="4805939" fg:w="4708"/><text x="66.1928%" y="207.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (4,113,850 samples, 56.45%)</title><rect x="9.5623%" y="213" width="56.4465%" height="15" fill="rgb(239,92,27)" fg:x="696908" fg:w="4113850"/><text x="9.8123%" y="223.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14,376 samples, 0.20%)</title><rect x="66.0089%" y="213" width="0.1973%" height="15" fill="rgb(210,90,4)" fg:x="4810759" fg:w="14376"/><text x="66.2589%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,185,260 samples, 29.98%)</title><rect x="66.2074%" y="197" width="29.9842%" height="15" fill="rgb(215,95,1)" fg:x="4825228" fg:w="2185260"/><text x="66.4574%" y="207.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::i..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,456,493 samples, 19.98%)</title><rect x="76.2069%" y="181" width="19.9847%" height="15" fill="rgb(238,143,52)" fg:x="5553995" fg:w="1456493"/><text x="76.4569%" y="191.50">hashbrown::map::HashMap&lt;K,V,S,A..</text></g><g><title>core::hash::BuildHasher::hash_one (75,093 samples, 1.03%)</title><rect x="95.1612%" y="165" width="1.0304%" height="15" fill="rgb(218,28,26)" fg:x="6935395" fg:w="75093"/><text x="95.4112%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15,970 samples, 0.22%)</title><rect x="95.9725%" y="149" width="0.2191%" height="15" fill="rgb(249,107,44)" fg:x="6994518" fg:w="15970"/><text x="96.2225%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,185,324 samples, 29.99%)</title><rect x="66.2071%" y="213" width="29.9850%" height="15" fill="rgb(254,90,20)" fg:x="4825203" fg:w="2185324"/><text x="66.4571%" y="223.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as ..</text></g><g><title>__rdl_alloc (6,059 samples, 0.08%)</title><rect x="96.1922%" y="213" width="0.0831%" height="15" fill="rgb(246,199,37)" fg:x="7010535" fg:w="6059"/><text x="96.4422%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (817 samples, 0.01%)</title><rect x="96.2765%" y="197" width="0.0112%" height="15" fill="rgb(252,180,42)" fg:x="7016678" fg:w="817"/><text x="96.5265%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::new (1,606 samples, 0.02%)</title><rect x="96.2756%" y="213" width="0.0220%" height="15" fill="rgb(213,202,19)" fg:x="7016607" fg:w="1606"/><text x="96.5256%" y="223.50"></text></g><g><title>__rdl_dealloc (13,429 samples, 0.18%)</title><rect x="96.5164%" y="181" width="0.1843%" height="15" fill="rgb(219,50,47)" fg:x="7034160" fg:w="13429"/><text x="96.7664%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (28,806 samples, 0.40%)</title><rect x="96.3095%" y="197" width="0.3952%" height="15" fill="rgb(212,43,21)" fg:x="7019079" fg:w="28806"/><text x="96.5595%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (224,248 samples, 3.08%)</title><rect x="96.7052%" y="181" width="3.0769%" height="15" fill="rgb(223,203,19)" fg:x="7047922" fg:w="224248"/><text x="96.9552%" y="191.50">&lt;ha..</text></g><g><title>__rdl_dealloc (2,830 samples, 0.04%)</title><rect x="99.7433%" y="165" width="0.0388%" height="15" fill="rgb(254,191,6)" fg:x="7269340" fg:w="2830"/><text x="99.9933%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (253,470 samples, 3.48%)</title><rect x="96.3057%" y="213" width="3.4779%" height="15" fill="rgb(212,103,41)" fg:x="7018805" fg:w="253470"/><text x="96.5557%" y="223.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (224,382 samples, 3.08%)</title><rect x="96.7048%" y="197" width="3.0788%" height="15" fill="rgb(250,103,4)" fg:x="7047893" fg:w="224382"/><text x="96.9548%" y="207.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (12,235 samples, 0.17%)</title><rect x="99.7836%" y="213" width="0.1679%" height="15" fill="rgb(246,190,24)" fg:x="7272275" fg:w="12235"/><text x="100.0336%" y="223.50"></text></g><g><title>__rdl_dealloc (4,178 samples, 0.06%)</title><rect x="99.8942%" y="197" width="0.0573%" height="15" fill="rgb(220,79,19)" fg:x="7280332" fg:w="4178"/><text x="100.1442%" y="207.50"></text></g><g><title>alloc::fmt::format::format_inner (812 samples, 0.01%)</title><rect x="99.9680%" y="85" width="0.0111%" height="15" fill="rgb(252,173,47)" fg:x="7285717" fg:w="812"/><text x="100.2180%" y="95.50"></text></g><g><title>core::fmt::write (804 samples, 0.01%)</title><rect x="99.9682%" y="69" width="0.0110%" height="15" fill="rgb(208,143,11)" fg:x="7285725" fg:w="804"/><text x="100.2182%" y="79.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (781 samples, 0.01%)</title><rect x="99.9685%" y="53" width="0.0107%" height="15" fill="rgb(232,168,12)" fg:x="7285748" fg:w="781"/><text x="100.2185%" y="63.50"></text></g><g><title>core::fmt::write (751 samples, 0.01%)</title><rect x="99.9689%" y="37" width="0.0103%" height="15" fill="rgb(238,155,30)" fg:x="7285778" fg:w="751"/><text x="100.2189%" y="47.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (2,128 samples, 0.03%)</title><rect x="99.9556%" y="149" width="0.0292%" height="15" fill="rgb(215,213,2)" fg:x="7284807" fg:w="2128"/><text x="100.2056%" y="159.50"></text></g><g><title>pprof::frames::Symbol::name (2,074 samples, 0.03%)</title><rect x="99.9563%" y="133" width="0.0285%" height="15" fill="rgb(225,113,45)" fg:x="7284861" fg:w="2074"/><text x="100.2063%" y="143.50"></text></g><g><title>symbolic_demangle::demangle (1,808 samples, 0.02%)</title><rect x="99.9599%" y="117" width="0.0248%" height="15" fill="rgb(238,90,30)" fg:x="7285127" fg:w="1808"/><text x="100.2099%" y="127.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (1,775 samples, 0.02%)</title><rect x="99.9604%" y="101" width="0.0244%" height="15" fill="rgb(238,135,11)" fg:x="7285160" fg:w="1775"/><text x="100.2104%" y="111.50"></text></g><g><title>core::fmt::write (2,183 samples, 0.03%)</title><rect x="99.9549%" y="165" width="0.0300%" height="15" fill="rgb(211,47,26)" fg:x="7284761" fg:w="2183"/><text x="100.2049%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,211 samples, 0.03%)</title><rect x="99.9546%" y="197" width="0.0303%" height="15" fill="rgb(232,165,28)" fg:x="7284735" fg:w="2211"/><text x="100.2046%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,208 samples, 0.03%)</title><rect x="99.9546%" y="181" width="0.0303%" height="15" fill="rgb(206,23,38)" fg:x="7284738" fg:w="2208"/><text x="100.2046%" y="191.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (2,818 samples, 0.04%)</title><rect x="99.9546%" y="213" width="0.0387%" height="15" fill="rgb(243,13,52)" fg:x="7284735" fg:w="2818"/><text x="100.2046%" y="223.50"></text></g><g><title>all (7,288,046 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(237,172,3)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="383.50"></text></g><g><title>briolette-sim (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(239,31,0)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="367.50">briolette-sim</text></g><g><title>_start (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(240,119,3)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="351.50">_start</text></g><g><title>__libc_start_main_impl (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(210,81,1)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="335.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(246,196,38)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="319.50">__libc_start_call_main</text></g><g><title>main (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(236,28,39)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="303.50">main</text></g><g><title>std::rt::lang_start_internal (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(212,12,8)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="287.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,17,26)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="271.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(248,163,21)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="255.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (7,288,046 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(212,61,3)" fg:x="0" fg:w="7288046"/><text x="0.2500%" y="239.50">briolette_sim::main</text></g></svg></svg>