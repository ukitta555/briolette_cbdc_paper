<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="3000574"><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (58,596 samples, 1.95%)</title><rect x="4.7016%" y="213" width="1.9528%" height="15" fill="rgb(240,197,39)" fg:x="141076" fg:w="58596"/><text x="4.9516%" y="223.50">&lt;..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (58,494 samples, 1.95%)</title><rect x="4.7050%" y="197" width="1.9494%" height="15" fill="rgb(232,154,13)" fg:x="141178" fg:w="58494"/><text x="4.9550%" y="207.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (57,862 samples, 1.93%)</title><rect x="4.7261%" y="181" width="1.9284%" height="15" fill="rgb(225,110,8)" fg:x="141810" fg:w="57862"/><text x="4.9761%" y="191.50">&lt;..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (27,504 samples, 0.92%)</title><rect x="5.7378%" y="165" width="0.9166%" height="15" fill="rgb(213,57,6)" fg:x="172168" fg:w="27504"/><text x="5.9878%" y="175.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (58,746 samples, 1.96%)</title><rect x="4.6974%" y="229" width="1.9578%" height="15" fill="rgb(213,225,34)" fg:x="140949" fg:w="58746"/><text x="4.9474%" y="239.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (482 samples, 0.02%)</title><rect x="6.6734%" y="197" width="0.0161%" height="15" fill="rgb(234,152,52)" fg:x="200240" fg:w="482"/><text x="6.9234%" y="207.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (438 samples, 0.01%)</title><rect x="6.6749%" y="181" width="0.0146%" height="15" fill="rgb(235,124,0)" fg:x="200284" fg:w="438"/><text x="6.9249%" y="191.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (536 samples, 0.02%)</title><rect x="6.6717%" y="213" width="0.0179%" height="15" fill="rgb(247,214,50)" fg:x="200190" fg:w="536"/><text x="6.9217%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (437 samples, 0.01%)</title><rect x="6.6905%" y="213" width="0.0146%" height="15" fill="rgb(241,118,4)" fg:x="200754" fg:w="437"/><text x="6.9405%" y="223.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::enqueue_delayed (1,571 samples, 0.05%)</title><rect x="6.6552%" y="229" width="0.0524%" height="15" fill="rgb(207,177,28)" fg:x="199695" fg:w="1571"/><text x="6.9052%" y="239.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::collect (835 samples, 0.03%)</title><rect x="11.8419%" y="213" width="0.0278%" height="15" fill="rgb(233,153,50)" fg:x="355326" fg:w="835"/><text x="12.0919%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51,151 samples, 1.70%)</title><rect x="12.4857%" y="197" width="1.7047%" height="15" fill="rgb(253,119,25)" fg:x="374643" fg:w="51151"/><text x="12.7357%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (50,195 samples, 1.67%)</title><rect x="17.4481%" y="149" width="1.6728%" height="15" fill="rgb(254,98,26)" fg:x="523543" fg:w="50195"/><text x="17.6981%" y="159.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (24,873 samples, 0.83%)</title><rect x="18.2920%" y="133" width="0.8289%" height="15" fill="rgb(231,88,20)" fg:x="548865" fg:w="24873"/><text x="18.5420%" y="143.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (74,422 samples, 2.48%)</title><rect x="16.6407%" y="165" width="2.4803%" height="15" fill="rgb(213,46,39)" fg:x="499317" fg:w="74422"/><text x="16.8907%" y="175.50">&lt;b..</text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (86,265 samples, 2.87%)</title><rect x="16.2508%" y="181" width="2.8749%" height="15" fill="rgb(211,160,39)" fg:x="487617" fg:w="86265"/><text x="16.5008%" y="191.50">&lt;a..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (17,113 samples, 0.57%)</title><rect x="20.0965%" y="149" width="0.5703%" height="15" fill="rgb(226,11,49)" fg:x="603009" fg:w="17113"/><text x="20.3465%" y="159.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (46,242 samples, 1.54%)</title><rect x="19.1257%" y="181" width="1.5411%" height="15" fill="rgb(237,60,24)" fg:x="573882" fg:w="46242"/><text x="19.3757%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34,370 samples, 1.15%)</title><rect x="19.5214%" y="165" width="1.1454%" height="15" fill="rgb(232,36,42)" fg:x="585754" fg:w="34370"/><text x="19.7714%" y="175.50"></text></g><g><title>rand::rngs::thread::thread_rng (489 samples, 0.02%)</title><rect x="21.5155%" y="165" width="0.0163%" height="15" fill="rgb(249,187,46)" fg:x="645587" fg:w="489"/><text x="21.7655%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide (371 samples, 0.01%)</title><rect x="21.5317%" y="165" width="0.0124%" height="15" fill="rgb(250,108,1)" fg:x="646076" fg:w="371"/><text x="21.7817%" y="175.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (43,514 samples, 1.45%)</title><rect x="20.6668%" y="181" width="1.4502%" height="15" fill="rgb(243,24,39)" fg:x="620124" fg:w="43514"/><text x="20.9168%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (17,191 samples, 0.57%)</title><rect x="21.5441%" y="165" width="0.5729%" height="15" fill="rgb(253,213,4)" fg:x="646447" fg:w="17191"/><text x="21.7941%" y="175.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (12,705 samples, 0.42%)</title><rect x="22.1170%" y="181" width="0.4234%" height="15" fill="rgb(239,14,53)" fg:x="663638" fg:w="12705"/><text x="22.3670%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (484 samples, 0.02%)</title><rect x="22.5243%" y="165" width="0.0161%" height="15" fill="rgb(238,135,53)" fg:x="675859" fg:w="484"/><text x="22.7743%" y="175.50"></text></g><g><title>absim::graph_utils::SimulationGraph::neighbours (387 samples, 0.01%)</title><rect x="22.5429%" y="181" width="0.0129%" height="15" fill="rgb(239,17,27)" fg:x="676417" fg:w="387"/><text x="22.7929%" y="191.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (25,574 samples, 0.85%)</title><rect x="28.6703%" y="117" width="0.8523%" height="15" fill="rgb(217,162,49)" fg:x="860273" fg:w="25574"/><text x="28.9203%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (84,608 samples, 2.82%)</title><rect x="26.7030%" y="149" width="2.8197%" height="15" fill="rgb(225,210,44)" fg:x="801244" fg:w="84608"/><text x="26.9530%" y="159.50">&lt;b..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (53,635 samples, 1.79%)</title><rect x="27.7353%" y="133" width="1.7875%" height="15" fill="rgb(223,159,50)" fg:x="832217" fg:w="53635"/><text x="27.9853%" y="143.50">&lt;..</text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (89,400 samples, 2.98%)</title><rect x="26.5434%" y="165" width="2.9794%" height="15" fill="rgb(224,99,26)" fg:x="796454" fg:w="89400"/><text x="26.7934%" y="175.50">&lt;ab..</text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (823 samples, 0.03%)</title><rect x="29.5228%" y="165" width="0.0274%" height="15" fill="rgb(224,117,9)" fg:x="885854" fg:w="823"/><text x="29.7728%" y="175.50"></text></g><g><title>__rdl_dealloc (485 samples, 0.02%)</title><rect x="29.5529%" y="165" width="0.0162%" height="15" fill="rgb(243,40,11)" fg:x="886757" fg:w="485"/><text x="29.8029%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (25,657 samples, 0.86%)</title><rect x="30.3399%" y="149" width="0.8551%" height="15" fill="rgb(215,115,36)" fg:x="910371" fg:w="25657"/><text x="30.5899%" y="159.50"></text></g><g><title>__rdl_realloc (5,899 samples, 0.20%)</title><rect x="30.9984%" y="133" width="0.1966%" height="15" fill="rgb(231,9,36)" fg:x="930129" fg:w="5899"/><text x="31.2484%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (49,537 samples, 1.65%)</title><rect x="29.5691%" y="165" width="1.6509%" height="15" fill="rgb(250,44,24)" fg:x="887242" fg:w="49537"/><text x="29.8191%" y="175.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (751 samples, 0.03%)</title><rect x="31.1950%" y="149" width="0.0250%" height="15" fill="rgb(224,16,42)" fg:x="936028" fg:w="751"/><text x="31.4450%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (11,147 samples, 0.37%)</title><rect x="31.2200%" y="165" width="0.3715%" height="15" fill="rgb(206,188,30)" fg:x="936779" fg:w="11147"/><text x="31.4700%" y="175.50"></text></g><g><title>__rdl_dealloc (3,889 samples, 0.13%)</title><rect x="31.4619%" y="149" width="0.1296%" height="15" fill="rgb(206,18,6)" fg:x="944037" fg:w="3889"/><text x="31.7119%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (2,097 samples, 0.07%)</title><rect x="31.5915%" y="165" width="0.0699%" height="15" fill="rgb(224,145,33)" fg:x="947926" fg:w="2097"/><text x="31.8415%" y="175.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (279,762 samples, 9.32%)</title><rect x="22.5558%" y="181" width="9.3236%" height="15" fill="rgb(206,138,0)" fg:x="676804" fg:w="279762"/><text x="22.8058%" y="191.50">briolette_sim..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6,136 samples, 0.20%)</title><rect x="31.6749%" y="165" width="0.2045%" height="15" fill="rgb(237,48,20)" fg:x="950430" fg:w="6136"/><text x="31.9249%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,554 samples, 0.19%)</title><rect x="31.8794%" y="181" width="0.1851%" height="15" fill="rgb(210,110,16)" fg:x="956566" fg:w="5554"/><text x="32.1294%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,837 samples, 0.06%)</title><rect x="32.0033%" y="165" width="0.0612%" height="15" fill="rgb(240,184,4)" fg:x="960283" fg:w="1837"/><text x="32.2533%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (9,462 samples, 0.32%)</title><rect x="32.0654%" y="181" width="0.3153%" height="15" fill="rgb(248,157,34)" fg:x="962146" fg:w="9462"/><text x="32.3154%" y="191.50"></text></g><g><title>__rdl_dealloc (2,855 samples, 0.10%)</title><rect x="32.2856%" y="165" width="0.0951%" height="15" fill="rgb(246,163,45)" fg:x="968753" fg:w="2855"/><text x="32.5356%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (4,525 samples, 0.15%)</title><rect x="32.3807%" y="181" width="0.1508%" height="15" fill="rgb(216,68,35)" fg:x="971608" fg:w="4525"/><text x="32.6307%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,053 samples, 0.10%)</title><rect x="32.5315%" y="181" width="0.1017%" height="15" fill="rgb(231,98,29)" fg:x="976133" fg:w="3053"/><text x="32.7815%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,832 samples, 0.06%)</title><rect x="32.5722%" y="165" width="0.0611%" height="15" fill="rgb(216,25,39)" fg:x="977354" fg:w="1832"/><text x="32.8222%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (562 samples, 0.02%)</title><rect x="32.6146%" y="149" width="0.0187%" height="15" fill="rgb(210,14,23)" fg:x="978624" fg:w="562"/><text x="32.8646%" y="159.50"></text></g><g><title>rand::rng::Rng::gen_range (4,841 samples, 0.16%)</title><rect x="32.6333%" y="181" width="0.1613%" height="15" fill="rgb(226,85,30)" fg:x="979186" fg:w="4841"/><text x="32.8833%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1,609 samples, 0.05%)</title><rect x="32.7410%" y="165" width="0.0536%" height="15" fill="rgb(235,168,42)" fg:x="982418" fg:w="1609"/><text x="32.9910%" y="175.50"></text></g><g><title>rand::seq::IteratorRandom::choose (54,277 samples, 1.81%)</title><rect x="32.7946%" y="181" width="1.8089%" height="15" fill="rgb(212,99,39)" fg:x="984027" fg:w="54277"/><text x="33.0446%" y="191.50">r..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3,541 samples, 0.12%)</title><rect x="34.4855%" y="165" width="0.1180%" height="15" fill="rgb(225,43,2)" fg:x="1034763" fg:w="3541"/><text x="34.7355%" y="175.50"></text></g><g><title>__floor_sse41 (921 samples, 0.03%)</title><rect x="35.1164%" y="165" width="0.0307%" height="15" fill="rgb(242,113,52)" fg:x="1053693" fg:w="921"/><text x="35.3664%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (638,462 samples, 21.28%)</title><rect x="14.1904%" y="197" width="21.2780%" height="15" fill="rgb(254,194,25)" fg:x="425794" fg:w="638462"/><text x="14.4404%" y="207.50">&lt;briolette_sim::simulator::Simulat..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (25,952 samples, 0.86%)</title><rect x="34.6035%" y="181" width="0.8649%" height="15" fill="rgb(237,2,12)" fg:x="1038304" fg:w="25952"/><text x="34.8535%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (9,139 samples, 0.30%)</title><rect x="35.1638%" y="165" width="0.3046%" height="15" fill="rgb(233,133,5)" fg:x="1055117" fg:w="9139"/><text x="35.4138%" y="175.50"></text></g><g><title>rand_chacha::guts::init_chacha (883 samples, 0.03%)</title><rect x="35.9714%" y="181" width="0.0294%" height="15" fill="rgb(225,118,2)" fg:x="1079349" fg:w="883"/><text x="36.2214%" y="191.50"></text></g><g><title>rand_chacha::guts::init_chacha::impl_avx (649 samples, 0.02%)</title><rect x="35.9792%" y="165" width="0.0216%" height="15" fill="rgb(247,171,14)" fg:x="1079583" fg:w="649"/><text x="36.2292%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as core::clone::Clone&gt;::clone (17,665 samples, 0.59%)</title><rect x="35.4684%" y="197" width="0.5887%" height="15" fill="rgb(244,119,29)" fg:x="1064256" fg:w="17665"/><text x="35.7184%" y="207.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64::pcg32 (1,689 samples, 0.06%)</title><rect x="36.0008%" y="181" width="0.0563%" height="15" fill="rgb(205,66,50)" fg:x="1080232" fg:w="1689"/><text x="36.2508%" y="191.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1,847 samples, 0.06%)</title><rect x="36.0641%" y="197" width="0.0616%" height="15" fill="rgb(236,134,2)" fg:x="1082129" fg:w="1847"/><text x="36.3141%" y="207.50"></text></g><g><title>__rdl_dealloc (555 samples, 0.02%)</title><rect x="36.1071%" y="181" width="0.0185%" height="15" fill="rgb(249,156,0)" fg:x="1083421" fg:w="555"/><text x="36.3571%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::WorldView&lt;briolette_sim::simulator::Simulator&gt;&gt; (1,649 samples, 0.05%)</title><rect x="36.1262%" y="197" width="0.0550%" height="15" fill="rgb(215,13,5)" fg:x="1083994" fg:w="1649"/><text x="36.3762%" y="207.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (745,170 samples, 24.83%)</title><rect x="11.8698%" y="213" width="24.8342%" height="15" fill="rgb(223,189,16)" fg:x="356161" fg:w="745170"/><text x="12.1198%" y="223.50">&lt;absim::clients::LocalSimulationClient&lt;S..</text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (15,688 samples, 0.52%)</title><rect x="36.1812%" y="197" width="0.5228%" height="15" fill="rgb(224,78,43)" fg:x="1085643" fg:w="15688"/><text x="36.4312%" y="207.50"></text></g><g><title>__rdl_dealloc (7,046 samples, 0.23%)</title><rect x="36.4692%" y="181" width="0.2348%" height="15" fill="rgb(232,50,17)" fg:x="1094285" fg:w="7046"/><text x="36.7192%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35,481 samples, 1.18%)</title><rect x="50.7353%" y="197" width="1.1825%" height="15" fill="rgb(240,114,9)" fg:x="1522349" fg:w="35481"/><text x="50.9853%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (628 samples, 0.02%)</title><rect x="52.8196%" y="165" width="0.0209%" height="15" fill="rgb(246,226,25)" fg:x="1584892" fg:w="628"/><text x="53.0696%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,199 samples, 0.04%)</title><rect x="52.8013%" y="181" width="0.0400%" height="15" fill="rgb(241,141,54)" fg:x="1584342" fg:w="1199"/><text x="53.0513%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20,542 samples, 0.68%)</title><rect x="52.8413%" y="181" width="0.6846%" height="15" fill="rgb(252,112,9)" fg:x="1585541" fg:w="20542"/><text x="53.0913%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48,256 samples, 1.61%)</title><rect x="51.9177%" y="197" width="1.6082%" height="15" fill="rgb(236,92,40)" fg:x="1557830" fg:w="48256"/><text x="52.1677%" y="207.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (53,604 samples, 1.79%)</title><rect x="53.5260%" y="197" width="1.7865%" height="15" fill="rgb(244,113,14)" fg:x="1606086" fg:w="53604"/><text x="53.7760%" y="207.50">&lt;..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,508 samples, 0.05%)</title><rect x="55.2622%" y="181" width="0.0503%" height="15" fill="rgb(218,120,41)" fg:x="1658182" fg:w="1508"/><text x="55.5122%" y="191.50"></text></g><g><title>__rdl_dealloc (3,045 samples, 0.10%)</title><rect x="55.3160%" y="197" width="0.1015%" height="15" fill="rgb(219,213,24)" fg:x="1659797" fg:w="3045"/><text x="55.5660%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (10,466 samples, 0.35%)</title><rect x="55.7452%" y="181" width="0.3488%" height="15" fill="rgb(209,109,23)" fg:x="1672676" fg:w="10466"/><text x="55.9952%" y="191.50"></text></g><g><title>__rdl_realloc (2,355 samples, 0.08%)</title><rect x="56.0155%" y="165" width="0.0785%" height="15" fill="rgb(242,151,1)" fg:x="1680787" fg:w="2355"/><text x="56.2655%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20,705 samples, 0.69%)</title><rect x="55.4175%" y="197" width="0.6900%" height="15" fill="rgb(219,87,30)" fg:x="1662842" fg:w="20705"/><text x="55.6675%" y="207.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (405 samples, 0.01%)</title><rect x="56.0940%" y="181" width="0.0135%" height="15" fill="rgb(206,196,49)" fg:x="1683142" fg:w="405"/><text x="56.3440%" y="191.50"></text></g><g><title>briolette_sim::simulator::&lt;impl absim::Enqueue&lt;briolette_sim::simulator::Simulator&gt; for alloc::vec::Vec&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt;&gt;::enqueue (1,307 samples, 0.04%)</title><rect x="56.1137%" y="197" width="0.0436%" height="15" fill="rgb(246,202,43)" fg:x="1683733" fg:w="1307"/><text x="56.3637%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (640 samples, 0.02%)</title><rect x="56.1359%" y="181" width="0.0213%" height="15" fill="rgb(232,113,10)" fg:x="1684400" fg:w="640"/><text x="56.3859%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (7,891 samples, 0.26%)</title><rect x="56.1573%" y="197" width="0.2630%" height="15" fill="rgb(221,43,47)" fg:x="1685040" fg:w="7891"/><text x="56.4073%" y="207.50"></text></g><g><title>__rdl_dealloc (1,717 samples, 0.06%)</title><rect x="56.3630%" y="181" width="0.0572%" height="15" fill="rgb(250,96,35)" fg:x="1691214" fg:w="1717"/><text x="56.6130%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (9,935 samples, 0.33%)</title><rect x="56.4202%" y="197" width="0.3311%" height="15" fill="rgb(216,127,2)" fg:x="1692931" fg:w="9935"/><text x="56.6702%" y="207.50"></text></g><g><title>__rdl_dealloc (4,164 samples, 0.14%)</title><rect x="56.6126%" y="181" width="0.1388%" height="15" fill="rgb(214,147,45)" fg:x="1698702" fg:w="4164"/><text x="56.8626%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (660 samples, 0.02%)</title><rect x="56.7513%" y="197" width="0.0220%" height="15" fill="rgb(240,171,16)" fg:x="1702866" fg:w="660"/><text x="57.0013%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (13,825 samples, 0.46%)</title><rect x="56.7733%" y="197" width="0.4607%" height="15" fill="rgb(253,110,29)" fg:x="1703526" fg:w="13825"/><text x="57.0233%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2,499 samples, 0.08%)</title><rect x="57.2450%" y="197" width="0.0833%" height="15" fill="rgb(231,175,23)" fg:x="1717678" fg:w="2499"/><text x="57.4950%" y="207.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (618,781 samples, 20.62%)</title><rect x="36.7062%" y="213" width="20.6221%" height="15" fill="rgb(236,223,32)" fg:x="1101397" fg:w="618781"/><text x="36.9562%" y="223.50">&lt;briolette_sim::simulator::Simul..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (63,936 samples, 2.13%)</title><rect x="57.3450%" y="197" width="2.1308%" height="15" fill="rgb(252,158,5)" fg:x="1720679" fg:w="63936"/><text x="57.5950%" y="207.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (62,805 samples, 2.09%)</title><rect x="57.3827%" y="181" width="2.0931%" height="15" fill="rgb(235,22,50)" fg:x="1721810" fg:w="62805"/><text x="57.6327%" y="191.50">&lt;..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (28,231 samples, 0.94%)</title><rect x="58.5349%" y="165" width="0.9409%" height="15" fill="rgb(227,24,46)" fg:x="1756384" fg:w="28231"/><text x="58.7849%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (918 samples, 0.03%)</title><rect x="59.4758%" y="197" width="0.0306%" height="15" fill="rgb(253,120,27)" fg:x="1784615" fg:w="918"/><text x="59.7258%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,230 samples, 0.07%)</title><rect x="59.5064%" y="197" width="0.0743%" height="15" fill="rgb(212,53,48)" fg:x="1785533" fg:w="2230"/><text x="59.7564%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,357 samples, 0.05%)</title><rect x="59.5355%" y="181" width="0.0452%" height="15" fill="rgb(243,32,4)" fg:x="1786406" fg:w="1357"/><text x="59.7855%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (67,931 samples, 2.26%)</title><rect x="57.3283%" y="213" width="2.2639%" height="15" fill="rgb(218,148,44)" fg:x="1720178" fg:w="67931"/><text x="57.5783%" y="223.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (346 samples, 0.01%)</title><rect x="59.5807%" y="197" width="0.0115%" height="15" fill="rgb(236,212,42)" fg:x="1787763" fg:w="346"/><text x="59.8307%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9,498 samples, 0.32%)</title><rect x="65.4251%" y="197" width="0.3165%" height="15" fill="rgb(254,198,51)" fg:x="1963129" fg:w="9498"/><text x="65.6751%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::at_location_mut (791 samples, 0.03%)</title><rect x="65.7478%" y="197" width="0.0264%" height="15" fill="rgb(240,181,27)" fg:x="1972811" fg:w="791"/><text x="65.9978%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::reset (1,217 samples, 0.04%)</title><rect x="65.7741%" y="197" width="0.0406%" height="15" fill="rgb(227,133,53)" fg:x="1973602" fg:w="1217"/><text x="66.0241%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,285 samples, 0.08%)</title><rect x="65.8999%" y="181" width="0.0762%" height="15" fill="rgb(232,184,42)" fg:x="1977374" fg:w="2285"/><text x="66.1499%" y="191.50"></text></g><g><title>__rdl_realloc (394 samples, 0.01%)</title><rect x="65.9629%" y="165" width="0.0131%" height="15" fill="rgb(242,118,14)" fg:x="1979265" fg:w="394"/><text x="66.2129%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,905 samples, 0.16%)</title><rect x="65.8147%" y="197" width="0.1635%" height="15" fill="rgb(211,190,54)" fg:x="1974819" fg:w="4905"/><text x="66.0647%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16,242 samples, 0.54%)</title><rect x="65.9782%" y="197" width="0.5413%" height="15" fill="rgb(231,137,9)" fg:x="1979724" fg:w="16242"/><text x="66.2282%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5,031 samples, 0.17%)</title><rect x="66.3518%" y="181" width="0.1677%" height="15" fill="rgb(220,206,50)" fg:x="1990935" fg:w="5031"/><text x="66.6018%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (218,243 samples, 7.27%)</title><rect x="59.5922%" y="213" width="7.2734%" height="15" fill="rgb(253,26,32)" fg:x="1788109" fg:w="218243"/><text x="59.8422%" y="223.50">&lt;briolette..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10,351 samples, 0.34%)</title><rect x="66.5206%" y="197" width="0.3450%" height="15" fill="rgb(223,170,15)" fg:x="1996001" fg:w="10351"/><text x="66.7706%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,985 samples, 0.20%)</title><rect x="66.6661%" y="181" width="0.1995%" height="15" fill="rgb(227,142,13)" fg:x="2000367" fg:w="5985"/><text x="66.9161%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,569 samples, 0.05%)</title><rect x="66.8133%" y="165" width="0.0523%" height="15" fill="rgb(235,58,26)" fg:x="2004783" fg:w="1569"/><text x="67.0633%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (51,723 samples, 1.72%)</title><rect x="68.8263%" y="197" width="1.7238%" height="15" fill="rgb(230,105,43)" fg:x="2065183" fg:w="51723"/><text x="69.0763%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12,829 samples, 0.43%)</title><rect x="70.9956%" y="181" width="0.4276%" height="15" fill="rgb(243,160,4)" fg:x="2130277" fg:w="12829"/><text x="71.2456%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,762 samples, 0.13%)</title><rect x="71.2978%" y="165" width="0.1254%" height="15" fill="rgb(207,223,45)" fg:x="2139344" fg:w="3762"/><text x="71.5478%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (163,131 samples, 5.44%)</title><rect x="66.8656%" y="213" width="5.4367%" height="15" fill="rgb(205,112,23)" fg:x="2006352" fg:w="163131"/><text x="67.1156%" y="223.50">&lt;briole..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (52,500 samples, 1.75%)</title><rect x="70.5526%" y="197" width="1.7497%" height="15" fill="rgb(249,138,44)" fg:x="2116983" fg:w="52500"/><text x="70.8026%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (26,377 samples, 0.88%)</title><rect x="71.4232%" y="181" width="0.8791%" height="15" fill="rgb(228,32,40)" fg:x="2143106" fg:w="26377"/><text x="71.6732%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10,789 samples, 0.36%)</title><rect x="71.9427%" y="165" width="0.3596%" height="15" fill="rgb(232,63,13)" fg:x="2158694" fg:w="10789"/><text x="72.1927%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,046 samples, 0.10%)</title><rect x="72.2008%" y="149" width="0.1015%" height="15" fill="rgb(247,181,24)" fg:x="2166437" fg:w="3046"/><text x="72.4508%" y="159.50"></text></g><g><title>__rdl_dealloc (5,560 samples, 0.19%)</title><rect x="72.3023%" y="213" width="0.1853%" height="15" fill="rgb(214,51,20)" fg:x="2169483" fg:w="5560"/><text x="72.5523%" y="223.50"></text></g><g><title>__rdl_dealloc (344 samples, 0.01%)</title><rect x="72.5705%" y="197" width="0.0115%" height="15" fill="rgb(215,102,3)" fg:x="2177533" fg:w="344"/><text x="72.8205%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (7,772 samples, 0.26%)</title><rect x="72.5820%" y="197" width="0.2590%" height="15" fill="rgb(209,9,35)" fg:x="2177877" fg:w="7772"/><text x="72.8320%" y="207.50"></text></g><g><title>__rdl_dealloc (3,094 samples, 0.10%)</title><rect x="72.7379%" y="181" width="0.1031%" height="15" fill="rgb(223,209,9)" fg:x="2182555" fg:w="3094"/><text x="72.9879%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (37,413 samples, 1.25%)</title><rect x="72.8410%" y="197" width="1.2469%" height="15" fill="rgb(240,131,9)" fg:x="2185649" fg:w="37413"/><text x="73.0910%" y="207.50"></text></g><g><title>__rdl_dealloc (4,386 samples, 0.15%)</title><rect x="73.9417%" y="181" width="0.1462%" height="15" fill="rgb(224,168,50)" fg:x="2218676" fg:w="4386"/><text x="74.1917%" y="191.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (61,262 samples, 2.04%)</title><rect x="72.4876%" y="213" width="2.0417%" height="15" fill="rgb(232,212,39)" fg:x="2175043" fg:w="61262"/><text x="72.7376%" y="223.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (13,243 samples, 0.44%)</title><rect x="74.0879%" y="197" width="0.4413%" height="15" fill="rgb(241,131,37)" fg:x="2223062" fg:w="13243"/><text x="74.3379%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (327 samples, 0.01%)</title><rect x="74.5462%" y="165" width="0.0109%" height="15" fill="rgb(230,153,35)" fg:x="2236813" fg:w="327"/><text x="74.7962%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (754 samples, 0.03%)</title><rect x="74.5658%" y="149" width="0.0251%" height="15" fill="rgb(232,110,12)" fg:x="2237402" fg:w="754"/><text x="74.8158%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (487 samples, 0.02%)</title><rect x="74.5747%" y="133" width="0.0162%" height="15" fill="rgb(246,24,46)" fg:x="2237669" fg:w="487"/><text x="74.8247%" y="143.50"></text></g><g><title>std::io::Write::write_all (311 samples, 0.01%)</title><rect x="74.5806%" y="117" width="0.0104%" height="15" fill="rgb(242,63,52)" fg:x="2237845" fg:w="311"/><text x="74.8306%" y="127.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (1,392 samples, 0.05%)</title><rect x="74.5585%" y="165" width="0.0464%" height="15" fill="rgb(224,52,44)" fg:x="2237183" fg:w="1392"/><text x="74.8085%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (377 samples, 0.01%)</title><rect x="74.5923%" y="149" width="0.0126%" height="15" fill="rgb(216,88,53)" fg:x="2238198" fg:w="377"/><text x="74.8423%" y="159.50"></text></g><g><title>std::io::Write::write_fmt (2,272 samples, 0.08%)</title><rect x="74.5344%" y="197" width="0.0757%" height="15" fill="rgb(217,66,31)" fg:x="2236459" fg:w="2272"/><text x="74.7844%" y="207.50"></text></g><g><title>core::fmt::write (2,178 samples, 0.07%)</title><rect x="74.5375%" y="181" width="0.0726%" height="15" fill="rgb(249,183,11)" fg:x="2236553" fg:w="2178"/><text x="74.7875%" y="191.50"></text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (2,472 samples, 0.08%)</title><rect x="74.5294%" y="213" width="0.0824%" height="15" fill="rgb(243,92,7)" fg:x="2236309" fg:w="2472"/><text x="74.7794%" y="223.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (2,037,621 samples, 67.91%)</title><rect x="6.7076%" y="229" width="67.9077%" height="15" fill="rgb(211,129,49)" fg:x="201266" fg:w="2037621"/><text x="6.9576%" y="239.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,030 samples, 0.23%)</title><rect x="74.6153%" y="229" width="0.2343%" height="15" fill="rgb(240,15,9)" fg:x="2238887" fg:w="7030"/><text x="74.8653%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (658,395 samples, 21.94%)</title><rect x="74.8519%" y="213" width="21.9423%" height="15" fill="rgb(219,156,25)" fg:x="2245988" fg:w="658395"/><text x="75.1019%" y="223.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (268,684 samples, 8.95%)</title><rect x="87.8398%" y="197" width="8.9544%" height="15" fill="rgb(208,198,23)" fg:x="2635699" fg:w="268684"/><text x="88.0898%" y="207.50">hashbrown::ma..</text></g><g><title>core::hash::BuildHasher::hash_one (34,248 samples, 1.14%)</title><rect x="95.6529%" y="181" width="1.1414%" height="15" fill="rgb(215,12,25)" fg:x="2870135" fg:w="34248"/><text x="95.9029%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,597 samples, 0.25%)</title><rect x="96.5411%" y="165" width="0.2532%" height="15" fill="rgb(234,205,13)" fg:x="2896786" fg:w="7597"/><text x="96.7911%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (658,433 samples, 21.94%)</title><rect x="74.8515%" y="229" width="21.9436%" height="15" fill="rgb(240,5,50)" fg:x="2245974" fg:w="658433"/><text x="75.1015%" y="239.50">&lt;std::collections::hash::map::HashM..</text></g><g><title>__rdl_alloc (3,087 samples, 0.10%)</title><rect x="96.7950%" y="229" width="0.1029%" height="15" fill="rgb(254,14,52)" fg:x="2904407" fg:w="3087"/><text x="97.0450%" y="239.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (491 samples, 0.02%)</title><rect x="96.9074%" y="197" width="0.0164%" height="15" fill="rgb(226,141,28)" fg:x="2907778" fg:w="491"/><text x="97.1574%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (851 samples, 0.03%)</title><rect x="96.9011%" y="213" width="0.0284%" height="15" fill="rgb(228,221,21)" fg:x="2907590" fg:w="851"/><text x="97.1511%" y="223.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (523 samples, 0.02%)</title><rect x="96.9295%" y="213" width="0.0174%" height="15" fill="rgb(247,75,12)" fg:x="2908441" fg:w="523"/><text x="97.1795%" y="223.50"></text></g><g><title>std::io::append_to_string (487 samples, 0.02%)</title><rect x="96.9307%" y="197" width="0.0162%" height="15" fill="rgb(228,41,6)" fg:x="2908477" fg:w="487"/><text x="97.1807%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::new (1,568 samples, 0.05%)</title><rect x="96.8986%" y="229" width="0.0523%" height="15" fill="rgb(235,219,6)" fg:x="2907513" fg:w="1568"/><text x="97.1486%" y="239.50"></text></g><g><title>__rdl_dealloc (3,081 samples, 0.10%)</title><rect x="97.2528%" y="197" width="0.1027%" height="15" fill="rgb(247,183,27)" fg:x="2918142" fg:w="3081"/><text x="97.5028%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (11,612 samples, 0.39%)</title><rect x="96.9751%" y="213" width="0.3870%" height="15" fill="rgb(219,0,32)" fg:x="2909809" fg:w="11612"/><text x="97.2251%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (70,370 samples, 2.35%)</title><rect x="97.3629%" y="197" width="2.3452%" height="15" fill="rgb(237,168,4)" fg:x="2921446" fg:w="70370"/><text x="97.6129%" y="207.50">&lt;..</text></g><g><title>__rdl_dealloc (1,457 samples, 0.05%)</title><rect x="99.6596%" y="181" width="0.0486%" height="15" fill="rgb(238,115,20)" fg:x="2990359" fg:w="1457"/><text x="99.9096%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (82,232 samples, 2.74%)</title><rect x="96.9683%" y="229" width="2.7405%" height="15" fill="rgb(249,218,40)" fg:x="2909605" fg:w="82232"/><text x="97.2183%" y="239.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (70,412 samples, 2.35%)</title><rect x="97.3622%" y="213" width="2.3466%" height="15" fill="rgb(215,202,51)" fg:x="2921425" fg:w="70412"/><text x="97.6122%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (4,916 samples, 0.16%)</title><rect x="99.7088%" y="229" width="0.1638%" height="15" fill="rgb(215,116,23)" fg:x="2991837" fg:w="4916"/><text x="99.9588%" y="239.50"></text></g><g><title>__rdl_dealloc (1,443 samples, 0.05%)</title><rect x="99.8246%" y="213" width="0.0481%" height="15" fill="rgb(209,132,44)" fg:x="2995310" fg:w="1443"/><text x="100.0746%" y="223.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (542 samples, 0.02%)</title><rect x="99.8971%" y="101" width="0.0181%" height="15" fill="rgb(242,17,1)" fg:x="2997486" fg:w="542"/><text x="100.1471%" y="111.50"></text></g><g><title>rustc_demangle::try_demangle (524 samples, 0.02%)</title><rect x="99.8977%" y="85" width="0.0175%" height="15" fill="rgb(229,88,20)" fg:x="2997504" fg:w="524"/><text x="100.1477%" y="95.50"></text></g><g><title>rustc_demangle::demangle (488 samples, 0.02%)</title><rect x="99.8989%" y="69" width="0.0163%" height="15" fill="rgb(248,37,28)" fg:x="2997540" fg:w="488"/><text x="100.1489%" y="79.50"></text></g><g><title>alloc::fmt::format::format_inner (786 samples, 0.03%)</title><rect x="99.9151%" y="101" width="0.0262%" height="15" fill="rgb(212,88,0)" fg:x="2998028" fg:w="786"/><text x="100.1651%" y="111.50"></text></g><g><title>core::fmt::write (780 samples, 0.03%)</title><rect x="99.9153%" y="85" width="0.0260%" height="15" fill="rgb(235,151,26)" fg:x="2998034" fg:w="780"/><text x="100.1653%" y="95.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (760 samples, 0.03%)</title><rect x="99.9160%" y="69" width="0.0253%" height="15" fill="rgb(209,27,2)" fg:x="2998054" fg:w="760"/><text x="100.1660%" y="79.50"></text></g><g><title>core::fmt::write (740 samples, 0.02%)</title><rect x="99.9167%" y="53" width="0.0247%" height="15" fill="rgb(244,20,36)" fg:x="2998074" fg:w="740"/><text x="100.1667%" y="63.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (695 samples, 0.02%)</title><rect x="99.9182%" y="37" width="0.0232%" height="15" fill="rgb(205,185,8)" fg:x="2998119" fg:w="695"/><text x="100.1682%" y="47.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (2,230 samples, 0.07%)</title><rect x="99.8814%" y="165" width="0.0743%" height="15" fill="rgb(212,214,45)" fg:x="2997015" fg:w="2230"/><text x="100.1314%" y="175.50"></text></g><g><title>pprof::frames::Symbol::name (2,158 samples, 0.07%)</title><rect x="99.8838%" y="149" width="0.0719%" height="15" fill="rgb(210,127,23)" fg:x="2997087" fg:w="2158"/><text x="100.1338%" y="159.50"></text></g><g><title>symbolic_demangle::demangle (1,817 samples, 0.06%)</title><rect x="99.8952%" y="133" width="0.0606%" height="15" fill="rgb(246,138,34)" fg:x="2997428" fg:w="1817"/><text x="100.1452%" y="143.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (1,795 samples, 0.06%)</title><rect x="99.8959%" y="117" width="0.0598%" height="15" fill="rgb(243,201,47)" fg:x="2997450" fg:w="1795"/><text x="100.1459%" y="127.50"></text></g><g><title>rustc_demangle::try_demangle (431 samples, 0.01%)</title><rect x="99.9413%" y="101" width="0.0144%" height="15" fill="rgb(207,27,45)" fg:x="2998814" fg:w="431"/><text x="100.1913%" y="111.50"></text></g><g><title>rustc_demangle::demangle (395 samples, 0.01%)</title><rect x="99.9425%" y="85" width="0.0132%" height="15" fill="rgb(227,223,6)" fg:x="2998850" fg:w="395"/><text x="100.1925%" y="95.50"></text></g><g><title>core::fmt::write (2,290 samples, 0.08%)</title><rect x="99.8798%" y="181" width="0.0763%" height="15" fill="rgb(248,69,0)" fg:x="2996968" fg:w="2290"/><text x="100.1298%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,337 samples, 0.08%)</title><rect x="99.8784%" y="213" width="0.0779%" height="15" fill="rgb(227,62,30)" fg:x="2996924" fg:w="2337"/><text x="100.1284%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,335 samples, 0.08%)</title><rect x="99.8784%" y="197" width="0.0778%" height="15" fill="rgb(252,89,36)" fg:x="2996926" fg:w="2335"/><text x="100.1284%" y="207.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (3,027 samples, 0.10%)</title><rect x="99.8784%" y="229" width="0.1009%" height="15" fill="rgb(218,198,25)" fg:x="2996924" fg:w="3027"/><text x="100.1284%" y="239.50"></text></g><g><title>inferno::flamegraph::from_lines (689 samples, 0.02%)</title><rect x="99.9563%" y="213" width="0.0230%" height="15" fill="rgb(237,136,49)" fg:x="2999262" fg:w="689"/><text x="100.2063%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (530 samples, 0.02%)</title><rect x="99.9821%" y="229" width="0.0177%" height="15" fill="rgb(237,105,53)" fg:x="3000036" fg:w="530"/><text x="100.2321%" y="239.50"></text></g><g><title>all (3,000,574 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(219,3,19)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="399.50"></text></g><g><title>briolette-sim (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(241,173,16)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="383.50">briolette-sim</text></g><g><title>_start (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,184,5)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="367.50">_start</text></g><g><title>__libc_start_main_impl (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(226,87,38)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="351.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(215,152,14)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="335.50">__libc_start_call_main</text></g><g><title>main (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(240,136,38)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,110,33)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,123,37)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="287.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(208,201,19)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (3,000,574 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(214,2,38)" fg:x="0" fg:w="3000574"/><text x="0.2500%" y="255.50">briolette_sim::main</text></g></svg></svg>