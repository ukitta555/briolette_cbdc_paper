<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="7954976"><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (91,328 samples, 1.15%)</title><rect x="3.0781%" y="213" width="1.1481%" height="15" fill="rgb(219,174,51)" fg:x="244865" fg:w="91328"/><text x="3.3281%" y="223.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (91,150 samples, 1.15%)</title><rect x="3.0804%" y="197" width="1.1458%" height="15" fill="rgb(208,174,30)" fg:x="245043" fg:w="91150"/><text x="3.3304%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (90,165 samples, 1.13%)</title><rect x="3.0928%" y="181" width="1.1334%" height="15" fill="rgb(245,14,34)" fg:x="246028" fg:w="90165"/><text x="3.3428%" y="191.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (41,994 samples, 0.53%)</title><rect x="3.6983%" y="165" width="0.5279%" height="15" fill="rgb(217,177,44)" fg:x="294199" fg:w="41994"/><text x="3.9483%" y="175.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (91,560 samples, 1.15%)</title><rect x="3.0757%" y="229" width="1.1510%" height="15" fill="rgb(219,17,2)" fg:x="244673" fg:w="91560"/><text x="3.3257%" y="239.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (894 samples, 0.01%)</title><rect x="4.2359%" y="213" width="0.0112%" height="15" fill="rgb(251,52,36)" fg:x="336968" fg:w="894"/><text x="4.4859%" y="223.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::enqueue_delayed (2,462 samples, 0.03%)</title><rect x="4.2267%" y="229" width="0.0309%" height="15" fill="rgb(220,25,12)" fg:x="336233" fg:w="2462"/><text x="4.4767%" y="239.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::collect (3,268 samples, 0.04%)</title><rect x="10.4174%" y="213" width="0.0411%" height="15" fill="rgb(212,73,30)" fg:x="828699" fg:w="3268"/><text x="10.6674%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (245,654 samples, 3.09%)</title><rect x="11.3135%" y="197" width="3.0881%" height="15" fill="rgb(243,65,36)" fg:x="899989" fg:w="245654"/><text x="11.5635%" y="207.50">&lt;al..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (62,883 samples, 0.79%)</title><rect x="19.2249%" y="133" width="0.7905%" height="15" fill="rgb(241,185,29)" fg:x="1529337" fg:w="62883"/><text x="19.4749%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (145,988 samples, 1.84%)</title><rect x="18.1804%" y="149" width="1.8352%" height="15" fill="rgb(243,11,4)" fg:x="1446248" fg:w="145988"/><text x="18.4304%" y="159.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (211,405 samples, 2.66%)</title><rect x="17.3581%" y="165" width="2.6575%" height="15" fill="rgb(220,6,4)" fg:x="1380833" fg:w="211405"/><text x="17.6081%" y="175.50">&lt;b..</text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (245,256 samples, 3.08%)</title><rect x="16.9353%" y="181" width="3.0831%" height="15" fill="rgb(227,52,9)" fg:x="1347198" fg:w="245256"/><text x="17.1853%" y="191.50">&lt;ab..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (41,424 samples, 0.52%)</title><rect x="21.0368%" y="149" width="0.5207%" height="15" fill="rgb(218,11,51)" fg:x="1673470" fg:w="41424"/><text x="21.2868%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (93,337 samples, 1.17%)</title><rect x="20.3844%" y="165" width="1.1733%" height="15" fill="rgb(236,147,21)" fg:x="1621575" fg:w="93337"/><text x="20.6344%" y="175.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (122,462 samples, 1.54%)</title><rect x="20.0183%" y="181" width="1.5394%" height="15" fill="rgb(206,56,15)" fg:x="1592454" fg:w="122462"/><text x="20.2683%" y="191.50"></text></g><g><title>rand::rngs::thread::thread_rng (1,611 samples, 0.02%)</title><rect x="22.4882%" y="165" width="0.0203%" height="15" fill="rgb(232,85,16)" fg:x="1788929" fg:w="1611"/><text x="22.7382%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide (1,258 samples, 0.02%)</title><rect x="22.5084%" y="165" width="0.0158%" height="15" fill="rgb(219,95,15)" fg:x="1790540" fg:w="1258"/><text x="22.7584%" y="175.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (140,279 samples, 1.76%)</title><rect x="21.5578%" y="181" width="1.7634%" height="15" fill="rgb(235,165,45)" fg:x="1714916" fg:w="140279"/><text x="21.8078%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (63,397 samples, 0.80%)</title><rect x="22.5242%" y="165" width="0.7969%" height="15" fill="rgb(211,148,5)" fg:x="1791798" fg:w="63397"/><text x="22.7742%" y="175.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (45,729 samples, 0.57%)</title><rect x="23.3212%" y="181" width="0.5748%" height="15" fill="rgb(212,74,38)" fg:x="1855195" fg:w="45729"/><text x="23.5712%" y="191.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,560 samples, 0.02%)</title><rect x="23.8764%" y="165" width="0.0196%" height="15" fill="rgb(248,174,2)" fg:x="1899364" fg:w="1560"/><text x="24.1264%" y="175.50"></text></g><g><title>absim::graph_utils::SimulationGraph::neighbours (1,279 samples, 0.02%)</title><rect x="23.9003%" y="181" width="0.0161%" height="15" fill="rgb(218,152,32)" fg:x="1901262" fg:w="1279"/><text x="24.1503%" y="191.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (57,480 samples, 0.72%)</title><rect x="32.5985%" y="117" width="0.7226%" height="15" fill="rgb(238,137,41)" fg:x="2593201" fg:w="57480"/><text x="32.8485%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (248,068 samples, 3.12%)</title><rect x="30.2028%" y="149" width="3.1184%" height="15" fill="rgb(251,146,27)" fg:x="2402624" fg:w="248068"/><text x="30.4528%" y="159.50">&lt;br..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (144,406 samples, 1.82%)</title><rect x="31.5059%" y="133" width="1.8153%" height="15" fill="rgb(207,62,29)" fg:x="2506286" fg:w="144406"/><text x="31.7559%" y="143.50">&lt;..</text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (263,416 samples, 3.31%)</title><rect x="30.0099%" y="165" width="3.3113%" height="15" fill="rgb(252,221,14)" fg:x="2387278" fg:w="263416"/><text x="30.2599%" y="175.50">&lt;ab..</text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (3,291 samples, 0.04%)</title><rect x="33.3212%" y="165" width="0.0414%" height="15" fill="rgb(224,56,7)" fg:x="2650694" fg:w="3291"/><text x="33.5712%" y="175.50"></text></g><g><title>__rdl_dealloc (1,595 samples, 0.02%)</title><rect x="33.3668%" y="165" width="0.0201%" height="15" fill="rgb(206,114,44)" fg:x="2654323" fg:w="1595"/><text x="33.6168%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (75,902 samples, 0.95%)</title><rect x="34.2590%" y="149" width="0.9541%" height="15" fill="rgb(227,126,48)" fg:x="2725296" fg:w="75902"/><text x="34.5090%" y="159.50"></text></g><g><title>__rdl_realloc (18,042 samples, 0.23%)</title><rect x="34.9864%" y="133" width="0.2268%" height="15" fill="rgb(238,12,49)" fg:x="2783156" fg:w="18042"/><text x="35.2364%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (147,312 samples, 1.85%)</title><rect x="33.3869%" y="165" width="1.8518%" height="15" fill="rgb(230,228,18)" fg:x="2655918" fg:w="147312"/><text x="33.6369%" y="175.50">a..</text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (2,032 samples, 0.03%)</title><rect x="35.2132%" y="149" width="0.0255%" height="15" fill="rgb(215,128,0)" fg:x="2801198" fg:w="2032"/><text x="35.4632%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (34,430 samples, 0.43%)</title><rect x="35.2387%" y="165" width="0.4328%" height="15" fill="rgb(254,199,18)" fg:x="2803230" fg:w="34430"/><text x="35.4887%" y="175.50"></text></g><g><title>__rdl_dealloc (12,580 samples, 0.16%)</title><rect x="35.5134%" y="149" width="0.1581%" height="15" fill="rgb(239,77,38)" fg:x="2825080" fg:w="12580"/><text x="35.7634%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (6,985 samples, 0.09%)</title><rect x="35.6715%" y="165" width="0.0878%" height="15" fill="rgb(242,223,43)" fg:x="2837660" fg:w="6985"/><text x="35.9215%" y="175.50"></text></g><g><title>rand::rngs::thread::thread_rng (801 samples, 0.01%)</title><rect x="35.7593%" y="165" width="0.0101%" height="15" fill="rgb(238,173,1)" fg:x="2844645" fg:w="801"/><text x="36.0093%" y="175.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (961,859 samples, 12.09%)</title><rect x="23.9164%" y="181" width="12.0913%" height="15" fill="rgb(249,171,45)" fg:x="1902541" fg:w="961859"/><text x="24.1664%" y="191.50">briolette_sim::sim..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (18,531 samples, 0.23%)</title><rect x="35.7747%" y="165" width="0.2329%" height="15" fill="rgb(230,182,7)" fg:x="2845869" fg:w="18531"/><text x="36.0247%" y="175.50"></text></g><g><title>core::hash::BuildHasher::hash_one (17,825 samples, 0.22%)</title><rect x="36.0077%" y="181" width="0.2241%" height="15" fill="rgb(221,183,46)" fg:x="2864400" fg:w="17825"/><text x="36.2577%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7,135 samples, 0.09%)</title><rect x="36.1420%" y="165" width="0.0897%" height="15" fill="rgb(208,88,52)" fg:x="2875090" fg:w="7135"/><text x="36.3920%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (26,348 samples, 0.33%)</title><rect x="36.2336%" y="181" width="0.3312%" height="15" fill="rgb(225,18,39)" fg:x="2882376" fg:w="26348"/><text x="36.4836%" y="191.50"></text></g><g><title>__rdl_dealloc (7,670 samples, 0.10%)</title><rect x="36.4684%" y="165" width="0.0964%" height="15" fill="rgb(210,18,0)" fg:x="2901054" fg:w="7670"/><text x="36.7184%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (13,911 samples, 0.17%)</title><rect x="36.5648%" y="181" width="0.1749%" height="15" fill="rgb(222,226,7)" fg:x="2908724" fg:w="13911"/><text x="36.8148%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13,789 samples, 0.17%)</title><rect x="36.7397%" y="181" width="0.1733%" height="15" fill="rgb(251,151,2)" fg:x="2922635" fg:w="13789"/><text x="36.9897%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8,269 samples, 0.10%)</title><rect x="36.8091%" y="165" width="0.1039%" height="15" fill="rgb(213,205,8)" fg:x="2928155" fg:w="8269"/><text x="37.0591%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,077 samples, 0.04%)</title><rect x="36.8744%" y="149" width="0.0387%" height="15" fill="rgb(227,30,53)" fg:x="2933347" fg:w="3077"/><text x="37.1244%" y="159.50"></text></g><g><title>rand::rng::Rng::gen_range (15,090 samples, 0.19%)</title><rect x="36.9130%" y="181" width="0.1897%" height="15" fill="rgb(235,104,43)" fg:x="2936424" fg:w="15090"/><text x="37.1630%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4,606 samples, 0.06%)</title><rect x="37.0448%" y="165" width="0.0579%" height="15" fill="rgb(216,10,13)" fg:x="2946908" fg:w="4606"/><text x="37.2948%" y="175.50"></text></g><g><title>rand::seq::IteratorRandom::choose (164,186 samples, 2.06%)</title><rect x="37.1027%" y="181" width="2.0639%" height="15" fill="rgb(232,141,9)" fg:x="2951514" fg:w="164186"/><text x="37.3527%" y="191.50">r..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (10,176 samples, 0.13%)</title><rect x="39.0388%" y="165" width="0.1279%" height="15" fill="rgb(228,179,28)" fg:x="3105524" fg:w="10176"/><text x="39.2888%" y="175.50"></text></g><g><title>__floor_sse41 (1,870 samples, 0.02%)</title><rect x="39.7440%" y="165" width="0.0235%" height="15" fill="rgb(246,220,54)" fg:x="3161624" fg:w="1870"/><text x="39.9940%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide (1,241 samples, 0.02%)</title><rect x="39.7757%" y="165" width="0.0156%" height="15" fill="rgb(250,33,20)" fg:x="3164145" fg:w="1241"/><text x="40.0257%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (2,057,057 samples, 25.86%)</title><rect x="14.4016%" y="197" width="25.8587%" height="15" fill="rgb(248,96,10)" fg:x="1145643" fg:w="2057057"/><text x="14.6516%" y="207.50">&lt;briolette_sim::simulator::Simulator as a..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (87,000 samples, 1.09%)</title><rect x="39.1667%" y="181" width="1.0937%" height="15" fill="rgb(246,151,47)" fg:x="3115700" fg:w="87000"/><text x="39.4167%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (37,314 samples, 0.47%)</title><rect x="39.7913%" y="165" width="0.4691%" height="15" fill="rgb(251,191,5)" fg:x="3165386" fg:w="37314"/><text x="40.0413%" y="175.50"></text></g><g><title>rand_chacha::guts::init_chacha (4,096 samples, 0.05%)</title><rect x="41.1396%" y="181" width="0.0515%" height="15" fill="rgb(233,179,33)" fg:x="3272646" fg:w="4096"/><text x="41.3896%" y="191.50"></text></g><g><title>rand_chacha::guts::init_chacha::impl_avx (3,223 samples, 0.04%)</title><rect x="41.1506%" y="165" width="0.0405%" height="15" fill="rgb(244,212,4)" fg:x="3273519" fg:w="3223"/><text x="41.4006%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as core::clone::Clone&gt;::clone (81,412 samples, 1.02%)</title><rect x="40.2603%" y="197" width="1.0234%" height="15" fill="rgb(234,199,1)" fg:x="3202700" fg:w="81412"/><text x="40.5103%" y="207.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64::pcg32 (7,370 samples, 0.09%)</title><rect x="41.1911%" y="181" width="0.0926%" height="15" fill="rgb(234,23,42)" fg:x="3276742" fg:w="7370"/><text x="41.4411%" y="191.50"></text></g><g><title>__rdl_dealloc (845 samples, 0.01%)</title><rect x="41.2839%" y="197" width="0.0106%" height="15" fill="rgb(211,140,19)" fg:x="3284121" fg:w="845"/><text x="41.5339%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10,241 samples, 0.13%)</title><rect x="41.2957%" y="197" width="0.1287%" height="15" fill="rgb(244,118,9)" fg:x="3285067" fg:w="10241"/><text x="41.5457%" y="207.50"></text></g><g><title>__rdl_dealloc (3,058 samples, 0.04%)</title><rect x="41.3860%" y="181" width="0.0384%" height="15" fill="rgb(240,206,42)" fg:x="3292250" fg:w="3058"/><text x="41.6360%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::WorldView&lt;briolette_sim::simulator::Simulator&gt;&gt; (13,558 samples, 0.17%)</title><rect x="41.4260%" y="197" width="0.1704%" height="15" fill="rgb(208,93,29)" fg:x="3295426" fg:w="13558"/><text x="41.6760%" y="207.50"></text></g><g><title>__rdl_dealloc (2,044 samples, 0.03%)</title><rect x="41.5707%" y="181" width="0.0257%" height="15" fill="rgb(224,155,32)" fg:x="3306940" fg:w="2044"/><text x="41.8207%" y="191.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (2,549,927 samples, 32.05%)</title><rect x="10.4584%" y="213" width="32.0545%" height="15" fill="rgb(218,178,8)" fg:x="831967" fg:w="2549927"/><text x="10.7084%" y="223.50">&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::..</text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (72,910 samples, 0.92%)</title><rect x="41.5964%" y="197" width="0.9165%" height="15" fill="rgb(210,165,12)" fg:x="3308984" fg:w="72910"/><text x="41.8464%" y="207.50"></text></g><g><title>__rdl_dealloc (33,342 samples, 0.42%)</title><rect x="42.0938%" y="181" width="0.4191%" height="15" fill="rgb(214,186,50)" fg:x="3348552" fg:w="33342"/><text x="42.3438%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (85,764 samples, 1.08%)</title><rect x="58.5088%" y="197" width="1.0781%" height="15" fill="rgb(246,130,32)" fg:x="4654364" fg:w="85764"/><text x="58.7588%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,918 samples, 0.04%)</title><rect x="60.8980%" y="165" width="0.0367%" height="15" fill="rgb(220,64,15)" fg:x="4844423" fg:w="2918"/><text x="61.1480%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5,290 samples, 0.07%)</title><rect x="60.8694%" y="181" width="0.0665%" height="15" fill="rgb(248,17,4)" fg:x="4842145" fg:w="5290"/><text x="61.1194%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (65,706 samples, 0.83%)</title><rect x="60.9359%" y="181" width="0.8260%" height="15" fill="rgb(232,40,34)" fg:x="4847435" fg:w="65706"/><text x="61.1859%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (173,030 samples, 2.18%)</title><rect x="59.5870%" y="197" width="2.1751%" height="15" fill="rgb(230,79,50)" fg:x="4740128" fg:w="173030"/><text x="59.8370%" y="207.50">&lt;..</text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (154,295 samples, 1.94%)</title><rect x="61.7621%" y="197" width="1.9396%" height="15" fill="rgb(220,76,44)" fg:x="4913158" fg:w="154295"/><text x="62.0121%" y="207.50">&lt;..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4,508 samples, 0.06%)</title><rect x="63.6450%" y="181" width="0.0567%" height="15" fill="rgb(219,130,21)" fg:x="5062945" fg:w="4508"/><text x="63.8950%" y="191.50"></text></g><g><title>__rdl_dealloc (10,329 samples, 0.13%)</title><rect x="63.7069%" y="197" width="0.1298%" height="15" fill="rgb(248,133,28)" fg:x="5067868" fg:w="10329"/><text x="63.9569%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (23,823 samples, 0.30%)</title><rect x="64.1164%" y="181" width="0.2995%" height="15" fill="rgb(247,113,7)" fg:x="5100448" fg:w="23823"/><text x="64.3664%" y="191.50"></text></g><g><title>__rdl_realloc (5,706 samples, 0.07%)</title><rect x="64.3442%" y="165" width="0.0717%" height="15" fill="rgb(223,15,53)" fg:x="5118565" fg:w="5706"/><text x="64.5942%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (47,028 samples, 0.59%)</title><rect x="63.8367%" y="197" width="0.5912%" height="15" fill="rgb(250,29,54)" fg:x="5078197" fg:w="47028"/><text x="64.0867%" y="207.50"></text></g><g><title>alloc::rc::Rc&lt;T,A&gt;::drop_slow (954 samples, 0.01%)</title><rect x="64.4159%" y="181" width="0.0120%" height="15" fill="rgb(238,1,37)" fg:x="5124271" fg:w="954"/><text x="64.6659%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (799 samples, 0.01%)</title><rect x="64.4290%" y="197" width="0.0100%" height="15" fill="rgb(209,37,27)" fg:x="5125311" fg:w="799"/><text x="64.6790%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (836 samples, 0.01%)</title><rect x="64.4705%" y="165" width="0.0105%" height="15" fill="rgb(249,211,31)" fg:x="5128615" fg:w="836"/><text x="64.7205%" y="175.50"></text></g><g><title>briolette_sim::simulator::&lt;impl absim::Enqueue&lt;briolette_sim::simulator::Simulator&gt; for alloc::vec::Vec&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt;&gt;::enqueue (3,385 samples, 0.04%)</title><rect x="64.4390%" y="197" width="0.0426%" height="15" fill="rgb(234,151,4)" fg:x="5126110" fg:w="3385"/><text x="64.6890%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,703 samples, 0.02%)</title><rect x="64.4602%" y="181" width="0.0214%" height="15" fill="rgb(221,127,12)" fg:x="5127792" fg:w="1703"/><text x="64.7102%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (22,472 samples, 0.28%)</title><rect x="64.4816%" y="197" width="0.2825%" height="15" fill="rgb(222,163,1)" fg:x="5129495" fg:w="22472"/><text x="64.7316%" y="207.50"></text></g><g><title>__rdl_dealloc (4,188 samples, 0.05%)</title><rect x="64.7114%" y="181" width="0.0526%" height="15" fill="rgb(205,132,42)" fg:x="5147779" fg:w="4188"/><text x="64.9614%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (26,632 samples, 0.33%)</title><rect x="64.7641%" y="197" width="0.3348%" height="15" fill="rgb(233,208,21)" fg:x="5151967" fg:w="26632"/><text x="65.0141%" y="207.50"></text></g><g><title>__rdl_dealloc (11,902 samples, 0.15%)</title><rect x="64.9492%" y="181" width="0.1496%" height="15" fill="rgb(219,53,28)" fg:x="5166697" fg:w="11902"/><text x="65.1992%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (1,939 samples, 0.02%)</title><rect x="65.0989%" y="197" width="0.0244%" height="15" fill="rgb(227,164,0)" fg:x="5178599" fg:w="1939"/><text x="65.3489%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (40,088 samples, 0.50%)</title><rect x="65.1232%" y="197" width="0.5039%" height="15" fill="rgb(214,116,45)" fg:x="5180538" fg:w="40088"/><text x="65.3732%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (5,857 samples, 0.07%)</title><rect x="65.6389%" y="197" width="0.0736%" height="15" fill="rgb(213,70,31)" fg:x="5221558" fg:w="5857"/><text x="65.8889%" y="207.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (1,845,217 samples, 23.20%)</title><rect x="42.5168%" y="213" width="23.1958%" height="15" fill="rgb(228,16,6)" fg:x="3382203" fg:w="1845217"/><text x="42.7668%" y="223.50">&lt;briolette_sim::simulator::Simulator ..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (44,386 samples, 0.56%)</title><rect x="66.4322%" y="165" width="0.5580%" height="15" fill="rgb(227,128,47)" fg:x="5284668" fg:w="44386"/><text x="66.6822%" y="175.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (99,419 samples, 1.25%)</title><rect x="65.7404%" y="197" width="1.2498%" height="15" fill="rgb(229,136,52)" fg:x="5229636" fg:w="99419"/><text x="65.9904%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (97,607 samples, 1.23%)</title><rect x="65.7632%" y="181" width="1.2270%" height="15" fill="rgb(237,139,4)" fg:x="5231448" fg:w="97607"/><text x="66.0132%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (5,293 samples, 0.07%)</title><rect x="66.9902%" y="197" width="0.0665%" height="15" fill="rgb(245,145,8)" fg:x="5329055" fg:w="5293"/><text x="67.2402%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,551 samples, 0.04%)</title><rect x="67.0567%" y="197" width="0.0446%" height="15" fill="rgb(254,218,0)" fg:x="5334348" fg:w="3551"/><text x="67.3067%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2,180 samples, 0.03%)</title><rect x="67.0740%" y="181" width="0.0274%" height="15" fill="rgb(219,64,10)" fg:x="5335719" fg:w="2180"/><text x="67.3240%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (112,494 samples, 1.41%)</title><rect x="65.7126%" y="213" width="1.4141%" height="15" fill="rgb(233,229,7)" fg:x="5227420" fg:w="112494"/><text x="65.9626%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (2,015 samples, 0.03%)</title><rect x="67.1014%" y="197" width="0.0253%" height="15" fill="rgb(238,204,4)" fg:x="5337899" fg:w="2015"/><text x="67.3514%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30,115 samples, 0.38%)</title><rect x="73.7143%" y="197" width="0.3786%" height="15" fill="rgb(231,121,32)" fg:x="5863952" fg:w="30115"/><text x="73.9643%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::at_location_mut (2,707 samples, 0.03%)</title><rect x="74.0982%" y="197" width="0.0340%" height="15" fill="rgb(253,137,48)" fg:x="5894495" fg:w="2707"/><text x="74.3482%" y="207.50"></text></g><g><title>absim::graph_utils::SimulationGraph::reset (5,467 samples, 0.07%)</title><rect x="74.1322%" y="197" width="0.0687%" height="15" fill="rgb(220,127,0)" fg:x="5897202" fg:w="5467"/><text x="74.3822%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7,441 samples, 0.09%)</title><rect x="74.3030%" y="181" width="0.0935%" height="15" fill="rgb(250,219,29)" fg:x="5910787" fg:w="7441"/><text x="74.5530%" y="191.50"></text></g><g><title>__rdl_realloc (1,048 samples, 0.01%)</title><rect x="74.3834%" y="165" width="0.0132%" height="15" fill="rgb(215,16,19)" fg:x="5917180" fg:w="1048"/><text x="74.6334%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15,825 samples, 0.20%)</title><rect x="74.2010%" y="197" width="0.1989%" height="15" fill="rgb(210,77,6)" fg:x="5902669" fg:w="15825"/><text x="74.4510%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (50,951 samples, 0.64%)</title><rect x="74.3999%" y="197" width="0.6405%" height="15" fill="rgb(223,202,16)" fg:x="5918494" fg:w="50951"/><text x="74.6499%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15,790 samples, 0.20%)</title><rect x="74.8419%" y="181" width="0.1985%" height="15" fill="rgb(233,187,25)" fg:x="5953655" fg:w="15790"/><text x="75.0919%" y="191.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (658,875 samples, 8.28%)</title><rect x="67.1267%" y="213" width="8.2826%" height="15" fill="rgb(244,41,51)" fg:x="5339914" fg:w="658875"/><text x="67.3767%" y="223.50">&lt;briolette_s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (29,158 samples, 0.37%)</title><rect x="75.0427%" y="197" width="0.3665%" height="15" fill="rgb(215,119,16)" fg:x="5969631" fg:w="29158"/><text x="75.2927%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16,590 samples, 0.21%)</title><rect x="75.2007%" y="181" width="0.2085%" height="15" fill="rgb(216,162,10)" fg:x="5982199" fg:w="16590"/><text x="75.4507%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4,340 samples, 0.05%)</title><rect x="75.3547%" y="165" width="0.0546%" height="15" fill="rgb(208,90,33)" fg:x="5994449" fg:w="4340"/><text x="75.6047%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (243,756 samples, 3.06%)</title><rect x="77.9602%" y="197" width="3.0642%" height="15" fill="rgb(213,34,10)" fg:x="6201716" fg:w="243756"/><text x="78.2102%" y="207.50">&lt;al..</text></g><g><title>__rdl_alloc (816 samples, 0.01%)</title><rect x="81.0141%" y="181" width="0.0103%" height="15" fill="rgb(236,24,11)" fg:x="6444656" fg:w="816"/><text x="81.2641%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41,293 samples, 0.52%)</title><rect x="81.5629%" y="181" width="0.5191%" height="15" fill="rgb(205,97,43)" fg:x="6488308" fg:w="41293"/><text x="81.8129%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,696 samples, 0.16%)</title><rect x="81.9224%" y="165" width="0.1596%" height="15" fill="rgb(227,208,39)" fg:x="6516905" fg:w="12696"/><text x="82.1724%" y="175.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (606,130 samples, 7.62%)</title><rect x="75.4093%" y="213" width="7.6195%" height="15" fill="rgb(211,149,33)" fg:x="5998789" fg:w="606130"/><text x="75.6593%" y="223.50">&lt;briolette..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (158,918 samples, 2.00%)</title><rect x="81.0311%" y="197" width="1.9977%" height="15" fill="rgb(212,189,28)" fg:x="6446001" fg:w="158918"/><text x="81.2811%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (75,318 samples, 0.95%)</title><rect x="82.0820%" y="181" width="0.9468%" height="15" fill="rgb(247,178,26)" fg:x="6529601" fg:w="75318"/><text x="82.3320%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (30,007 samples, 0.38%)</title><rect x="82.6516%" y="165" width="0.3772%" height="15" fill="rgb(209,193,35)" fg:x="6574912" fg:w="30007"/><text x="82.9016%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,676 samples, 0.11%)</title><rect x="82.9197%" y="149" width="0.1091%" height="15" fill="rgb(222,198,43)" fg:x="6596243" fg:w="8676"/><text x="83.1697%" y="159.50"></text></g><g><title>__rdl_dealloc (26,343 samples, 0.33%)</title><rect x="83.0288%" y="213" width="0.3312%" height="15" fill="rgb(237,43,23)" fg:x="6604919" fg:w="26343"/><text x="83.2788%" y="223.50"></text></g><g><title>__rdl_dealloc (914 samples, 0.01%)</title><rect x="83.4564%" y="197" width="0.0115%" height="15" fill="rgb(211,20,28)" fg:x="6638937" fg:w="914"/><text x="83.7064%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (11,733 samples, 0.15%)</title><rect x="83.4679%" y="197" width="0.1475%" height="15" fill="rgb(229,25,40)" fg:x="6639851" fg:w="11733"/><text x="83.7179%" y="207.50"></text></g><g><title>__rdl_dealloc (4,682 samples, 0.06%)</title><rect x="83.5565%" y="181" width="0.0589%" height="15" fill="rgb(226,152,28)" fg:x="6646902" fg:w="4682"/><text x="83.8065%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (109,057 samples, 1.37%)</title><rect x="83.6154%" y="197" width="1.3709%" height="15" fill="rgb(213,90,22)" fg:x="6651584" fg:w="109057"/><text x="83.8654%" y="207.50"></text></g><g><title>__rdl_dealloc (12,883 samples, 0.16%)</title><rect x="84.8244%" y="181" width="0.1619%" height="15" fill="rgb(213,168,7)" fg:x="6747758" fg:w="12883"/><text x="85.0744%" y="191.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (162,200 samples, 2.04%)</title><rect x="83.3599%" y="213" width="2.0390%" height="15" fill="rgb(228,40,10)" fg:x="6631262" fg:w="162200"/><text x="83.6099%" y="223.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (32,821 samples, 0.41%)</title><rect x="84.9863%" y="197" width="0.4126%" height="15" fill="rgb(240,112,49)" fg:x="6760641" fg:w="32821"/><text x="85.2363%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,526 samples, 0.02%)</title><rect x="85.4229%" y="165" width="0.0192%" height="15" fill="rgb(230,189,23)" fg:x="6795372" fg:w="1526"/><text x="85.6729%" y="175.50"></text></g><g><title>std::io::Write::write_all (1,021 samples, 0.01%)</title><rect x="85.4293%" y="149" width="0.0128%" height="15" fill="rgb(229,140,53)" fg:x="6795877" fg:w="1021"/><text x="85.6793%" y="159.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (3,695 samples, 0.05%)</title><rect x="85.4555%" y="149" width="0.0464%" height="15" fill="rgb(231,44,33)" fg:x="6797964" fg:w="3695"/><text x="85.7055%" y="159.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2,421 samples, 0.03%)</title><rect x="85.4715%" y="133" width="0.0304%" height="15" fill="rgb(243,0,1)" fg:x="6799238" fg:w="2421"/><text x="85.7215%" y="143.50"></text></g><g><title>std::io::Write::write_all (1,626 samples, 0.02%)</title><rect x="85.4815%" y="117" width="0.0204%" height="15" fill="rgb(250,7,54)" fg:x="6800033" fg:w="1626"/><text x="85.7315%" y="127.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (6,571 samples, 0.08%)</title><rect x="85.4440%" y="165" width="0.0826%" height="15" fill="rgb(235,113,7)" fg:x="6797051" fg:w="6571"/><text x="85.6940%" y="175.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (1,797 samples, 0.02%)</title><rect x="85.5040%" y="149" width="0.0226%" height="15" fill="rgb(249,123,4)" fg:x="6801825" fg:w="1797"/><text x="85.7540%" y="159.50"></text></g><g><title>std::io::Write::write_fmt (10,310 samples, 0.13%)</title><rect x="85.4043%" y="197" width="0.1296%" height="15" fill="rgb(211,197,27)" fg:x="6793890" fg:w="10310"/><text x="85.6543%" y="207.50"></text></g><g><title>core::fmt::write (9,896 samples, 0.12%)</title><rect x="85.4095%" y="181" width="0.1244%" height="15" fill="rgb(224,57,23)" fg:x="6794304" fg:w="9896"/><text x="85.6595%" y="191.50"></text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (10,827 samples, 0.14%)</title><rect x="85.3990%" y="213" width="0.1361%" height="15" fill="rgb(232,64,41)" fg:x="6793473" fg:w="10827"/><text x="85.6490%" y="223.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (6,465,794 samples, 81.28%)</title><rect x="4.2576%" y="229" width="81.2799%" height="15" fill="rgb(211,152,27)" fg:x="338695" fg:w="6465794"/><text x="4.5076%" y="239.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10,301 samples, 0.13%)</title><rect x="85.5375%" y="229" width="0.1295%" height="15" fill="rgb(217,142,22)" fg:x="6804490" fg:w="10301"/><text x="85.7875%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (987,750 samples, 12.42%)</title><rect x="85.6684%" y="213" width="12.4168%" height="15" fill="rgb(227,16,12)" fg:x="6814898" fg:w="987750"/><text x="85.9184%" y="223.50">&lt;alloc::vec::into_i..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (400,665 samples, 5.04%)</title><rect x="93.0485%" y="197" width="5.0367%" height="15" fill="rgb(207,79,0)" fg:x="7401983" fg:w="400665"/><text x="93.2985%" y="207.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (51,734 samples, 0.65%)</title><rect x="97.4348%" y="181" width="0.6503%" height="15" fill="rgb(225,27,26)" fg:x="7750914" fg:w="51734"/><text x="97.6848%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11,812 samples, 0.15%)</title><rect x="97.9366%" y="165" width="0.1485%" height="15" fill="rgb(240,26,18)" fg:x="7790836" fg:w="11812"/><text x="98.1866%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (987,795 samples, 12.42%)</title><rect x="85.6681%" y="229" width="12.4173%" height="15" fill="rgb(224,20,28)" fg:x="6814880" fg:w="987795"/><text x="85.9181%" y="239.50">&lt;std::collections::..</text></g><g><title>__rdl_alloc (5,568 samples, 0.07%)</title><rect x="98.0855%" y="229" width="0.0700%" height="15" fill="rgb(223,199,15)" fg:x="7802679" fg:w="5568"/><text x="98.3355%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,344 samples, 0.02%)</title><rect x="98.1574%" y="213" width="0.0169%" height="15" fill="rgb(214,15,36)" fg:x="7808395" fg:w="1344"/><text x="98.4074%" y="223.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (857 samples, 0.01%)</title><rect x="98.1743%" y="213" width="0.0108%" height="15" fill="rgb(210,3,36)" fg:x="7809739" fg:w="857"/><text x="98.4243%" y="223.50"></text></g><g><title>absim::graph_utils::SimulationGraph::new (2,498 samples, 0.03%)</title><rect x="98.1559%" y="229" width="0.0314%" height="15" fill="rgb(254,92,53)" fg:x="7808277" fg:w="2498"/><text x="98.4059%" y="239.50"></text></g><g><title>__rdl_dealloc (8,533 samples, 0.11%)</title><rect x="98.3204%" y="197" width="0.1073%" height="15" fill="rgb(241,165,28)" fg:x="7821366" fg:w="8533"/><text x="98.5704%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (18,132 samples, 0.23%)</title><rect x="98.2015%" y="213" width="0.2279%" height="15" fill="rgb(218,8,10)" fg:x="7811909" fg:w="18132"/><text x="98.4515%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (109,654 samples, 1.38%)</title><rect x="98.4298%" y="197" width="1.3784%" height="15" fill="rgb(242,9,18)" fg:x="7830067" fg:w="109654"/><text x="98.6798%" y="207.50"></text></g><g><title>__rdl_dealloc (2,493 samples, 0.03%)</title><rect x="99.7769%" y="181" width="0.0313%" height="15" fill="rgb(237,21,30)" fg:x="7937228" fg:w="2493"/><text x="100.0269%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (128,166 samples, 1.61%)</title><rect x="98.1980%" y="229" width="1.6111%" height="15" fill="rgb(216,101,6)" fg:x="7811631" fg:w="128166"/><text x="98.4480%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (109,748 samples, 1.38%)</title><rect x="98.4296%" y="213" width="1.3796%" height="15" fill="rgb(216,221,29)" fg:x="7830049" fg:w="109748"/><text x="98.6796%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (8,720 samples, 0.11%)</title><rect x="99.8092%" y="229" width="0.1096%" height="15" fill="rgb(251,27,38)" fg:x="7939797" fg:w="8720"/><text x="100.0592%" y="239.50"></text></g><g><title>__rdl_dealloc (2,892 samples, 0.04%)</title><rect x="99.8825%" y="213" width="0.0364%" height="15" fill="rgb(226,56,50)" fg:x="7945625" fg:w="2892"/><text x="100.1325%" y="223.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (998 samples, 0.01%)</title><rect x="99.9329%" y="101" width="0.0125%" height="15" fill="rgb(254,156,25)" fg:x="7949635" fg:w="998"/><text x="100.1829%" y="111.50"></text></g><g><title>rustc_demangle::try_demangle (957 samples, 0.01%)</title><rect x="99.9334%" y="85" width="0.0120%" height="15" fill="rgb(238,85,40)" fg:x="7949676" fg:w="957"/><text x="100.1834%" y="95.50"></text></g><g><title>rustc_demangle::demangle (905 samples, 0.01%)</title><rect x="99.9340%" y="69" width="0.0114%" height="15" fill="rgb(236,62,21)" fg:x="7949728" fg:w="905"/><text x="100.1840%" y="79.50"></text></g><g><title>alloc::fmt::format::format_inner (1,476 samples, 0.02%)</title><rect x="99.9454%" y="101" width="0.0186%" height="15" fill="rgb(215,223,6)" fg:x="7950633" fg:w="1476"/><text x="100.1954%" y="111.50"></text></g><g><title>core::fmt::write (1,452 samples, 0.02%)</title><rect x="99.9457%" y="85" width="0.0183%" height="15" fill="rgb(224,178,49)" fg:x="7950657" fg:w="1452"/><text x="100.1957%" y="95.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (1,419 samples, 0.02%)</title><rect x="99.9461%" y="69" width="0.0178%" height="15" fill="rgb(212,214,37)" fg:x="7950690" fg:w="1419"/><text x="100.1961%" y="79.50"></text></g><g><title>core::fmt::write (1,385 samples, 0.02%)</title><rect x="99.9465%" y="53" width="0.0174%" height="15" fill="rgb(216,137,49)" fg:x="7950724" fg:w="1385"/><text x="100.1965%" y="63.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (1,318 samples, 0.02%)</title><rect x="99.9474%" y="37" width="0.0166%" height="15" fill="rgb(221,35,11)" fg:x="7950791" fg:w="1318"/><text x="100.1974%" y="47.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (3,915 samples, 0.05%)</title><rect x="99.9241%" y="165" width="0.0492%" height="15" fill="rgb(207,13,12)" fg:x="7948938" fg:w="3915"/><text x="100.1741%" y="175.50"></text></g><g><title>pprof::frames::Symbol::name (3,811 samples, 0.05%)</title><rect x="99.9254%" y="149" width="0.0479%" height="15" fill="rgb(251,187,15)" fg:x="7949042" fg:w="3811"/><text x="100.1754%" y="159.50"></text></g><g><title>symbolic_demangle::demangle (3,320 samples, 0.04%)</title><rect x="99.9316%" y="133" width="0.0417%" height="15" fill="rgb(241,160,11)" fg:x="7949533" fg:w="3320"/><text x="100.1816%" y="143.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (3,270 samples, 0.04%)</title><rect x="99.9322%" y="117" width="0.0411%" height="15" fill="rgb(250,75,10)" fg:x="7949583" fg:w="3270"/><text x="100.1822%" y="127.50"></text></g><g><title>core::fmt::write (4,001 samples, 0.05%)</title><rect x="99.9232%" y="181" width="0.0503%" height="15" fill="rgb(229,147,3)" fg:x="7948864" fg:w="4001"/><text x="100.1732%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,078 samples, 0.05%)</title><rect x="99.9222%" y="213" width="0.0513%" height="15" fill="rgb(251,89,13)" fg:x="7948789" fg:w="4078"/><text x="100.1722%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,073 samples, 0.05%)</title><rect x="99.9223%" y="197" width="0.0512%" height="15" fill="rgb(220,19,3)" fg:x="7948794" fg:w="4073"/><text x="100.1723%" y="207.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (5,168 samples, 0.06%)</title><rect x="99.9222%" y="229" width="0.0650%" height="15" fill="rgb(213,66,16)" fg:x="7948789" fg:w="5168"/><text x="100.1722%" y="239.50"></text></g><g><title>inferno::flamegraph::from_lines (1,087 samples, 0.01%)</title><rect x="99.9735%" y="213" width="0.0137%" height="15" fill="rgb(232,215,38)" fg:x="7952870" fg:w="1087"/><text x="100.2235%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (879 samples, 0.01%)</title><rect x="99.9887%" y="229" width="0.0110%" height="15" fill="rgb(221,210,48)" fg:x="7954081" fg:w="879"/><text x="100.2387%" y="239.50"></text></g><g><title>all (7,954,976 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(253,75,5)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="399.50"></text></g><g><title>briolette-sim (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(213,161,23)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="383.50">briolette-sim</text></g><g><title>_start (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(207,35,21)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="367.50">_start</text></g><g><title>__libc_start_main_impl (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(244,102,30)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="351.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(228,113,33)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="335.50">__libc_start_call_main</text></g><g><title>main (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(239,148,24)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(206,66,1)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(215,211,1)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="287.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(243,95,19)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="271.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (7,954,976 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,81,39)" fg:x="0" fg:w="7954976"/><text x="0.2500%" y="255.50">briolette_sim::main</text></g></svg></svg>