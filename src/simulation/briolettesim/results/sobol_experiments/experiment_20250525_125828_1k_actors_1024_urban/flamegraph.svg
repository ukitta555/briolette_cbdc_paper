<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="6324186"><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (74,398 samples, 1.18%)</title><rect x="3.0276%" y="261" width="1.1764%" height="15" fill="rgb(222,120,18)" fg:x="191473" fg:w="74398"/><text x="3.2776%" y="271.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (74,214 samples, 1.17%)</title><rect x="3.0305%" y="245" width="1.1735%" height="15" fill="rgb(249,119,12)" fg:x="191657" fg:w="74214"/><text x="3.2805%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (73,433 samples, 1.16%)</title><rect x="3.0429%" y="229" width="1.1611%" height="15" fill="rgb(211,11,21)" fg:x="192438" fg:w="73433"/><text x="3.2929%" y="239.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (33,808 samples, 0.53%)</title><rect x="3.6695%" y="213" width="0.5346%" height="15" fill="rgb(208,41,37)" fg:x="232063" fg:w="33808"/><text x="3.9195%" y="223.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (74,589 samples, 1.18%)</title><rect x="3.0250%" y="277" width="1.1794%" height="15" fill="rgb(234,157,2)" fg:x="191309" fg:w="74589"/><text x="3.2750%" y="287.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (684 samples, 0.01%)</title><rect x="4.2155%" y="245" width="0.0108%" height="15" fill="rgb(205,4,10)" fg:x="266597" fg:w="684"/><text x="4.4655%" y="255.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (639 samples, 0.01%)</title><rect x="4.2162%" y="229" width="0.0101%" height="15" fill="rgb(225,164,14)" fg:x="266642" fg:w="639"/><text x="4.4662%" y="239.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (784 samples, 0.01%)</title><rect x="4.2140%" y="261" width="0.0124%" height="15" fill="rgb(224,120,19)" fg:x="266501" fg:w="784"/><text x="4.4640%" y="271.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::enqueue_delayed (2,116 samples, 0.03%)</title><rect x="4.2045%" y="277" width="0.0335%" height="15" fill="rgb(226,42,25)" fg:x="265898" fg:w="2116"/><text x="4.4545%" y="287.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::append (637 samples, 0.01%)</title><rect x="9.6145%" y="245" width="0.0101%" height="15" fill="rgb(251,22,7)" fg:x="608040" fg:w="637"/><text x="9.8645%" y="255.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::collect (2,572 samples, 0.04%)</title><rect x="9.5856%" y="261" width="0.0407%" height="15" fill="rgb(227,92,47)" fg:x="606213" fg:w="2572"/><text x="9.8356%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (158,794 samples, 2.51%)</title><rect x="10.5699%" y="245" width="2.5109%" height="15" fill="rgb(231,33,17)" fg:x="668463" fg:w="158794"/><text x="10.8199%" y="255.50">&lt;a..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (48,523 samples, 0.77%)</title><rect x="17.7544%" y="181" width="0.7673%" height="15" fill="rgb(231,121,51)" fg:x="1122822" fg:w="48523"/><text x="18.0044%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (112,219 samples, 1.77%)</title><rect x="16.7472%" y="197" width="1.7744%" height="15" fill="rgb(217,226,43)" fg:x="1059127" fg:w="112219"/><text x="16.9972%" y="207.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (159,730 samples, 2.53%)</title><rect x="15.9960%" y="213" width="2.5257%" height="15" fill="rgb(234,213,34)" fg:x="1011617" fg:w="159730"/><text x="16.2460%" y="223.50">&lt;b..</text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (185,138 samples, 2.93%)</title><rect x="15.5973%" y="229" width="2.9275%" height="15" fill="rgb(242,103,7)" fg:x="986404" fg:w="185138"/><text x="15.8473%" y="239.50">&lt;a..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (32,445 samples, 0.51%)</title><rect x="19.5212%" y="197" width="0.5130%" height="15" fill="rgb(210,37,31)" fg:x="1234558" fg:w="32445"/><text x="19.7712%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (72,278 samples, 1.14%)</title><rect x="18.8914%" y="213" width="1.1429%" height="15" fill="rgb(218,179,44)" fg:x="1194727" fg:w="72278"/><text x="19.1414%" y="223.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (95,468 samples, 1.51%)</title><rect x="18.5248%" y="229" width="1.5096%" height="15" fill="rgb(223,127,28)" fg:x="1171542" fg:w="95468"/><text x="18.7748%" y="239.50"></text></g><g><title>rand::rngs::thread::thread_rng (1,261 samples, 0.02%)</title><rect x="20.9312%" y="213" width="0.0199%" height="15" fill="rgb(211,220,21)" fg:x="1323726" fg:w="1261"/><text x="21.1812%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide (909 samples, 0.01%)</title><rect x="20.9511%" y="213" width="0.0144%" height="15" fill="rgb(244,130,39)" fg:x="1324987" fg:w="909"/><text x="21.2011%" y="223.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (104,377 samples, 1.65%)</title><rect x="20.0344%" y="229" width="1.6504%" height="15" fill="rgb(237,25,15)" fg:x="1267010" fg:w="104377"/><text x="20.2844%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (45,491 samples, 0.72%)</title><rect x="20.9655%" y="213" width="0.7193%" height="15" fill="rgb(239,202,17)" fg:x="1325896" fg:w="45491"/><text x="21.2155%" y="223.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (30,689 samples, 0.49%)</title><rect x="21.6848%" y="229" width="0.4853%" height="15" fill="rgb(211,140,15)" fg:x="1371387" fg:w="30689"/><text x="21.9348%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1,254 samples, 0.02%)</title><rect x="22.1502%" y="213" width="0.0198%" height="15" fill="rgb(242,173,42)" fg:x="1400822" fg:w="1254"/><text x="22.4002%" y="223.50"></text></g><g><title>absim::graph_utils::SimulationGraph::neighbours (971 samples, 0.02%)</title><rect x="22.1741%" y="229" width="0.0154%" height="15" fill="rgb(206,6,22)" fg:x="1402329" fg:w="971"/><text x="22.4241%" y="239.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (43,324 samples, 0.69%)</title><rect x="30.6299%" y="165" width="0.6851%" height="15" fill="rgb(208,108,26)" fg:x="1937093" fg:w="43324"/><text x="30.8799%" y="175.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (187,170 samples, 2.96%)</title><rect x="28.3555%" y="197" width="2.9596%" height="15" fill="rgb(209,33,6)" fg:x="1793256" fg:w="187170"/><text x="28.6055%" y="207.50">&lt;br..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (110,610 samples, 1.75%)</title><rect x="29.5661%" y="181" width="1.7490%" height="15" fill="rgb(233,111,2)" fg:x="1869816" fg:w="110610"/><text x="29.8161%" y="191.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (198,611 samples, 3.14%)</title><rect x="28.1746%" y="213" width="3.1405%" height="15" fill="rgb(233,147,20)" fg:x="1781816" fg:w="198611"/><text x="28.4246%" y="223.50">&lt;ab..</text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (2,073 samples, 0.03%)</title><rect x="31.3151%" y="213" width="0.0328%" height="15" fill="rgb(220,18,35)" fg:x="1980427" fg:w="2073"/><text x="31.5651%" y="223.50"></text></g><g><title>__rdl_dealloc (986 samples, 0.02%)</title><rect x="31.3499%" y="213" width="0.0156%" height="15" fill="rgb(248,173,4)" fg:x="1982628" fg:w="986"/><text x="31.5999%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (113,296 samples, 1.79%)</title><rect x="31.3655%" y="213" width="1.7915%" height="15" fill="rgb(214,22,42)" fg:x="1983614" fg:w="113296"/><text x="31.6155%" y="223.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (59,752 samples, 0.94%)</title><rect x="32.2122%" y="197" width="0.9448%" height="15" fill="rgb(238,207,18)" fg:x="2037158" fg:w="59752"/><text x="32.4622%" y="207.50"></text></g><g><title>__rdl_realloc (14,484 samples, 0.23%)</title><rect x="32.9280%" y="181" width="0.2290%" height="15" fill="rgb(206,143,7)" fg:x="2082426" fg:w="14484"/><text x="33.1780%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (26,206 samples, 0.41%)</title><rect x="33.1570%" y="213" width="0.4144%" height="15" fill="rgb(213,220,16)" fg:x="2096910" fg:w="26206"/><text x="33.4070%" y="223.50"></text></g><g><title>__rdl_dealloc (9,613 samples, 0.15%)</title><rect x="33.4194%" y="197" width="0.1520%" height="15" fill="rgb(230,94,34)" fg:x="2113503" fg:w="9613"/><text x="33.6694%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (4,485 samples, 0.07%)</title><rect x="33.5714%" y="213" width="0.0709%" height="15" fill="rgb(226,121,41)" fg:x="2123116" fg:w="4485"/><text x="33.8214%" y="223.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (739,556 samples, 11.69%)</title><rect x="22.1894%" y="229" width="11.6941%" height="15" fill="rgb(231,172,0)" fg:x="1403300" fg:w="739556"/><text x="22.4394%" y="239.50">briolette_sim::si..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (14,320 samples, 0.23%)</title><rect x="33.6571%" y="213" width="0.2264%" height="15" fill="rgb(238,30,23)" fg:x="2128536" fg:w="14320"/><text x="33.9071%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11,025 samples, 0.17%)</title><rect x="33.8835%" y="229" width="0.1743%" height="15" fill="rgb(251,61,22)" fg:x="2142856" fg:w="11025"/><text x="34.1335%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,599 samples, 0.06%)</title><rect x="34.0009%" y="213" width="0.0569%" height="15" fill="rgb(243,98,23)" fg:x="2150282" fg:w="3599"/><text x="34.2509%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (19,998 samples, 0.32%)</title><rect x="34.0592%" y="229" width="0.3162%" height="15" fill="rgb(234,68,42)" fg:x="2153966" fg:w="19998"/><text x="34.3092%" y="239.50"></text></g><g><title>__rdl_dealloc (5,866 samples, 0.09%)</title><rect x="34.2826%" y="213" width="0.0928%" height="15" fill="rgb(236,143,46)" fg:x="2168098" fg:w="5866"/><text x="34.5326%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (11,904 samples, 0.19%)</title><rect x="34.3754%" y="229" width="0.1882%" height="15" fill="rgb(225,139,27)" fg:x="2173964" fg:w="11904"/><text x="34.6254%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9,143 samples, 0.14%)</title><rect x="34.5636%" y="229" width="0.1446%" height="15" fill="rgb(209,173,40)" fg:x="2185868" fg:w="9143"/><text x="34.8136%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5,811 samples, 0.09%)</title><rect x="34.6163%" y="213" width="0.0919%" height="15" fill="rgb(234,215,30)" fg:x="2189200" fg:w="5811"/><text x="34.8663%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1,978 samples, 0.03%)</title><rect x="34.6769%" y="197" width="0.0313%" height="15" fill="rgb(237,150,49)" fg:x="2193033" fg:w="1978"/><text x="34.9269%" y="207.50"></text></g><g><title>rand::rng::Rng::gen_range (11,566 samples, 0.18%)</title><rect x="34.7082%" y="229" width="0.1829%" height="15" fill="rgb(222,219,47)" fg:x="2195011" fg:w="11566"/><text x="34.9582%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3,677 samples, 0.06%)</title><rect x="34.8329%" y="213" width="0.0581%" height="15" fill="rgb(236,144,53)" fg:x="2202900" fg:w="3677"/><text x="35.0829%" y="223.50"></text></g><g><title>rand::seq::IteratorRandom::choose (146,775 samples, 2.32%)</title><rect x="34.8911%" y="229" width="2.3209%" height="15" fill="rgb(206,81,47)" fg:x="2206577" fg:w="146775"/><text x="35.1411%" y="239.50">r..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (10,138 samples, 0.16%)</title><rect x="37.0516%" y="213" width="0.1603%" height="15" fill="rgb(236,74,41)" fg:x="2343214" fg:w="10138"/><text x="37.3016%" y="223.50"></text></g><g><title>__floor_sse41 (2,013 samples, 0.03%)</title><rect x="37.7563%" y="213" width="0.0318%" height="15" fill="rgb(222,123,15)" fg:x="2387780" fg:w="2013"/><text x="38.0063%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide (817 samples, 0.01%)</title><rect x="37.7956%" y="213" width="0.0129%" height="15" fill="rgb(242,161,35)" fg:x="2390261" fg:w="817"/><text x="38.0456%" y="223.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (1,589,738 samples, 25.14%)</title><rect x="13.0808%" y="245" width="25.1374%" height="15" fill="rgb(248,204,6)" fg:x="827257" fg:w="1589738"/><text x="13.3308%" y="255.50">&lt;briolette_sim::simulator::Simulator as ..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (63,643 samples, 1.01%)</title><rect x="37.2119%" y="229" width="1.0063%" height="15" fill="rgb(233,160,54)" fg:x="2353352" fg:w="63643"/><text x="37.4619%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (25,917 samples, 0.41%)</title><rect x="37.8085%" y="213" width="0.4098%" height="15" fill="rgb(220,143,29)" fg:x="2391078" fg:w="25917"/><text x="38.0585%" y="223.50"></text></g><g><title>rand_chacha::guts::init_chacha (2,598 samples, 0.04%)</title><rect x="38.9840%" y="229" width="0.0411%" height="15" fill="rgb(228,101,31)" fg:x="2465421" fg:w="2598"/><text x="39.2340%" y="239.50"></text></g><g><title>rand_chacha::guts::init_chacha::impl_avx (1,905 samples, 0.03%)</title><rect x="38.9950%" y="213" width="0.0301%" height="15" fill="rgb(220,14,36)" fg:x="2466114" fg:w="1905"/><text x="39.2450%" y="223.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as core::clone::Clone&gt;::clone (55,900 samples, 0.88%)</title><rect x="38.2183%" y="245" width="0.8839%" height="15" fill="rgb(250,174,36)" fg:x="2416995" fg:w="55900"/><text x="38.4683%" y="255.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64::pcg32 (4,876 samples, 0.08%)</title><rect x="39.0251%" y="229" width="0.0771%" height="15" fill="rgb(228,39,31)" fg:x="2468019" fg:w="4876"/><text x="39.2751%" y="239.50"></text></g><g><title>__rdl_dealloc (1,323 samples, 0.02%)</title><rect x="39.1022%" y="245" width="0.0209%" height="15" fill="rgb(222,11,34)" fg:x="2472896" fg:w="1323"/><text x="39.3522%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5,157 samples, 0.08%)</title><rect x="39.1240%" y="245" width="0.0815%" height="15" fill="rgb(243,9,18)" fg:x="2474276" fg:w="5157"/><text x="39.3740%" y="255.50"></text></g><g><title>__rdl_dealloc (1,740 samples, 0.03%)</title><rect x="39.1781%" y="229" width="0.0275%" height="15" fill="rgb(224,195,33)" fg:x="2477693" fg:w="1740"/><text x="39.4281%" y="239.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (1,917,889 samples, 30.33%)</title><rect x="9.6263%" y="261" width="30.3263%" height="15" fill="rgb(205,192,8)" fg:x="608785" fg:w="1917889"/><text x="9.8763%" y="271.50">&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absi..</text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (47,206 samples, 0.75%)</title><rect x="39.2061%" y="245" width="0.7464%" height="15" fill="rgb(242,39,45)" fg:x="2479468" fg:w="47206"/><text x="39.4561%" y="255.50"></text></g><g><title>__rdl_dealloc (20,986 samples, 0.33%)</title><rect x="39.6207%" y="229" width="0.3318%" height="15" fill="rgb(252,85,13)" fg:x="2505688" fg:w="20986"/><text x="39.8707%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (66,049 samples, 1.04%)</title><rect x="56.6429%" y="245" width="1.0444%" height="15" fill="rgb(226,105,17)" fg:x="3582205" fg:w="66049"/><text x="56.8929%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3,960 samples, 0.06%)</title><rect x="58.9015%" y="229" width="0.0626%" height="15" fill="rgb(235,72,42)" fg:x="3725043" fg:w="3960"/><text x="59.1515%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,277 samples, 0.04%)</title><rect x="58.9282%" y="213" width="0.0360%" height="15" fill="rgb(229,21,30)" fg:x="3726726" fg:w="2277"/><text x="59.1782%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (131,882 samples, 2.09%)</title><rect x="57.6873%" y="245" width="2.0854%" height="15" fill="rgb(206,88,45)" fg:x="3648254" fg:w="131882"/><text x="57.9373%" y="255.50">&lt;..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (51,133 samples, 0.81%)</title><rect x="58.9642%" y="229" width="0.8085%" height="15" fill="rgb(205,215,51)" fg:x="3729003" fg:w="51133"/><text x="59.2142%" y="239.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (126,052 samples, 1.99%)</title><rect x="59.7727%" y="245" width="1.9932%" height="15" fill="rgb(222,24,52)" fg:x="3780136" fg:w="126052"/><text x="60.0227%" y="255.50">&lt;..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3,610 samples, 0.06%)</title><rect x="61.7088%" y="229" width="0.0571%" height="15" fill="rgb(217,117,39)" fg:x="3902578" fg:w="3610"/><text x="61.9588%" y="239.50"></text></g><g><title>__rdl_dealloc (10,934 samples, 0.17%)</title><rect x="61.7689%" y="245" width="0.1729%" height="15" fill="rgb(229,186,25)" fg:x="3906381" fg:w="10934"/><text x="62.0189%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (38,768 samples, 0.61%)</title><rect x="61.9418%" y="245" width="0.6130%" height="15" fill="rgb(224,205,31)" fg:x="3917315" fg:w="38768"/><text x="62.1918%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (21,170 samples, 0.33%)</title><rect x="62.2201%" y="229" width="0.3347%" height="15" fill="rgb(209,115,16)" fg:x="3934913" fg:w="21170"/><text x="62.4701%" y="239.50"></text></g><g><title>__rdl_realloc (4,907 samples, 0.08%)</title><rect x="62.4772%" y="213" width="0.0776%" height="15" fill="rgb(242,18,23)" fg:x="3951176" fg:w="4907"/><text x="62.7272%" y="223.50"></text></g><g><title>briolette_sim::simulator::&lt;impl absim::Enqueue&lt;briolette_sim::simulator::Simulator&gt; for alloc::vec::Vec&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt;&gt;::enqueue (2,308 samples, 0.04%)</title><rect x="62.5646%" y="245" width="0.0365%" height="15" fill="rgb(239,98,2)" fg:x="3956704" fg:w="2308"/><text x="62.8146%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,185 samples, 0.02%)</title><rect x="62.5824%" y="229" width="0.0187%" height="15" fill="rgb(226,140,2)" fg:x="3957827" fg:w="1185"/><text x="62.8324%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (17,050 samples, 0.27%)</title><rect x="62.6011%" y="245" width="0.2696%" height="15" fill="rgb(233,8,43)" fg:x="3959012" fg:w="17050"/><text x="62.8511%" y="255.50"></text></g><g><title>__rdl_dealloc (3,601 samples, 0.06%)</title><rect x="62.8138%" y="229" width="0.0569%" height="15" fill="rgb(221,84,18)" fg:x="3972461" fg:w="3601"/><text x="63.0638%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (20,605 samples, 0.33%)</title><rect x="62.8707%" y="245" width="0.3258%" height="15" fill="rgb(217,42,0)" fg:x="3976062" fg:w="20605"/><text x="63.1207%" y="255.50"></text></g><g><title>__rdl_dealloc (9,445 samples, 0.15%)</title><rect x="63.0472%" y="229" width="0.1493%" height="15" fill="rgb(224,174,15)" fg:x="3987222" fg:w="9445"/><text x="63.2972%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (1,438 samples, 0.02%)</title><rect x="63.1965%" y="245" width="0.0227%" height="15" fill="rgb(207,168,50)" fg:x="3996667" fg:w="1438"/><text x="63.4465%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (24,942 samples, 0.39%)</title><rect x="63.2193%" y="245" width="0.3944%" height="15" fill="rgb(233,140,25)" fg:x="3998105" fg:w="24942"/><text x="63.4693%" y="255.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (1,501,387 samples, 23.74%)</title><rect x="39.9570%" y="261" width="23.7404%" height="15" fill="rgb(210,21,25)" fg:x="2526955" fg:w="1501387"/><text x="40.2070%" y="271.50">&lt;briolette_sim::simulator::Simulator a..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4,531 samples, 0.07%)</title><rect x="63.6258%" y="245" width="0.0716%" height="15" fill="rgb(220,29,12)" fg:x="4023811" fg:w="4531"/><text x="63.8758%" y="255.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (80,721 samples, 1.28%)</title><rect x="63.7268%" y="245" width="1.2764%" height="15" fill="rgb(240,77,3)" fg:x="4030202" fg:w="80721"/><text x="63.9768%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (79,273 samples, 1.25%)</title><rect x="63.7497%" y="229" width="1.2535%" height="15" fill="rgb(210,132,27)" fg:x="4031650" fg:w="79273"/><text x="63.9997%" y="239.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (34,744 samples, 0.55%)</title><rect x="64.4538%" y="213" width="0.5494%" height="15" fill="rgb(245,33,15)" fg:x="4076179" fg:w="34744"/><text x="64.7038%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (5,359 samples, 0.08%)</title><rect x="65.0032%" y="245" width="0.0847%" height="15" fill="rgb(239,88,8)" fg:x="4110923" fg:w="5359"/><text x="65.2532%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,000 samples, 0.05%)</title><rect x="65.0879%" y="245" width="0.0474%" height="15" fill="rgb(227,124,52)" fg:x="4116282" fg:w="3000"/><text x="65.3379%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,870 samples, 0.03%)</title><rect x="65.1058%" y="229" width="0.0296%" height="15" fill="rgb(223,150,17)" fg:x="4117412" fg:w="1870"/><text x="65.3558%" y="239.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (92,533 samples, 1.46%)</title><rect x="63.6974%" y="261" width="1.4632%" height="15" fill="rgb(226,163,32)" fg:x="4028342" fg:w="92533"/><text x="63.9474%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1,593 samples, 0.03%)</title><rect x="65.1354%" y="245" width="0.0252%" height="15" fill="rgb(210,160,49)" fg:x="4119282" fg:w="1593"/><text x="65.3854%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (22,480 samples, 0.36%)</title><rect x="72.9524%" y="245" width="0.3555%" height="15" fill="rgb(232,103,11)" fg:x="4613643" fg:w="22480"/><text x="73.2024%" y="255.50"></text></g><g><title>absim::graph_utils::SimulationGraph::at_location_mut (2,019 samples, 0.03%)</title><rect x="73.3127%" y="245" width="0.0319%" height="15" fill="rgb(222,83,47)" fg:x="4636433" fg:w="2019"/><text x="73.5627%" y="255.50"></text></g><g><title>absim::graph_utils::SimulationGraph::reset (3,906 samples, 0.06%)</title><rect x="73.3446%" y="245" width="0.0618%" height="15" fill="rgb(214,157,32)" fg:x="4638452" fg:w="3906"/><text x="73.5946%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11,856 samples, 0.19%)</title><rect x="73.4064%" y="245" width="0.1875%" height="15" fill="rgb(243,145,15)" fg:x="4642358" fg:w="11856"/><text x="73.6564%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5,690 samples, 0.09%)</title><rect x="73.5039%" y="229" width="0.0900%" height="15" fill="rgb(206,229,22)" fg:x="4648524" fg:w="5690"/><text x="73.7539%" y="239.50"></text></g><g><title>__rdl_realloc (750 samples, 0.01%)</title><rect x="73.5820%" y="213" width="0.0119%" height="15" fill="rgb(211,28,0)" fg:x="4653464" fg:w="750"/><text x="73.8320%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (38,016 samples, 0.60%)</title><rect x="73.5939%" y="245" width="0.6011%" height="15" fill="rgb(247,156,3)" fg:x="4654214" fg:w="38016"/><text x="73.8439%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12,089 samples, 0.19%)</title><rect x="74.0038%" y="229" width="0.1912%" height="15" fill="rgb(240,9,27)" fg:x="4680141" fg:w="12089"/><text x="74.2538%" y="239.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (593,066 samples, 9.38%)</title><rect x="65.1606%" y="261" width="9.3777%" height="15" fill="rgb(223,82,8)" fg:x="4120875" fg:w="593066"/><text x="65.4106%" y="271.50">&lt;briolette_si..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21,592 samples, 0.34%)</title><rect x="74.1969%" y="245" width="0.3414%" height="15" fill="rgb(238,134,26)" fg:x="4692349" fg:w="21592"/><text x="74.4469%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (12,130 samples, 0.19%)</title><rect x="74.3465%" y="229" width="0.1918%" height="15" fill="rgb(211,44,13)" fg:x="4701811" fg:w="12130"/><text x="74.5965%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3,223 samples, 0.05%)</title><rect x="74.4873%" y="213" width="0.0510%" height="15" fill="rgb(209,111,18)" fg:x="4710718" fg:w="3223"/><text x="74.7373%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (157,358 samples, 2.49%)</title><rect x="76.9389%" y="245" width="2.4882%" height="15" fill="rgb(215,91,37)" fg:x="4865760" fg:w="157358"/><text x="77.1889%" y="255.50">&lt;a..</text></g><g><title>core::hash::BuildHasher::hash_one (30,476 samples, 0.48%)</title><rect x="79.9364%" y="229" width="0.4819%" height="15" fill="rgb(224,205,54)" fg:x="5055324" fg:w="30476"/><text x="80.1864%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,341 samples, 0.15%)</title><rect x="80.2706%" y="213" width="0.1477%" height="15" fill="rgb(243,196,52)" fg:x="5076459" fg:w="9341"/><text x="80.5206%" y="223.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (430,820 samples, 6.81%)</title><rect x="74.5383%" y="261" width="6.8123%" height="15" fill="rgb(208,107,15)" fg:x="4713941" fg:w="430820"/><text x="74.7883%" y="271.50">&lt;briolett..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (121,437 samples, 1.92%)</title><rect x="79.4304%" y="245" width="1.9202%" height="15" fill="rgb(229,224,53)" fg:x="5023324" fg:w="121437"/><text x="79.6804%" y="255.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (58,961 samples, 0.93%)</title><rect x="80.4183%" y="229" width="0.9323%" height="15" fill="rgb(250,64,51)" fg:x="5085800" fg:w="58961"/><text x="80.6683%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (23,835 samples, 0.38%)</title><rect x="80.9737%" y="213" width="0.3769%" height="15" fill="rgb(218,217,30)" fg:x="5120926" fg:w="23835"/><text x="81.2237%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6,814 samples, 0.11%)</title><rect x="81.2428%" y="197" width="0.1077%" height="15" fill="rgb(240,83,14)" fg:x="5137947" fg:w="6814"/><text x="81.4928%" y="207.50"></text></g><g><title>__rdl_dealloc (16,004 samples, 0.25%)</title><rect x="81.3506%" y="261" width="0.2531%" height="15" fill="rgb(236,105,17)" fg:x="5144761" fg:w="16004"/><text x="81.6006%" y="271.50"></text></g><g><title>__rdl_dealloc (657 samples, 0.01%)</title><rect x="81.6939%" y="245" width="0.0104%" height="15" fill="rgb(231,81,3)" fg:x="5166474" fg:w="657"/><text x="81.9439%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (9,457 samples, 0.15%)</title><rect x="81.7043%" y="245" width="0.1495%" height="15" fill="rgb(245,181,7)" fg:x="5167131" fg:w="9457"/><text x="81.9543%" y="255.50"></text></g><g><title>__rdl_dealloc (3,670 samples, 0.06%)</title><rect x="81.7958%" y="229" width="0.0580%" height="15" fill="rgb(223,86,3)" fg:x="5172918" fg:w="3670"/><text x="82.0458%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (83,007 samples, 1.31%)</title><rect x="81.8538%" y="245" width="1.3125%" height="15" fill="rgb(224,17,34)" fg:x="5176588" fg:w="83007"/><text x="82.1038%" y="255.50"></text></g><g><title>__rdl_dealloc (9,448 samples, 0.15%)</title><rect x="83.0170%" y="229" width="0.1494%" height="15" fill="rgb(205,127,30)" fg:x="5250147" fg:w="9448"/><text x="83.2670%" y="239.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (128,969 samples, 2.04%)</title><rect x="81.6036%" y="261" width="2.0393%" height="15" fill="rgb(219,35,42)" fg:x="5160765" fg:w="128969"/><text x="81.8536%" y="271.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (30,139 samples, 0.48%)</title><rect x="83.1664%" y="245" width="0.4766%" height="15" fill="rgb(229,34,46)" fg:x="5259595" fg:w="30139"/><text x="83.4164%" y="255.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (771 samples, 0.01%)</title><rect x="83.6611%" y="213" width="0.0122%" height="15" fill="rgb(249,92,46)" fg:x="5290882" fg:w="771"/><text x="83.9111%" y="223.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (2,014 samples, 0.03%)</title><rect x="83.6826%" y="197" width="0.0318%" height="15" fill="rgb(229,152,17)" fg:x="5292244" fg:w="2014"/><text x="83.9326%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1,394 samples, 0.02%)</title><rect x="83.6924%" y="181" width="0.0220%" height="15" fill="rgb(213,194,44)" fg:x="5292864" fg:w="1394"/><text x="83.9424%" y="191.50"></text></g><g><title>std::io::Write::write_all (928 samples, 0.01%)</title><rect x="83.6998%" y="165" width="0.0147%" height="15" fill="rgb(228,91,47)" fg:x="5293330" fg:w="928"/><text x="83.9498%" y="175.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (3,809 samples, 0.06%)</title><rect x="83.6748%" y="213" width="0.0602%" height="15" fill="rgb(220,173,22)" fg:x="5291749" fg:w="3809"/><text x="83.9248%" y="223.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (1,138 samples, 0.02%)</title><rect x="83.7170%" y="197" width="0.0180%" height="15" fill="rgb(233,21,26)" fg:x="5294420" fg:w="1138"/><text x="83.9670%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (5,801 samples, 0.09%)</title><rect x="83.6485%" y="245" width="0.0917%" height="15" fill="rgb(251,194,22)" fg:x="5290086" fg:w="5801"/><text x="83.8985%" y="255.50"></text></g><g><title>core::fmt::write (5,573 samples, 0.09%)</title><rect x="83.6521%" y="229" width="0.0881%" height="15" fill="rgb(224,174,6)" fg:x="5290314" fg:w="5573"/><text x="83.9021%" y="239.50"></text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (6,224 samples, 0.10%)</title><rect x="83.6431%" y="261" width="0.0984%" height="15" fill="rgb(232,37,41)" fg:x="5289745" fg:w="6224"/><text x="83.8931%" y="271.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (5,028,117 samples, 79.51%)</title><rect x="4.2379%" y="277" width="79.5062%" height="15" fill="rgb(213,224,17)" fg:x="268014" fg:w="5028117"/><text x="4.4879%" y="287.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8,969 samples, 0.14%)</title><rect x="83.7441%" y="277" width="0.1418%" height="15" fill="rgb(220,59,48)" fg:x="5296132" fg:w="8969"/><text x="83.9941%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,051 samples, 0.02%)</title><rect x="83.8866%" y="261" width="0.0166%" height="15" fill="rgb(218,139,32)" fg:x="5305147" fg:w="1051"/><text x="84.1366%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,101 samples, 0.02%)</title><rect x="83.8859%" y="277" width="0.0174%" height="15" fill="rgb(207,78,40)" fg:x="5305101" fg:w="1101"/><text x="84.1359%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (841,667 samples, 13.31%)</title><rect x="83.9037%" y="261" width="13.3087%" height="15" fill="rgb(231,194,50)" fg:x="5306223" fg:w="841667"/><text x="84.1537%" y="271.50">&lt;alloc::vec::into_it..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (317,171 samples, 5.02%)</title><rect x="92.1971%" y="245" width="5.0152%" height="15" fill="rgb(241,20,21)" fg:x="5830719" fg:w="317171"/><text x="92.4471%" y="255.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (40,320 samples, 0.64%)</title><rect x="96.5748%" y="229" width="0.6376%" height="15" fill="rgb(237,40,21)" fg:x="6107570" fg:w="40320"/><text x="96.8248%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9,251 samples, 0.15%)</title><rect x="97.0661%" y="213" width="0.1463%" height="15" fill="rgb(248,218,12)" fg:x="6138639" fg:w="9251"/><text x="97.3161%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (841,716 samples, 13.31%)</title><rect x="83.9033%" y="277" width="13.3095%" height="15" fill="rgb(247,4,14)" fg:x="5306202" fg:w="841716"/><text x="84.1533%" y="287.50">&lt;std::collections::h..</text></g><g><title>__rdl_alloc (4,336 samples, 0.07%)</title><rect x="97.2129%" y="277" width="0.0686%" height="15" fill="rgb(232,148,34)" fg:x="6147922" fg:w="4336"/><text x="97.4629%" y="287.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (657 samples, 0.01%)</title><rect x="97.2875%" y="245" width="0.0104%" height="15" fill="rgb(218,70,31)" fg:x="6152645" fg:w="657"/><text x="97.5375%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,119 samples, 0.02%)</title><rect x="97.2834%" y="261" width="0.0177%" height="15" fill="rgb(248,39,23)" fg:x="6152383" fg:w="1119"/><text x="97.5334%" y="271.50"></text></g><g><title>&lt;std::io::Lines&lt;B&gt; as core::iter::traits::iterator::Iterator&gt;::next (702 samples, 0.01%)</title><rect x="97.3011%" y="261" width="0.0111%" height="15" fill="rgb(238,65,29)" fg:x="6153502" fg:w="702"/><text x="97.5511%" y="271.50"></text></g><g><title>std::io::append_to_string (660 samples, 0.01%)</title><rect x="97.3018%" y="245" width="0.0104%" height="15" fill="rgb(235,87,18)" fg:x="6153544" fg:w="660"/><text x="97.5518%" y="255.50"></text></g><g><title>absim::graph_utils::SimulationGraph::new (2,091 samples, 0.03%)</title><rect x="97.2818%" y="277" width="0.0331%" height="15" fill="rgb(222,66,50)" fg:x="6152284" fg:w="2091"/><text x="97.5318%" y="287.50"></text></g><g><title>__rdl_dealloc (7,138 samples, 0.11%)</title><rect x="97.4514%" y="245" width="0.1129%" height="15" fill="rgb(244,17,46)" fg:x="6163008" fg:w="7138"/><text x="97.7014%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (15,228 samples, 0.24%)</title><rect x="97.3302%" y="261" width="0.2408%" height="15" fill="rgb(212,79,35)" fg:x="6155342" fg:w="15228"/><text x="97.5802%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91,412 samples, 1.45%)</title><rect x="97.5713%" y="245" width="1.4454%" height="15" fill="rgb(222,225,35)" fg:x="6170589" fg:w="91412"/><text x="97.8213%" y="255.50"></text></g><g><title>__rdl_dealloc (1,907 samples, 0.03%)</title><rect x="98.9866%" y="229" width="0.0302%" height="15" fill="rgb(220,102,12)" fg:x="6260094" fg:w="1907"/><text x="99.2366%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (106,898 samples, 1.69%)</title><rect x="97.3268%" y="277" width="1.6903%" height="15" fill="rgb(226,15,40)" fg:x="6155129" fg:w="106898"/><text x="97.5768%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (91,451 samples, 1.45%)</title><rect x="97.5711%" y="261" width="1.4461%" height="15" fill="rgb(254,0,27)" fg:x="6170576" fg:w="91451"/><text x="97.8211%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (6,871 samples, 0.11%)</title><rect x="99.0171%" y="277" width="0.1086%" height="15" fill="rgb(253,136,32)" fg:x="6262027" fg:w="6871"/><text x="99.2671%" y="287.50"></text></g><g><title>__rdl_dealloc (2,188 samples, 0.03%)</title><rect x="99.0912%" y="261" width="0.0346%" height="15" fill="rgb(248,136,5)" fg:x="6266710" fg:w="2188"/><text x="99.3412%" y="271.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (4,671 samples, 0.07%)</title><rect x="99.2027%" y="181" width="0.0739%" height="15" fill="rgb(244,8,14)" fg:x="6273761" fg:w="4671"/><text x="99.4527%" y="191.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (4,173 samples, 0.07%)</title><rect x="99.2105%" y="165" width="0.0660%" height="15" fill="rgb(219,88,36)" fg:x="6274259" fg:w="4173"/><text x="99.4605%" y="175.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1,395 samples, 0.02%)</title><rect x="99.3427%" y="101" width="0.0221%" height="15" fill="rgb(210,212,23)" fg:x="6282619" fg:w="1395"/><text x="99.5927%" y="111.50"></text></g><g><title>rustc_demangle::legacy::demangle (5,588 samples, 0.09%)</title><rect x="99.3648%" y="101" width="0.0884%" height="15" fill="rgb(239,22,1)" fg:x="6284014" fg:w="5588"/><text x="99.6148%" y="111.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (10,022 samples, 0.16%)</title><rect x="99.2952%" y="149" width="0.1585%" height="15" fill="rgb(242,204,43)" fg:x="6279612" fg:w="10022"/><text x="99.5452%" y="159.50"></text></g><g><title>rustc_demangle::try_demangle (9,617 samples, 0.15%)</title><rect x="99.3016%" y="133" width="0.1521%" height="15" fill="rgb(252,60,35)" fg:x="6280017" fg:w="9617"/><text x="99.5516%" y="143.50"></text></g><g><title>rustc_demangle::demangle (9,121 samples, 0.14%)</title><rect x="99.3094%" y="117" width="0.1442%" height="15" fill="rgb(219,197,31)" fg:x="6280513" fg:w="9121"/><text x="99.5594%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3,292 samples, 0.05%)</title><rect x="99.5958%" y="69" width="0.0521%" height="15" fill="rgb(242,35,35)" fg:x="6298622" fg:w="3292"/><text x="99.8458%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1,682 samples, 0.03%)</title><rect x="99.6212%" y="53" width="0.0266%" height="15" fill="rgb(243,221,24)" fg:x="6300232" fg:w="1682"/><text x="99.8712%" y="63.50"></text></g><g><title>alloc::raw_vec::finish_grow (938 samples, 0.01%)</title><rect x="99.6330%" y="37" width="0.0148%" height="15" fill="rgb(221,162,41)" fg:x="6300976" fg:w="938"/><text x="99.8830%" y="47.50"></text></g><g><title>&lt;core::fmt::Formatter as core::fmt::Write&gt;::write_str (1,943 samples, 0.03%)</title><rect x="99.6485%" y="69" width="0.0307%" height="15" fill="rgb(241,199,15)" fg:x="6301954" fg:w="1943"/><text x="99.8985%" y="79.50"></text></g><g><title>alloc::fmt::format::format_inner (15,438 samples, 0.24%)</title><rect x="99.4537%" y="149" width="0.2441%" height="15" fill="rgb(219,143,43)" fg:x="6289634" fg:w="15438"/><text x="99.7037%" y="159.50"></text></g><g><title>core::fmt::write (15,164 samples, 0.24%)</title><rect x="99.4580%" y="133" width="0.2398%" height="15" fill="rgb(224,77,11)" fg:x="6289908" fg:w="15164"/><text x="99.7080%" y="143.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (14,777 samples, 0.23%)</title><rect x="99.4641%" y="117" width="0.2337%" height="15" fill="rgb(252,134,47)" fg:x="6290295" fg:w="14777"/><text x="99.7141%" y="127.50"></text></g><g><title>core::fmt::write (14,273 samples, 0.23%)</title><rect x="99.4721%" y="101" width="0.2257%" height="15" fill="rgb(238,138,31)" fg:x="6290799" fg:w="14273"/><text x="99.7221%" y="111.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (13,510 samples, 0.21%)</title><rect x="99.4841%" y="85" width="0.2136%" height="15" fill="rgb(230,118,52)" fg:x="6291562" fg:w="13510"/><text x="99.7341%" y="95.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (41,883 samples, 0.66%)</title><rect x="99.1582%" y="213" width="0.6623%" height="15" fill="rgb(217,98,1)" fg:x="6270946" fg:w="41883"/><text x="99.4082%" y="223.50"></text></g><g><title>pprof::frames::Symbol::name (40,894 samples, 0.65%)</title><rect x="99.1738%" y="197" width="0.6466%" height="15" fill="rgb(248,44,51)" fg:x="6271935" fg:w="40894"/><text x="99.4238%" y="207.50"></text></g><g><title>symbolic_demangle::demangle (34,397 samples, 0.54%)</title><rect x="99.2765%" y="181" width="0.5439%" height="15" fill="rgb(223,161,23)" fg:x="6278432" fg:w="34397"/><text x="99.5265%" y="191.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (33,824 samples, 0.53%)</title><rect x="99.2856%" y="165" width="0.5348%" height="15" fill="rgb(242,105,2)" fg:x="6279005" fg:w="33824"/><text x="99.5356%" y="175.50"></text></g><g><title>rustc_demangle::try_demangle (7,757 samples, 0.12%)</title><rect x="99.6978%" y="149" width="0.1227%" height="15" fill="rgb(212,5,31)" fg:x="6305072" fg:w="7757"/><text x="99.9478%" y="159.50"></text></g><g><title>rustc_demangle::demangle (7,146 samples, 0.11%)</title><rect x="99.7074%" y="133" width="0.1130%" height="15" fill="rgb(214,188,2)" fg:x="6305683" fg:w="7146"/><text x="99.9574%" y="143.50"></text></g><g><title>rustc_demangle::legacy::demangle (5,118 samples, 0.08%)</title><rect x="99.7395%" y="117" width="0.0809%" height="15" fill="rgb(240,153,29)" fg:x="6307711" fg:w="5118"/><text x="99.9895%" y="127.50"></text></g><g><title>core::fmt::write (42,970 samples, 0.68%)</title><rect x="99.1433%" y="229" width="0.6795%" height="15" fill="rgb(206,86,34)" fg:x="6270007" fg:w="42970"/><text x="99.3933%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43,899 samples, 0.69%)</title><rect x="99.1295%" y="261" width="0.6941%" height="15" fill="rgb(224,209,10)" fg:x="6269131" fg:w="43899"/><text x="99.3795%" y="271.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (43,847 samples, 0.69%)</title><rect x="99.1303%" y="245" width="0.6933%" height="15" fill="rgb(250,162,1)" fg:x="6269183" fg:w="43847"/><text x="99.3803%" y="255.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (636 samples, 0.01%)</title><rect x="99.8382%" y="213" width="0.0101%" height="15" fill="rgb(253,207,19)" fg:x="6313951" fg:w="636"/><text x="100.0882%" y="223.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1,025 samples, 0.02%)</title><rect x="99.8346%" y="229" width="0.0162%" height="15" fill="rgb(245,14,6)" fg:x="6313728" fg:w="1025"/><text x="100.0846%" y="239.50"></text></g><g><title>core::fmt::write (1,292 samples, 0.02%)</title><rect x="99.8316%" y="245" width="0.0204%" height="15" fill="rgb(240,55,51)" fg:x="6313536" fg:w="1292"/><text x="100.0816%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,279 samples, 0.05%)</title><rect x="99.8662%" y="213" width="0.0518%" height="15" fill="rgb(212,58,32)" fg:x="6315722" fg:w="3279"/><text x="100.1162%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1,621 samples, 0.03%)</title><rect x="99.8924%" y="197" width="0.0256%" height="15" fill="rgb(209,110,21)" fg:x="6317380" fg:w="1621"/><text x="100.1424%" y="207.50"></text></g><g><title>inferno::flamegraph::merge::flow (4,315 samples, 0.07%)</title><rect x="99.8596%" y="229" width="0.0682%" height="15" fill="rgb(242,46,28)" fg:x="6315305" fg:w="4315"/><text x="100.1096%" y="239.50"></text></g><g><title>inferno::flamegraph::merge::frames (5,132 samples, 0.08%)</title><rect x="99.8571%" y="245" width="0.0811%" height="15" fill="rgb(251,9,13)" fg:x="6315151" fg:w="5132"/><text x="100.1071%" y="255.50"></text></g><g><title>inferno::flamegraph::merge::parse_nsamples (663 samples, 0.01%)</title><rect x="99.9278%" y="229" width="0.0105%" height="15" fill="rgb(243,67,51)" fg:x="6319620" fg:w="663"/><text x="100.1778%" y="239.50"></text></g><g><title>core::fmt::write (816 samples, 0.01%)</title><rect x="99.9421%" y="229" width="0.0129%" height="15" fill="rgb(228,102,3)" fg:x="6320524" fg:w="816"/><text x="100.1921%" y="239.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (769 samples, 0.01%)</title><rect x="99.9428%" y="213" width="0.0122%" height="15" fill="rgb(243,144,14)" fg:x="6320571" fg:w="769"/><text x="100.1928%" y="223.50"></text></g><g><title>inferno::flamegraph::svg::write_str (1,369 samples, 0.02%)</title><rect x="99.9404%" y="245" width="0.0216%" height="15" fill="rgb(233,140,10)" fg:x="6320414" fg:w="1369"/><text x="100.1904%" y="255.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (54,095 samples, 0.86%)</title><rect x="99.1294%" y="277" width="0.8554%" height="15" fill="rgb(216,39,34)" fg:x="6269129" fg:w="54095"/><text x="99.3794%" y="287.50"></text></g><g><title>inferno::flamegraph::from_lines (10,181 samples, 0.16%)</title><rect x="99.8238%" y="261" width="0.1610%" height="15" fill="rgb(217,199,5)" fg:x="6313043" fg:w="10181"/><text x="100.0738%" y="271.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (926 samples, 0.01%)</title><rect x="99.9701%" y="245" width="0.0146%" height="15" fill="rgb(221,190,47)" fg:x="6322298" fg:w="926"/><text x="100.2201%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (652 samples, 0.01%)</title><rect x="99.9861%" y="277" width="0.0103%" height="15" fill="rgb(233,30,8)" fg:x="6323304" fg:w="652"/><text x="100.2361%" y="287.50"></text></g><g><title>all (6,324,186 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(214,177,39)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="463.50"></text></g><g><title>briolette-sim (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(229,43,7)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="447.50">briolette-sim</text></g><g><title>_start (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(220,166,33)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="431.50">_start</text></g><g><title>__libc_start_main_impl (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(230,96,9)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="415.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(224,77,31)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="399.50">__libc_start_call_main</text></g><g><title>main (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(231,131,0)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="383.50">main</text></g><g><title>std::rt::lang_start_internal (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(217,153,34)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="367.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(247,77,0)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="351.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,53,14)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="335.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(226,90,38)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="319.50">briolette_sim::main</text></g><g><title>briolette_sim::run_experiments (6,324,186 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(254,213,25)" fg:x="0" fg:w="6324186"/><text x="0.2500%" y="303.50">briolette_sim::run_experiments</text></g></svg></svg>