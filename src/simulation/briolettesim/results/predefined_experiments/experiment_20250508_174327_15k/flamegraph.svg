<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="129134"><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (4,226 samples, 3.27%)</title><rect x="7.1445%" y="165" width="3.2726%" height="15" fill="rgb(221,121,27)" fg:x="9226" fg:w="4226"/><text x="7.3945%" y="175.50">&lt;ab..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (4,226 samples, 3.27%)</title><rect x="7.1445%" y="149" width="3.2726%" height="15" fill="rgb(247,70,47)" fg:x="9226" fg:w="4226"/><text x="7.3945%" y="159.50">&lt;br..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (4,226 samples, 3.27%)</title><rect x="7.1445%" y="133" width="3.2726%" height="15" fill="rgb(228,85,35)" fg:x="9226" fg:w="4226"/><text x="7.3945%" y="143.50">&lt;br..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4,223 samples, 3.27%)</title><rect x="7.1468%" y="117" width="3.2702%" height="15" fill="rgb(209,50,18)" fg:x="9229" fg:w="4223"/><text x="7.3968%" y="127.50">&lt;al..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (853 samples, 0.66%)</title><rect x="9.7565%" y="101" width="0.6606%" height="15" fill="rgb(250,19,35)" fg:x="12599" fg:w="853"/><text x="10.0065%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="12.2307%" y="53" width="0.0248%" height="15" fill="rgb(253,107,29)" fg:x="15794" fg:w="32"/><text x="12.4807%" y="63.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (438 samples, 0.34%)</title><rect x="11.9171%" y="117" width="0.3392%" height="15" fill="rgb(252,179,29)" fg:x="15389" fg:w="438"/><text x="12.1671%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (405 samples, 0.31%)</title><rect x="11.9426%" y="101" width="0.3136%" height="15" fill="rgb(238,194,6)" fg:x="15422" fg:w="405"/><text x="12.1926%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (355 samples, 0.27%)</title><rect x="11.9814%" y="85" width="0.2749%" height="15" fill="rgb(238,164,29)" fg:x="15472" fg:w="355"/><text x="12.2314%" y="95.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (119 samples, 0.09%)</title><rect x="12.1641%" y="69" width="0.0922%" height="15" fill="rgb(224,25,9)" fg:x="15708" fg:w="119"/><text x="12.4141%" y="79.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (304 samples, 0.24%)</title><rect x="12.2563%" y="117" width="0.2354%" height="15" fill="rgb(244,153,23)" fg:x="15827" fg:w="304"/><text x="12.5063%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (257 samples, 0.20%)</title><rect x="12.2927%" y="101" width="0.1990%" height="15" fill="rgb(212,203,14)" fg:x="15874" fg:w="257"/><text x="12.5427%" y="111.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (128 samples, 0.10%)</title><rect x="12.3926%" y="85" width="0.0991%" height="15" fill="rgb(220,164,20)" fg:x="16003" fg:w="128"/><text x="12.6426%" y="95.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (139 samples, 0.11%)</title><rect x="12.4917%" y="117" width="0.1076%" height="15" fill="rgb(222,203,48)" fg:x="16131" fg:w="139"/><text x="12.7417%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (48 samples, 0.04%)</title><rect x="12.5621%" y="101" width="0.0372%" height="15" fill="rgb(215,159,22)" fg:x="16222" fg:w="48"/><text x="12.8121%" y="111.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (59 samples, 0.05%)</title><rect x="12.5993%" y="117" width="0.0457%" height="15" fill="rgb(216,183,47)" fg:x="16270" fg:w="59"/><text x="12.8493%" y="127.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (805 samples, 0.62%)</title><rect x="13.9212%" y="101" width="0.6234%" height="15" fill="rgb(229,195,25)" fg:x="17977" fg:w="805"/><text x="14.1712%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (783 samples, 0.61%)</title><rect x="13.9382%" y="85" width="0.6063%" height="15" fill="rgb(224,132,51)" fg:x="17999" fg:w="783"/><text x="14.1882%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (565 samples, 0.44%)</title><rect x="14.1071%" y="69" width="0.4375%" height="15" fill="rgb(240,63,7)" fg:x="18217" fg:w="565"/><text x="14.3571%" y="79.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (178 samples, 0.14%)</title><rect x="14.4067%" y="53" width="0.1378%" height="15" fill="rgb(249,182,41)" fg:x="18604" fg:w="178"/><text x="14.6567%" y="63.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (49 samples, 0.04%)</title><rect x="14.5066%" y="37" width="0.0379%" height="15" fill="rgb(243,47,26)" fg:x="18733" fg:w="49"/><text x="14.7566%" y="47.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (43 samples, 0.03%)</title><rect x="14.5446%" y="101" width="0.0333%" height="15" fill="rgb(233,48,2)" fg:x="18782" fg:w="43"/><text x="14.7946%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (382 samples, 0.30%)</title><rect x="14.5810%" y="101" width="0.2958%" height="15" fill="rgb(244,165,34)" fg:x="18829" fg:w="382"/><text x="14.8310%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (208 samples, 0.16%)</title><rect x="14.7157%" y="85" width="0.1611%" height="15" fill="rgb(207,89,7)" fg:x="19003" fg:w="208"/><text x="14.9657%" y="95.50"></text></g><g><title>__rdl_realloc (61 samples, 0.05%)</title><rect x="14.8296%" y="69" width="0.0472%" height="15" fill="rgb(244,117,36)" fg:x="19150" fg:w="61"/><text x="15.0796%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (88 samples, 0.07%)</title><rect x="14.8768%" y="101" width="0.0681%" height="15" fill="rgb(226,144,34)" fg:x="19211" fg:w="88"/><text x="15.1268%" y="111.50"></text></g><g><title>__rdl_dealloc (40 samples, 0.03%)</title><rect x="14.9140%" y="85" width="0.0310%" height="15" fill="rgb(213,23,19)" fg:x="19259" fg:w="40"/><text x="15.1640%" y="95.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (3,024 samples, 2.34%)</title><rect x="12.6473%" y="117" width="2.3418%" height="15" fill="rgb(217,75,12)" fg:x="16332" fg:w="3024"/><text x="12.8973%" y="127.50">b..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (47 samples, 0.04%)</title><rect x="14.9527%" y="101" width="0.0364%" height="15" fill="rgb(224,159,17)" fg:x="19309" fg:w="47"/><text x="15.2027%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (26 samples, 0.02%)</title><rect x="14.9937%" y="117" width="0.0201%" height="15" fill="rgb(217,118,1)" fg:x="19362" fg:w="26"/><text x="15.2437%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (21 samples, 0.02%)</title><rect x="15.0139%" y="117" width="0.0163%" height="15" fill="rgb(232,180,48)" fg:x="19388" fg:w="21"/><text x="15.2639%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (53 samples, 0.04%)</title><rect x="15.0301%" y="117" width="0.0410%" height="15" fill="rgb(230,27,33)" fg:x="19409" fg:w="53"/><text x="15.2801%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.02%)</title><rect x="15.0487%" y="101" width="0.0225%" height="15" fill="rgb(205,31,21)" fg:x="19433" fg:w="29"/><text x="15.2987%" y="111.50"></text></g><g><title>rand::rng::Rng::gen_range (21 samples, 0.02%)</title><rect x="15.0712%" y="117" width="0.0163%" height="15" fill="rgb(253,59,4)" fg:x="19462" fg:w="21"/><text x="15.3212%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide (16 samples, 0.01%)</title><rect x="18.0812%" y="101" width="0.0124%" height="15" fill="rgb(224,201,9)" fg:x="23349" fg:w="16"/><text x="18.3312%" y="111.50"></text></g><g><title>rand::seq::IteratorRandom::choose (4,553 samples, 3.53%)</title><rect x="15.0874%" y="117" width="3.5258%" height="15" fill="rgb(229,206,30)" fg:x="19483" fg:w="4553"/><text x="15.3374%" y="127.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (671 samples, 0.52%)</title><rect x="18.0936%" y="101" width="0.5196%" height="15" fill="rgb(212,67,47)" fg:x="23365" fg:w="671"/><text x="18.3436%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (9,391 samples, 7.27%)</title><rect x="11.3750%" y="133" width="7.2723%" height="15" fill="rgb(211,96,50)" fg:x="14689" fg:w="9391"/><text x="11.6250%" y="143.50">&lt;briolette..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (44 samples, 0.03%)</title><rect x="18.6132%" y="117" width="0.0341%" height="15" fill="rgb(252,114,18)" fg:x="24036" fg:w="44"/><text x="18.8632%" y="127.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (9,456 samples, 7.32%)</title><rect x="11.3316%" y="149" width="7.3226%" height="15" fill="rgb(223,58,37)" fg:x="14633" fg:w="9456"/><text x="11.5816%" y="159.50">&lt;absim::cl..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="58.9837%" y="117" width="0.0132%" height="15" fill="rgb(237,70,4)" fg:x="76168" fg:w="17"/><text x="59.2337%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (167 samples, 0.13%)</title><rect x="58.8683%" y="133" width="0.1293%" height="15" fill="rgb(244,85,46)" fg:x="76019" fg:w="167"/><text x="59.1183%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (23 samples, 0.02%)</title><rect x="59.2772%" y="117" width="0.0178%" height="15" fill="rgb(223,39,52)" fg:x="76547" fg:w="23"/><text x="59.5272%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (37 samples, 0.03%)</title><rect x="59.6652%" y="101" width="0.0287%" height="15" fill="rgb(218,200,14)" fg:x="77048" fg:w="37"/><text x="59.9152%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (900 samples, 0.70%)</title><rect x="58.9976%" y="133" width="0.6970%" height="15" fill="rgb(208,171,16)" fg:x="76186" fg:w="900"/><text x="59.2476%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (516 samples, 0.40%)</title><rect x="59.2950%" y="117" width="0.3996%" height="15" fill="rgb(234,200,18)" fg:x="76570" fg:w="516"/><text x="59.5450%" y="127.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (182 samples, 0.14%)</title><rect x="59.6946%" y="133" width="0.1409%" height="15" fill="rgb(228,45,11)" fg:x="77086" fg:w="182"/><text x="59.9446%" y="143.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.01%)</title><rect x="59.8355%" y="133" width="0.0139%" height="15" fill="rgb(237,182,11)" fg:x="77268" fg:w="18"/><text x="60.0855%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (138 samples, 0.11%)</title><rect x="59.8495%" y="133" width="0.1069%" height="15" fill="rgb(241,175,49)" fg:x="77286" fg:w="138"/><text x="60.0995%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (70 samples, 0.05%)</title><rect x="59.9021%" y="117" width="0.0542%" height="15" fill="rgb(247,38,35)" fg:x="77354" fg:w="70"/><text x="60.1521%" y="127.50"></text></g><g><title>__rdl_realloc (22 samples, 0.02%)</title><rect x="59.9393%" y="101" width="0.0170%" height="15" fill="rgb(228,39,49)" fg:x="77402" fg:w="22"/><text x="60.1893%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (59 samples, 0.05%)</title><rect x="59.9625%" y="133" width="0.0457%" height="15" fill="rgb(226,101,26)" fg:x="77432" fg:w="59"/><text x="60.2125%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (43 samples, 0.03%)</title><rect x="60.0082%" y="133" width="0.0333%" height="15" fill="rgb(206,141,19)" fg:x="77491" fg:w="43"/><text x="60.2582%" y="143.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.01%)</title><rect x="60.0291%" y="117" width="0.0124%" height="15" fill="rgb(211,200,13)" fg:x="77518" fg:w="16"/><text x="60.2791%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (50 samples, 0.04%)</title><rect x="60.0469%" y="133" width="0.0387%" height="15" fill="rgb(241,121,6)" fg:x="77541" fg:w="50"/><text x="60.2969%" y="143.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (53,526 samples, 41.45%)</title><rect x="18.6543%" y="149" width="41.4500%" height="15" fill="rgb(234,221,29)" fg:x="24089" fg:w="53526"/><text x="18.9043%" y="159.50">&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (22 samples, 0.02%)</title><rect x="60.0872%" y="133" width="0.0170%" height="15" fill="rgb(229,136,5)" fg:x="77593" fg:w="22"/><text x="60.3372%" y="143.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (6,258 samples, 4.85%)</title><rect x="60.1073%" y="133" width="4.8461%" height="15" fill="rgb(238,36,11)" fg:x="77619" fg:w="6258"/><text x="60.3573%" y="143.50">&lt;briol..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,257 samples, 4.85%)</title><rect x="60.1081%" y="117" width="4.8454%" height="15" fill="rgb(251,55,41)" fg:x="77620" fg:w="6257"/><text x="60.3581%" y="127.50">&lt;alloc..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (898 samples, 0.70%)</title><rect x="64.2581%" y="101" width="0.6954%" height="15" fill="rgb(242,34,40)" fg:x="82979" fg:w="898"/><text x="64.5081%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (6,272 samples, 4.86%)</title><rect x="60.1042%" y="149" width="4.8570%" height="15" fill="rgb(215,42,17)" fg:x="77615" fg:w="6272"/><text x="60.3542%" y="159.50">&lt;briol..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (60 samples, 0.05%)</title><rect x="66.7826%" y="133" width="0.0465%" height="15" fill="rgb(207,44,46)" fg:x="86239" fg:w="60"/><text x="67.0326%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (64 samples, 0.05%)</title><rect x="66.8329%" y="133" width="0.0496%" height="15" fill="rgb(211,206,28)" fg:x="86304" fg:w="64"/><text x="67.0829%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.02%)</title><rect x="66.8639%" y="117" width="0.0186%" height="15" fill="rgb(237,167,16)" fg:x="86344" fg:w="24"/><text x="67.1139%" y="127.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (2,556 samples, 1.98%)</title><rect x="64.9612%" y="149" width="1.9793%" height="15" fill="rgb(233,66,6)" fg:x="83887" fg:w="2556"/><text x="65.2112%" y="159.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (75 samples, 0.06%)</title><rect x="66.8825%" y="133" width="0.0581%" height="15" fill="rgb(246,123,29)" fg:x="86368" fg:w="75"/><text x="67.1325%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (53 samples, 0.04%)</title><rect x="66.8995%" y="117" width="0.0410%" height="15" fill="rgb(209,62,40)" fg:x="86390" fg:w="53"/><text x="67.1495%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.01%)</title><rect x="66.9274%" y="101" width="0.0132%" height="15" fill="rgb(218,4,25)" fg:x="86426" fg:w="17"/><text x="67.1774%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (45 samples, 0.03%)</title><rect x="67.4764%" y="117" width="0.0348%" height="15" fill="rgb(253,91,49)" fg:x="87135" fg:w="45"/><text x="67.7264%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.01%)</title><rect x="67.4989%" y="101" width="0.0124%" height="15" fill="rgb(228,155,29)" fg:x="87164" fg:w="16"/><text x="67.7489%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (838 samples, 0.65%)</title><rect x="66.9405%" y="149" width="0.6489%" height="15" fill="rgb(243,57,37)" fg:x="86443" fg:w="838"/><text x="67.1905%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (192 samples, 0.15%)</title><rect x="67.4408%" y="133" width="0.1487%" height="15" fill="rgb(244,167,17)" fg:x="87089" fg:w="192"/><text x="67.6908%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (101 samples, 0.08%)</title><rect x="67.5113%" y="117" width="0.0782%" height="15" fill="rgb(207,181,38)" fg:x="87180" fg:w="101"/><text x="67.7613%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (40 samples, 0.03%)</title><rect x="67.5585%" y="101" width="0.0310%" height="15" fill="rgb(211,8,23)" fg:x="87241" fg:w="40"/><text x="67.8085%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (179 samples, 0.14%)</title><rect x="67.6026%" y="133" width="0.1386%" height="15" fill="rgb(235,11,44)" fg:x="87298" fg:w="179"/><text x="67.8526%" y="143.50"></text></g><g><title>__rdl_dealloc (82 samples, 0.06%)</title><rect x="67.6778%" y="117" width="0.0635%" height="15" fill="rgb(248,18,52)" fg:x="87395" fg:w="82"/><text x="67.9278%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (286 samples, 0.22%)</title><rect x="67.7413%" y="133" width="0.2215%" height="15" fill="rgb(208,4,7)" fg:x="87477" fg:w="286"/><text x="67.9913%" y="143.50"></text></g><g><title>__rdl_dealloc (18 samples, 0.01%)</title><rect x="67.9488%" y="117" width="0.0139%" height="15" fill="rgb(240,17,39)" fg:x="87745" fg:w="18"/><text x="68.1988%" y="127.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (765 samples, 0.59%)</title><rect x="67.5918%" y="149" width="0.5924%" height="15" fill="rgb(207,170,3)" fg:x="87284" fg:w="765"/><text x="67.8418%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (286 samples, 0.22%)</title><rect x="67.9627%" y="133" width="0.2215%" height="15" fill="rgb(236,100,52)" fg:x="87763" fg:w="286"/><text x="68.2127%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (41 samples, 0.03%)</title><rect x="68.2438%" y="101" width="0.0317%" height="15" fill="rgb(246,78,51)" fg:x="88126" fg:w="41"/><text x="68.4938%" y="111.50"></text></g><g><title>std::io::Write::write_all (25 samples, 0.02%)</title><rect x="68.2562%" y="85" width="0.0194%" height="15" fill="rgb(211,17,15)" fg:x="88142" fg:w="25"/><text x="68.5062%" y="95.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (16 samples, 0.01%)</title><rect x="68.2632%" y="69" width="0.0124%" height="15" fill="rgb(209,59,46)" fg:x="88151" fg:w="16"/><text x="68.5132%" y="79.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (49 samples, 0.04%)</title><rect x="68.2849%" y="85" width="0.0379%" height="15" fill="rgb(210,92,25)" fg:x="88179" fg:w="49"/><text x="68.5349%" y="95.50"></text></g><g><title>std::io::Write::write_all (33 samples, 0.03%)</title><rect x="68.2973%" y="69" width="0.0256%" height="15" fill="rgb(238,174,52)" fg:x="88195" fg:w="33"/><text x="68.5473%" y="79.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (74,785 samples, 57.91%)</title><rect x="10.4179%" y="165" width="57.9127%" height="15" fill="rgb(230,73,7)" fg:x="13453" fg:w="74785"/><text x="10.6679%" y="175.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (189 samples, 0.15%)</title><rect x="68.1842%" y="149" width="0.1464%" height="15" fill="rgb(243,124,40)" fg:x="88049" fg:w="189"/><text x="68.4342%" y="159.50"></text></g><g><title>std::io::Write::write_fmt (172 samples, 0.13%)</title><rect x="68.1974%" y="133" width="0.1332%" height="15" fill="rgb(244,170,11)" fg:x="88066" fg:w="172"/><text x="68.4474%" y="143.50"></text></g><g><title>core::fmt::write (153 samples, 0.12%)</title><rect x="68.2121%" y="117" width="0.1185%" height="15" fill="rgb(207,114,54)" fg:x="88085" fg:w="153"/><text x="68.4621%" y="127.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for usize&gt;::fmt (70 samples, 0.05%)</title><rect x="68.2764%" y="101" width="0.0542%" height="15" fill="rgb(205,42,20)" fg:x="88168" fg:w="70"/><text x="68.5264%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (217 samples, 0.17%)</title><rect x="68.3306%" y="165" width="0.1680%" height="15" fill="rgb(230,30,28)" fg:x="88238" fg:w="217"/><text x="68.5806%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (210 samples, 0.16%)</title><rect x="68.4986%" y="165" width="0.1626%" height="15" fill="rgb(205,73,54)" fg:x="88455" fg:w="210"/><text x="68.7486%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (38,914 samples, 30.13%)</title><rect x="68.6612%" y="165" width="30.1346%" height="15" fill="rgb(254,227,23)" fg:x="88665" fg:w="38914"/><text x="68.9112%" y="175.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38,914 samples, 30.13%)</title><rect x="68.6612%" y="149" width="30.1346%" height="15" fill="rgb(228,202,34)" fg:x="88665" fg:w="38914"/><text x="68.9112%" y="159.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::it..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23,844 samples, 18.46%)</title><rect x="80.3313%" y="133" width="18.4645%" height="15" fill="rgb(222,225,37)" fg:x="103735" fg:w="23844"/><text x="80.5813%" y="143.50">hashbrown::map::HashMap&lt;K,V,S..</text></g><g><title>core::hash::BuildHasher::hash_one (1,004 samples, 0.78%)</title><rect x="98.0183%" y="117" width="0.7775%" height="15" fill="rgb(221,14,54)" fg:x="126575" fg:w="1004"/><text x="98.2683%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (231 samples, 0.18%)</title><rect x="98.6169%" y="101" width="0.1789%" height="15" fill="rgb(254,102,2)" fg:x="127348" fg:w="231"/><text x="98.8669%" y="111.50"></text></g><g><title>__rdl_alloc (98 samples, 0.08%)</title><rect x="98.7958%" y="165" width="0.0759%" height="15" fill="rgb(232,104,17)" fg:x="127579" fg:w="98"/><text x="99.0458%" y="175.50"></text></g><g><title>__rdl_dealloc (194 samples, 0.15%)</title><rect x="99.0219%" y="133" width="0.1502%" height="15" fill="rgb(250,220,14)" fg:x="127871" fg:w="194"/><text x="99.2719%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (394 samples, 0.31%)</title><rect x="98.8717%" y="149" width="0.3051%" height="15" fill="rgb(241,158,9)" fg:x="127677" fg:w="394"/><text x="99.1217%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (1,300 samples, 1.01%)</title><rect x="98.8717%" y="165" width="1.0067%" height="15" fill="rgb(246,9,43)" fg:x="127677" fg:w="1300"/><text x="99.1217%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (906 samples, 0.70%)</title><rect x="99.1768%" y="149" width="0.7016%" height="15" fill="rgb(206,73,33)" fg:x="128071" fg:w="906"/><text x="99.4268%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (906 samples, 0.70%)</title><rect x="99.1768%" y="133" width="0.7016%" height="15" fill="rgb(222,79,8)" fg:x="128071" fg:w="906"/><text x="99.4268%" y="143.50"></text></g><g><title>__rdl_dealloc (39 samples, 0.03%)</title><rect x="99.8482%" y="117" width="0.0302%" height="15" fill="rgb(234,8,54)" fg:x="128938" fg:w="39"/><text x="100.0982%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (140 samples, 0.11%)</title><rect x="99.8784%" y="165" width="0.1084%" height="15" fill="rgb(209,134,38)" fg:x="128977" fg:w="140"/><text x="100.1284%" y="175.50"></text></g><g><title>__rdl_dealloc (47 samples, 0.04%)</title><rect x="99.9504%" y="149" width="0.0364%" height="15" fill="rgb(230,127,29)" fg:x="129070" fg:w="47"/><text x="100.2004%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.01%)</title><rect x="99.9876%" y="149" width="0.0101%" height="15" fill="rgb(242,44,41)" fg:x="129118" fg:w="13"/><text x="100.2376%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13 samples, 0.01%)</title><rect x="99.9876%" y="133" width="0.0101%" height="15" fill="rgb(222,56,43)" fg:x="129118" fg:w="13"/><text x="100.2376%" y="143.50"></text></g><g><title>core::fmt::write (13 samples, 0.01%)</title><rect x="99.9876%" y="117" width="0.0101%" height="15" fill="rgb(238,39,47)" fg:x="129118" fg:w="13"/><text x="100.2376%" y="127.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (13 samples, 0.01%)</title><rect x="99.9876%" y="101" width="0.0101%" height="15" fill="rgb(226,79,43)" fg:x="129118" fg:w="13"/><text x="100.2376%" y="111.50"></text></g><g><title>pprof::frames::Symbol::name (13 samples, 0.01%)</title><rect x="99.9876%" y="85" width="0.0101%" height="15" fill="rgb(242,105,53)" fg:x="129118" fg:w="13"/><text x="100.2376%" y="95.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (15 samples, 0.01%)</title><rect x="99.9876%" y="165" width="0.0116%" height="15" fill="rgb(251,132,46)" fg:x="129118" fg:w="15"/><text x="100.2376%" y="175.50"></text></g><g><title>all (129,134 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(231,77,14)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="351.50"></text></g><g><title>briolette-sim (129,134 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(240,135,9)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="335.50">briolette-sim</text></g><g><title>_start (129,134 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(248,109,14)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="319.50">_start</text></g><g><title>__libc_start_main_impl (129,134 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(227,146,52)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="303.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (129,134 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(232,54,3)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="287.50">__libc_start_call_main</text></g><g><title>main (129,134 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,201,43)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="271.50">main</text></g><g><title>std::rt::lang_start_internal (129,134 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,161,33)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="255.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (129,134 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(226,146,40)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="239.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (129,134 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,47,25)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="223.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (129,134 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,135,13)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="207.50">briolette_sim::main</text></g><g><title>briolette_sim::run_experiments (129,134 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(219,229,18)" fg:x="0" fg:w="129134"/><text x="0.2500%" y="191.50">briolette_sim::run_experiments</text></g></svg></svg>