<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="370587"><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (8,639 samples, 2.33%)</title><rect x="4.9923%" y="165" width="2.3312%" height="15" fill="rgb(251,179,42)" fg:x="18501" fg:w="8639"/><text x="5.2423%" y="175.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (8,638 samples, 2.33%)</title><rect x="4.9926%" y="149" width="2.3309%" height="15" fill="rgb(208,216,51)" fg:x="18502" fg:w="8638"/><text x="5.2426%" y="159.50">&lt;..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (8,638 samples, 2.33%)</title><rect x="4.9926%" y="133" width="2.3309%" height="15" fill="rgb(235,36,11)" fg:x="18502" fg:w="8638"/><text x="5.2426%" y="143.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8,634 samples, 2.33%)</title><rect x="4.9937%" y="117" width="2.3298%" height="15" fill="rgb(213,189,28)" fg:x="18506" fg:w="8634"/><text x="5.2437%" y="127.50">&lt;..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1,584 samples, 0.43%)</title><rect x="6.8961%" y="101" width="0.4274%" height="15" fill="rgb(227,203,42)" fg:x="25556" fg:w="1584"/><text x="7.1461%" y="111.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (875 samples, 0.24%)</title><rect x="8.4644%" y="117" width="0.2361%" height="15" fill="rgb(244,72,36)" fg:x="31368" fg:w="875"/><text x="8.7144%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (822 samples, 0.22%)</title><rect x="8.4787%" y="101" width="0.2218%" height="15" fill="rgb(213,53,17)" fg:x="31421" fg:w="822"/><text x="8.7287%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (723 samples, 0.20%)</title><rect x="8.5054%" y="85" width="0.1951%" height="15" fill="rgb(207,167,3)" fg:x="31520" fg:w="723"/><text x="8.7554%" y="95.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (240 samples, 0.06%)</title><rect x="8.6358%" y="69" width="0.0648%" height="15" fill="rgb(216,98,30)" fg:x="32003" fg:w="240"/><text x="8.8858%" y="79.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (56 samples, 0.02%)</title><rect x="8.6854%" y="53" width="0.0151%" height="15" fill="rgb(236,123,15)" fg:x="32187" fg:w="56"/><text x="8.9354%" y="63.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (672 samples, 0.18%)</title><rect x="8.7005%" y="117" width="0.1813%" height="15" fill="rgb(248,81,50)" fg:x="32243" fg:w="672"/><text x="8.9505%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (561 samples, 0.15%)</title><rect x="8.7305%" y="101" width="0.1514%" height="15" fill="rgb(214,120,4)" fg:x="32354" fg:w="561"/><text x="8.9805%" y="111.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (306 samples, 0.08%)</title><rect x="8.7993%" y="85" width="0.0826%" height="15" fill="rgb(208,179,34)" fg:x="32609" fg:w="306"/><text x="9.0493%" y="95.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (267 samples, 0.07%)</title><rect x="8.8819%" y="117" width="0.0720%" height="15" fill="rgb(227,140,7)" fg:x="32915" fg:w="267"/><text x="9.1319%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (86 samples, 0.02%)</title><rect x="8.9307%" y="101" width="0.0232%" height="15" fill="rgb(214,22,6)" fg:x="33096" fg:w="86"/><text x="9.1807%" y="111.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (99 samples, 0.03%)</title><rect x="8.9539%" y="117" width="0.0267%" height="15" fill="rgb(207,137,27)" fg:x="33182" fg:w="99"/><text x="9.2039%" y="127.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (350 samples, 0.09%)</title><rect x="10.4202%" y="53" width="0.0944%" height="15" fill="rgb(210,8,46)" fg:x="38616" fg:w="350"/><text x="10.6702%" y="63.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (86 samples, 0.02%)</title><rect x="10.4915%" y="37" width="0.0232%" height="15" fill="rgb(240,16,54)" fg:x="38880" fg:w="86"/><text x="10.7415%" y="47.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (1,475 samples, 0.40%)</title><rect x="10.1220%" y="101" width="0.3980%" height="15" fill="rgb(211,209,29)" fg:x="37511" fg:w="1475"/><text x="10.3720%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (1,417 samples, 0.38%)</title><rect x="10.1377%" y="85" width="0.3824%" height="15" fill="rgb(226,228,24)" fg:x="37569" fg:w="1417"/><text x="10.3877%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,058 samples, 0.29%)</title><rect x="10.2346%" y="69" width="0.2855%" height="15" fill="rgb(222,84,9)" fg:x="37928" fg:w="1058"/><text x="10.4846%" y="79.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (81 samples, 0.02%)</title><rect x="10.5201%" y="101" width="0.0219%" height="15" fill="rgb(234,203,30)" fg:x="38986" fg:w="81"/><text x="10.7701%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (833 samples, 0.22%)</title><rect x="10.5427%" y="101" width="0.2248%" height="15" fill="rgb(238,109,14)" fg:x="39070" fg:w="833"/><text x="10.7927%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (449 samples, 0.12%)</title><rect x="10.6464%" y="85" width="0.1212%" height="15" fill="rgb(233,206,34)" fg:x="39454" fg:w="449"/><text x="10.8964%" y="95.50"></text></g><g><title>__rdl_realloc (135 samples, 0.04%)</title><rect x="10.7311%" y="69" width="0.0364%" height="15" fill="rgb(220,167,47)" fg:x="39768" fg:w="135"/><text x="10.9811%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (158 samples, 0.04%)</title><rect x="10.7675%" y="101" width="0.0426%" height="15" fill="rgb(238,105,10)" fg:x="39903" fg:w="158"/><text x="11.0175%" y="111.50"></text></g><g><title>__rdl_dealloc (66 samples, 0.02%)</title><rect x="10.7923%" y="85" width="0.0178%" height="15" fill="rgb(213,227,17)" fg:x="39995" fg:w="66"/><text x="11.0423%" y="95.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (6,922 samples, 1.87%)</title><rect x="8.9814%" y="117" width="1.8678%" height="15" fill="rgb(217,132,38)" fg:x="33284" fg:w="6922"/><text x="9.2314%" y="127.50">b..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (108 samples, 0.03%)</title><rect x="10.8201%" y="101" width="0.0291%" height="15" fill="rgb(242,146,4)" fg:x="40098" fg:w="108"/><text x="11.0701%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (69 samples, 0.02%)</title><rect x="10.8525%" y="117" width="0.0186%" height="15" fill="rgb(212,61,9)" fg:x="40218" fg:w="69"/><text x="11.1025%" y="127.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (91 samples, 0.02%)</title><rect x="10.8787%" y="117" width="0.0246%" height="15" fill="rgb(247,126,22)" fg:x="40315" fg:w="91"/><text x="11.1287%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (46 samples, 0.01%)</title><rect x="10.8908%" y="101" width="0.0124%" height="15" fill="rgb(220,196,2)" fg:x="40360" fg:w="46"/><text x="11.1408%" y="111.50"></text></g><g><title>rand::rng::Rng::gen_range (52 samples, 0.01%)</title><rect x="10.9032%" y="117" width="0.0140%" height="15" fill="rgb(208,46,4)" fg:x="40406" fg:w="52"/><text x="11.1532%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide (68 samples, 0.02%)</title><rect x="14.9781%" y="101" width="0.0183%" height="15" fill="rgb(252,104,46)" fg:x="55507" fg:w="68"/><text x="15.2281%" y="111.50"></text></g><g><title>rand::seq::IteratorRandom::choose (17,606 samples, 4.75%)</title><rect x="10.9173%" y="117" width="4.7508%" height="15" fill="rgb(237,152,48)" fg:x="40458" fg:w="17606"/><text x="11.1673%" y="127.50">rand::..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2,489 samples, 0.67%)</title><rect x="14.9965%" y="101" width="0.6716%" height="15" fill="rgb(221,59,37)" fg:x="55575" fg:w="2489"/><text x="15.2465%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (28,286 samples, 7.63%)</title><rect x="8.0610%" y="133" width="7.6328%" height="15" fill="rgb(209,202,51)" fg:x="29873" fg:w="28286"/><text x="8.3110%" y="143.50">&lt;briolette..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (95 samples, 0.03%)</title><rect x="15.6681%" y="117" width="0.0256%" height="15" fill="rgb(228,81,30)" fg:x="58064" fg:w="95"/><text x="15.9181%" y="127.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (28,389 samples, 7.66%)</title><rect x="8.0359%" y="149" width="7.6605%" height="15" fill="rgb(227,42,39)" fg:x="29780" fg:w="28389"/><text x="8.2859%" y="159.50">&lt;absim::cl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (337 samples, 0.09%)</title><rect x="67.9125%" y="133" width="0.0909%" height="15" fill="rgb(221,26,2)" fg:x="251675" fg:w="337"/><text x="68.1625%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (39 samples, 0.01%)</title><rect x="68.1999%" y="117" width="0.0105%" height="15" fill="rgb(254,61,31)" fg:x="252740" fg:w="39"/><text x="68.4499%" y="127.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (78 samples, 0.02%)</title><rect x="68.4938%" y="101" width="0.0210%" height="15" fill="rgb(222,173,38)" fg:x="253829" fg:w="78"/><text x="68.7438%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,896 samples, 0.51%)</title><rect x="68.0035%" y="133" width="0.5116%" height="15" fill="rgb(218,50,12)" fg:x="252012" fg:w="1896"/><text x="68.2535%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,129 samples, 0.30%)</title><rect x="68.2104%" y="117" width="0.3047%" height="15" fill="rgb(223,88,40)" fg:x="252779" fg:w="1129"/><text x="68.4604%" y="127.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (235 samples, 0.06%)</title><rect x="68.5151%" y="133" width="0.0634%" height="15" fill="rgb(237,54,19)" fg:x="253908" fg:w="235"/><text x="68.7651%" y="143.50"></text></g><g><title>__rdl_dealloc (48 samples, 0.01%)</title><rect x="68.5796%" y="133" width="0.0130%" height="15" fill="rgb(251,129,25)" fg:x="254147" fg:w="48"/><text x="68.8296%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (269 samples, 0.07%)</title><rect x="68.5925%" y="133" width="0.0726%" height="15" fill="rgb(238,97,19)" fg:x="254195" fg:w="269"/><text x="68.8425%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (144 samples, 0.04%)</title><rect x="68.6263%" y="117" width="0.0389%" height="15" fill="rgb(240,169,18)" fg:x="254320" fg:w="144"/><text x="68.8763%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (111 samples, 0.03%)</title><rect x="68.6700%" y="133" width="0.0300%" height="15" fill="rgb(230,187,49)" fg:x="254482" fg:w="111"/><text x="68.9200%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (83 samples, 0.02%)</title><rect x="68.6999%" y="133" width="0.0224%" height="15" fill="rgb(209,44,26)" fg:x="254593" fg:w="83"/><text x="68.9499%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (91 samples, 0.02%)</title><rect x="68.7245%" y="133" width="0.0246%" height="15" fill="rgb(244,0,6)" fg:x="254684" fg:w="91"/><text x="68.9745%" y="143.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (196,652 samples, 53.07%)</title><rect x="15.6964%" y="149" width="53.0650%" height="15" fill="rgb(248,18,21)" fg:x="58169" fg:w="196652"/><text x="15.9464%" y="159.50">&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (503 samples, 0.14%)</title><rect x="71.9200%" y="85" width="0.1357%" height="15" fill="rgb(245,180,19)" fg:x="266526" fg:w="503"/><text x="72.1700%" y="95.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (12,206 samples, 3.29%)</title><rect x="68.7623%" y="133" width="3.2937%" height="15" fill="rgb(252,118,36)" fg:x="254824" fg:w="12206"/><text x="69.0123%" y="143.50">&lt;br..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12,198 samples, 3.29%)</title><rect x="68.7644%" y="117" width="3.2915%" height="15" fill="rgb(210,224,19)" fg:x="254832" fg:w="12198"/><text x="69.0144%" y="127.50">&lt;al..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1,698 samples, 0.46%)</title><rect x="71.5978%" y="101" width="0.4582%" height="15" fill="rgb(218,30,24)" fg:x="265332" fg:w="1698"/><text x="71.8478%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (12,239 samples, 3.30%)</title><rect x="68.7615%" y="149" width="3.3026%" height="15" fill="rgb(219,75,50)" fg:x="254821" fg:w="12239"/><text x="69.0115%" y="159.50">&lt;br..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (145 samples, 0.04%)</title><rect x="73.4494%" y="133" width="0.0391%" height="15" fill="rgb(234,72,50)" fg:x="272194" fg:w="145"/><text x="73.6994%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (105 samples, 0.03%)</title><rect x="73.4945%" y="133" width="0.0283%" height="15" fill="rgb(219,100,48)" fg:x="272361" fg:w="105"/><text x="73.7445%" y="143.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (5,532 samples, 1.49%)</title><rect x="72.0640%" y="149" width="1.4928%" height="15" fill="rgb(253,5,41)" fg:x="267060" fg:w="5532"/><text x="72.3140%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (126 samples, 0.03%)</title><rect x="73.5228%" y="133" width="0.0340%" height="15" fill="rgb(247,181,11)" fg:x="272466" fg:w="126"/><text x="73.7728%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (61 samples, 0.02%)</title><rect x="73.5404%" y="117" width="0.0165%" height="15" fill="rgb(222,223,25)" fg:x="272531" fg:w="61"/><text x="73.7904%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (82 samples, 0.02%)</title><rect x="73.9403%" y="117" width="0.0221%" height="15" fill="rgb(214,198,28)" fg:x="274013" fg:w="82"/><text x="74.1903%" y="127.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (1,687 samples, 0.46%)</title><rect x="73.5568%" y="149" width="0.4552%" height="15" fill="rgb(230,46,43)" fg:x="272592" fg:w="1687"/><text x="73.8068%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (337 samples, 0.09%)</title><rect x="73.9211%" y="133" width="0.0909%" height="15" fill="rgb(233,65,53)" fg:x="273942" fg:w="337"/><text x="74.1711%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (184 samples, 0.05%)</title><rect x="73.9624%" y="117" width="0.0497%" height="15" fill="rgb(221,121,27)" fg:x="274095" fg:w="184"/><text x="74.2124%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (86 samples, 0.02%)</title><rect x="73.9888%" y="101" width="0.0232%" height="15" fill="rgb(247,70,47)" fg:x="274193" fg:w="86"/><text x="74.2388%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (422 samples, 0.11%)</title><rect x="74.0161%" y="133" width="0.1139%" height="15" fill="rgb(228,85,35)" fg:x="274294" fg:w="422"/><text x="74.2661%" y="143.50"></text></g><g><title>__rdl_dealloc (163 samples, 0.04%)</title><rect x="74.0860%" y="117" width="0.0440%" height="15" fill="rgb(209,50,18)" fg:x="274553" fg:w="163"/><text x="74.3360%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (681 samples, 0.18%)</title><rect x="74.1300%" y="133" width="0.1838%" height="15" fill="rgb(250,19,35)" fg:x="274716" fg:w="681"/><text x="74.3800%" y="143.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (1,644 samples, 0.44%)</title><rect x="74.0120%" y="149" width="0.4436%" height="15" fill="rgb(253,107,29)" fg:x="274279" fg:w="1644"/><text x="74.2620%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (526 samples, 0.14%)</title><rect x="74.3137%" y="133" width="0.1419%" height="15" fill="rgb(252,179,29)" fg:x="275397" fg:w="526"/><text x="74.5637%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (76 samples, 0.02%)</title><rect x="74.4848%" y="101" width="0.0205%" height="15" fill="rgb(238,194,6)" fg:x="276031" fg:w="76"/><text x="74.7348%" y="111.50"></text></g><g><title>std::io::Write::write_all (47 samples, 0.01%)</title><rect x="74.4926%" y="85" width="0.0127%" height="15" fill="rgb(238,164,29)" fg:x="276060" fg:w="47"/><text x="74.7426%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (79 samples, 0.02%)</title><rect x="74.5137%" y="85" width="0.0213%" height="15" fill="rgb(224,25,9)" fg:x="276138" fg:w="79"/><text x="74.7637%" y="95.50"></text></g><g><title>std::io::Write::write_all (51 samples, 0.01%)</title><rect x="74.5212%" y="69" width="0.0138%" height="15" fill="rgb(244,153,23)" fg:x="276166" fg:w="51"/><text x="74.7712%" y="79.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (249,096 samples, 67.22%)</title><rect x="7.3235%" y="165" width="67.2166%" height="15" fill="rgb(212,203,14)" fg:x="27140" fg:w="249096"/><text x="7.5735%" y="175.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (313 samples, 0.08%)</title><rect x="74.4557%" y="149" width="0.0845%" height="15" fill="rgb(220,164,20)" fg:x="275923" fg:w="313"/><text x="74.7057%" y="159.50"></text></g><g><title>std::io::Write::write_fmt (288 samples, 0.08%)</title><rect x="74.4624%" y="133" width="0.0777%" height="15" fill="rgb(222,203,48)" fg:x="275948" fg:w="288"/><text x="74.7124%" y="143.50"></text></g><g><title>core::fmt::write (266 samples, 0.07%)</title><rect x="74.4683%" y="117" width="0.0718%" height="15" fill="rgb(215,159,22)" fg:x="275970" fg:w="266"/><text x="74.7183%" y="127.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (128 samples, 0.03%)</title><rect x="74.5056%" y="101" width="0.0345%" height="15" fill="rgb(216,183,47)" fg:x="276108" fg:w="128"/><text x="74.7556%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (442 samples, 0.12%)</title><rect x="74.5401%" y="165" width="0.1193%" height="15" fill="rgb(229,195,25)" fg:x="276236" fg:w="442"/><text x="74.7901%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (90,675 samples, 24.47%)</title><rect x="74.6597%" y="165" width="24.4679%" height="15" fill="rgb(224,132,51)" fg:x="276679" fg:w="90675"/><text x="74.9097%" y="175.50">&lt;std::collections::hash::map::HashMap&lt;K..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (90,675 samples, 24.47%)</title><rect x="74.6597%" y="149" width="24.4679%" height="15" fill="rgb(240,63,7)" fg:x="276679" fg:w="90675"/><text x="74.9097%" y="159.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (61,246 samples, 16.53%)</title><rect x="82.6008%" y="133" width="16.5268%" height="15" fill="rgb(249,182,41)" fg:x="306108" fg:w="61246"/><text x="82.8508%" y="143.50">hashbrown::map::HashMap&lt;K,..</text></g><g><title>core::hash::BuildHasher::hash_one (2,082 samples, 0.56%)</title><rect x="98.5658%" y="117" width="0.5618%" height="15" fill="rgb(243,47,26)" fg:x="365272" fg:w="2082"/><text x="98.8158%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (485 samples, 0.13%)</title><rect x="98.9967%" y="101" width="0.1309%" height="15" fill="rgb(233,48,2)" fg:x="366869" fg:w="485"/><text x="99.2467%" y="111.50"></text></g><g><title>__rdl_alloc (226 samples, 0.06%)</title><rect x="99.1276%" y="165" width="0.0610%" height="15" fill="rgb(244,165,34)" fg:x="367354" fg:w="226"/><text x="99.3776%" y="175.50"></text></g><g><title>__rdl_dealloc (426 samples, 0.11%)</title><rect x="99.2927%" y="133" width="0.1150%" height="15" fill="rgb(207,89,7)" fg:x="367966" fg:w="426"/><text x="99.5427%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (812 samples, 0.22%)</title><rect x="99.1889%" y="149" width="0.2191%" height="15" fill="rgb(244,117,36)" fg:x="367581" fg:w="812"/><text x="99.4389%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (2,705 samples, 0.73%)</title><rect x="99.1889%" y="165" width="0.7299%" height="15" fill="rgb(226,144,34)" fg:x="367581" fg:w="2705"/><text x="99.4389%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (1,893 samples, 0.51%)</title><rect x="99.4080%" y="149" width="0.5108%" height="15" fill="rgb(213,23,19)" fg:x="368393" fg:w="1893"/><text x="99.6580%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,893 samples, 0.51%)</title><rect x="99.4080%" y="133" width="0.5108%" height="15" fill="rgb(217,75,12)" fg:x="368393" fg:w="1893"/><text x="99.6580%" y="143.50"></text></g><g><title>__rdl_dealloc (63 samples, 0.02%)</title><rect x="99.9018%" y="117" width="0.0170%" height="15" fill="rgb(224,159,17)" fg:x="370223" fg:w="63"/><text x="100.1518%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (283 samples, 0.08%)</title><rect x="99.9188%" y="165" width="0.0764%" height="15" fill="rgb(217,118,1)" fg:x="370286" fg:w="283"/><text x="100.1688%" y="175.50"></text></g><g><title>__rdl_dealloc (111 samples, 0.03%)</title><rect x="99.9652%" y="149" width="0.0300%" height="15" fill="rgb(232,180,48)" fg:x="370458" fg:w="111"/><text x="100.2152%" y="159.50"></text></g><g><title>all (370,587 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(230,27,33)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="351.50"></text></g><g><title>briolette-sim (370,587 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(205,31,21)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="335.50">briolette-sim</text></g><g><title>_start (370,587 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(253,59,4)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="319.50">_start</text></g><g><title>__libc_start_main_impl (370,587 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(224,201,9)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="303.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (370,587 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,206,30)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="287.50">__libc_start_call_main</text></g><g><title>main (370,587 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(212,67,47)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="271.50">main</text></g><g><title>std::rt::lang_start_internal (370,587 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,96,50)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="255.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (370,587 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,114,18)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="239.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (370,587 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,58,37)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="223.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (370,587 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,70,4)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="207.50">briolette_sim::main</text></g><g><title>briolette_sim::run_experiments (370,587 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,85,46)" fg:x="0" fg:w="370587"/><text x="0.2500%" y="191.50">briolette_sim::run_experiments</text></g></svg></svg>