<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="871751"><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (5,803 samples, 0.67%)</title><rect x="1.9549%" y="149" width="0.6657%" height="15" fill="rgb(221,52,54)" fg:x="17042" fg:w="5803"/><text x="2.2049%" y="159.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (5,801 samples, 0.67%)</title><rect x="1.9551%" y="133" width="0.6654%" height="15" fill="rgb(252,129,43)" fg:x="17044" fg:w="5801"/><text x="2.2051%" y="143.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (5,800 samples, 0.67%)</title><rect x="1.9553%" y="117" width="0.6653%" height="15" fill="rgb(248,183,27)" fg:x="17045" fg:w="5800"/><text x="2.2053%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5,792 samples, 0.66%)</title><rect x="1.9562%" y="101" width="0.6644%" height="15" fill="rgb(250,0,22)" fg:x="17053" fg:w="5792"/><text x="2.2062%" y="111.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1,774 samples, 0.20%)</title><rect x="2.4171%" y="85" width="0.2035%" height="15" fill="rgb(213,166,10)" fg:x="21071" fg:w="1774"/><text x="2.6671%" y="95.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (1,599 samples, 0.18%)</title><rect x="3.4504%" y="101" width="0.1834%" height="15" fill="rgb(207,163,36)" fg:x="30079" fg:w="1599"/><text x="3.7004%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (1,473 samples, 0.17%)</title><rect x="3.4649%" y="85" width="0.1690%" height="15" fill="rgb(208,122,22)" fg:x="30205" fg:w="1473"/><text x="3.7149%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,266 samples, 0.15%)</title><rect x="3.4886%" y="69" width="0.1452%" height="15" fill="rgb(207,104,49)" fg:x="30412" fg:w="1266"/><text x="3.7386%" y="79.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (396 samples, 0.05%)</title><rect x="3.5884%" y="53" width="0.0454%" height="15" fill="rgb(248,211,50)" fg:x="31282" fg:w="396"/><text x="3.8384%" y="63.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (1,152 samples, 0.13%)</title><rect x="3.6338%" y="101" width="0.1321%" height="15" fill="rgb(217,13,45)" fg:x="31678" fg:w="1152"/><text x="3.8838%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,009 samples, 0.12%)</title><rect x="3.6502%" y="85" width="0.1157%" height="15" fill="rgb(211,216,49)" fg:x="31821" fg:w="1009"/><text x="3.9002%" y="95.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (477 samples, 0.05%)</title><rect x="3.7113%" y="69" width="0.0547%" height="15" fill="rgb(221,58,53)" fg:x="32353" fg:w="477"/><text x="3.9613%" y="79.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (432 samples, 0.05%)</title><rect x="3.7660%" y="101" width="0.0496%" height="15" fill="rgb(220,112,41)" fg:x="32830" fg:w="432"/><text x="4.0160%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (137 samples, 0.02%)</title><rect x="3.7998%" y="85" width="0.0157%" height="15" fill="rgb(236,38,28)" fg:x="33125" fg:w="137"/><text x="4.0498%" y="95.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (172 samples, 0.02%)</title><rect x="3.8155%" y="101" width="0.0197%" height="15" fill="rgb(227,195,22)" fg:x="33262" fg:w="172"/><text x="4.0655%" y="111.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (2,348 samples, 0.27%)</title><rect x="4.8322%" y="85" width="0.2693%" height="15" fill="rgb(214,55,33)" fg:x="42125" fg:w="2348"/><text x="5.0822%" y="95.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (2,262 samples, 0.26%)</title><rect x="4.8421%" y="69" width="0.2595%" height="15" fill="rgb(248,80,13)" fg:x="42211" fg:w="2262"/><text x="5.0921%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,558 samples, 0.18%)</title><rect x="4.9229%" y="53" width="0.1787%" height="15" fill="rgb(238,52,6)" fg:x="42915" fg:w="1558"/><text x="5.1729%" y="63.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (590 samples, 0.07%)</title><rect x="5.0339%" y="37" width="0.0677%" height="15" fill="rgb(224,198,47)" fg:x="43883" fg:w="590"/><text x="5.2839%" y="47.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (150 samples, 0.02%)</title><rect x="5.1016%" y="85" width="0.0172%" height="15" fill="rgb(233,171,20)" fg:x="44473" fg:w="150"/><text x="5.3516%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,339 samples, 0.15%)</title><rect x="5.1199%" y="85" width="0.1536%" height="15" fill="rgb(241,30,25)" fg:x="44633" fg:w="1339"/><text x="5.3699%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (712 samples, 0.08%)</title><rect x="5.1918%" y="69" width="0.0817%" height="15" fill="rgb(207,171,38)" fg:x="45260" fg:w="712"/><text x="5.4418%" y="79.50"></text></g><g><title>__rdl_realloc (249 samples, 0.03%)</title><rect x="5.2450%" y="53" width="0.0286%" height="15" fill="rgb(234,70,1)" fg:x="45723" fg:w="249"/><text x="5.4950%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (249 samples, 0.03%)</title><rect x="5.2735%" y="85" width="0.0286%" height="15" fill="rgb(232,178,18)" fg:x="45972" fg:w="249"/><text x="5.5235%" y="95.50"></text></g><g><title>__rdl_dealloc (100 samples, 0.01%)</title><rect x="5.2906%" y="69" width="0.0115%" height="15" fill="rgb(241,78,40)" fg:x="46121" fg:w="100"/><text x="5.5406%" y="79.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (13,017 samples, 1.49%)</title><rect x="3.8356%" y="101" width="1.4932%" height="15" fill="rgb(222,35,25)" fg:x="33437" fg:w="13017"/><text x="4.0856%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (186 samples, 0.02%)</title><rect x="5.3075%" y="85" width="0.0213%" height="15" fill="rgb(207,92,16)" fg:x="46268" fg:w="186"/><text x="5.5575%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (120 samples, 0.01%)</title><rect x="5.3313%" y="101" width="0.0138%" height="15" fill="rgb(216,59,51)" fg:x="46476" fg:w="120"/><text x="5.5813%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (168 samples, 0.02%)</title><rect x="5.3503%" y="101" width="0.0193%" height="15" fill="rgb(213,80,28)" fg:x="46641" fg:w="168"/><text x="5.6003%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (94 samples, 0.01%)</title><rect x="5.3588%" y="85" width="0.0108%" height="15" fill="rgb(220,93,7)" fg:x="46715" fg:w="94"/><text x="5.6088%" y="95.50"></text></g><g><title>rand::rng::Rng::gen_range (104 samples, 0.01%)</title><rect x="5.3695%" y="101" width="0.0119%" height="15" fill="rgb(225,24,44)" fg:x="46809" fg:w="104"/><text x="5.6195%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide (236 samples, 0.03%)</title><rect x="10.2594%" y="85" width="0.0271%" height="15" fill="rgb(243,74,40)" fg:x="89436" fg:w="236"/><text x="10.5094%" y="95.50"></text></g><g><title>rand::seq::IteratorRandom::choose (50,034 samples, 5.74%)</title><rect x="5.3815%" y="101" width="5.7395%" height="15" fill="rgb(228,39,7)" fg:x="46913" fg:w="50034"/><text x="5.6315%" y="111.50">rand::s..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (7,275 samples, 0.83%)</title><rect x="10.2864%" y="85" width="0.8345%" height="15" fill="rgb(227,79,8)" fg:x="89672" fg:w="7275"/><text x="10.5364%" y="95.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (69,439 samples, 7.97%)</title><rect x="3.1727%" y="117" width="7.9655%" height="15" fill="rgb(236,58,11)" fg:x="27658" fg:w="69439"/><text x="3.4227%" y="127.50">&lt;briolette_..</text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (150 samples, 0.02%)</title><rect x="11.1210%" y="101" width="0.0172%" height="15" fill="rgb(249,63,35)" fg:x="96947" fg:w="150"/><text x="11.3710%" y="111.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (69,639 samples, 7.99%)</title><rect x="3.1518%" y="133" width="7.9884%" height="15" fill="rgb(252,114,16)" fg:x="27476" fg:w="69639"/><text x="3.4018%" y="143.50">&lt;absim::cli..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (112 samples, 0.01%)</title><rect x="85.1062%" y="101" width="0.0128%" height="15" fill="rgb(254,151,24)" fg:x="741914" fg:w="112"/><text x="85.3562%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (749 samples, 0.09%)</title><rect x="85.0359%" y="117" width="0.0859%" height="15" fill="rgb(253,54,39)" fg:x="741301" fg:w="749"/><text x="85.2859%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,133 samples, 0.36%)</title><rect x="85.1218%" y="117" width="0.3594%" height="15" fill="rgb(243,25,45)" fg:x="742050" fg:w="3133"/><text x="85.3718%" y="127.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,872 samples, 0.21%)</title><rect x="85.2664%" y="101" width="0.2147%" height="15" fill="rgb(234,134,9)" fg:x="743311" fg:w="1872"/><text x="85.5164%" y="111.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (131 samples, 0.02%)</title><rect x="85.4661%" y="85" width="0.0150%" height="15" fill="rgb(227,166,31)" fg:x="745052" fg:w="131"/><text x="85.7161%" y="95.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (521 samples, 0.06%)</title><rect x="85.4812%" y="117" width="0.0598%" height="15" fill="rgb(245,143,41)" fg:x="745183" fg:w="521"/><text x="85.7312%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (508 samples, 0.06%)</title><rect x="85.5485%" y="117" width="0.0583%" height="15" fill="rgb(238,181,32)" fg:x="745770" fg:w="508"/><text x="85.7985%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (279 samples, 0.03%)</title><rect x="85.5748%" y="101" width="0.0320%" height="15" fill="rgb(224,113,18)" fg:x="745999" fg:w="279"/><text x="85.8248%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (169 samples, 0.02%)</title><rect x="85.6109%" y="117" width="0.0194%" height="15" fill="rgb(240,229,28)" fg:x="746314" fg:w="169"/><text x="85.8609%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::graph_utils::SimulationGraph&gt; (139 samples, 0.02%)</title><rect x="85.6303%" y="117" width="0.0159%" height="15" fill="rgb(250,185,3)" fg:x="746483" fg:w="139"/><text x="85.8803%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (167 samples, 0.02%)</title><rect x="85.6473%" y="117" width="0.0192%" height="15" fill="rgb(212,59,25)" fg:x="746631" fg:w="167"/><text x="85.8973%" y="127.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (649,758 samples, 74.53%)</title><rect x="11.1402%" y="133" width="74.5348%" height="15" fill="rgb(221,87,20)" fg:x="97115" fg:w="649758"/><text x="11.3902%" y="143.50">&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (520 samples, 0.06%)</title><rect x="86.8113%" y="69" width="0.0597%" height="15" fill="rgb(213,74,28)" fg:x="756778" fg:w="520"/><text x="87.0613%" y="79.50"></text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (10,423 samples, 1.20%)</title><rect x="85.6755%" y="117" width="1.1956%" height="15" fill="rgb(224,132,34)" fg:x="746877" fg:w="10423"/><text x="85.9255%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10,415 samples, 1.19%)</title><rect x="85.6764%" y="101" width="1.1947%" height="15" fill="rgb(222,101,24)" fg:x="746885" fg:w="10415"/><text x="85.9264%" y="111.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1,747 samples, 0.20%)</title><rect x="86.6707%" y="85" width="0.2004%" height="15" fill="rgb(254,142,4)" fg:x="755553" fg:w="1747"/><text x="86.9207%" y="95.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (10,464 samples, 1.20%)</title><rect x="85.6750%" y="133" width="1.2003%" height="15" fill="rgb(230,229,49)" fg:x="746873" fg:w="10464"/><text x="85.9250%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (227 samples, 0.03%)</title><rect x="87.8324%" y="117" width="0.0260%" height="15" fill="rgb(238,70,47)" fg:x="765680" fg:w="227"/><text x="88.0824%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (191 samples, 0.02%)</title><rect x="87.8621%" y="117" width="0.0219%" height="15" fill="rgb(231,160,17)" fg:x="765939" fg:w="191"/><text x="88.1121%" y="127.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (8,971 samples, 1.03%)</title><rect x="86.8754%" y="133" width="1.0291%" height="15" fill="rgb(218,68,53)" fg:x="757337" fg:w="8971"/><text x="87.1254%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (178 samples, 0.02%)</title><rect x="87.8840%" y="117" width="0.0204%" height="15" fill="rgb(236,111,10)" fg:x="766130" fg:w="178"/><text x="88.1340%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (115 samples, 0.01%)</title><rect x="87.8913%" y="101" width="0.0132%" height="15" fill="rgb(224,34,41)" fg:x="766193" fg:w="115"/><text x="88.1413%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (173 samples, 0.02%)</title><rect x="88.1618%" y="101" width="0.0198%" height="15" fill="rgb(241,118,19)" fg:x="768551" fg:w="173"/><text x="88.4118%" y="111.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (2,743 samples, 0.31%)</title><rect x="87.9045%" y="133" width="0.3147%" height="15" fill="rgb(238,129,25)" fg:x="766308" fg:w="2743"/><text x="88.1545%" y="143.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (638 samples, 0.07%)</title><rect x="88.1459%" y="117" width="0.0732%" height="15" fill="rgb(238,22,31)" fg:x="768413" fg:w="638"/><text x="88.3959%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (327 samples, 0.04%)</title><rect x="88.1816%" y="101" width="0.0375%" height="15" fill="rgb(222,174,48)" fg:x="768724" fg:w="327"/><text x="88.4316%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (155 samples, 0.02%)</title><rect x="88.2013%" y="85" width="0.0178%" height="15" fill="rgb(206,152,40)" fg:x="768896" fg:w="155"/><text x="88.4513%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (391 samples, 0.04%)</title><rect x="88.2232%" y="117" width="0.0449%" height="15" fill="rgb(218,99,54)" fg:x="769087" fg:w="391"/><text x="88.4732%" y="127.50"></text></g><g><title>__rdl_dealloc (167 samples, 0.02%)</title><rect x="88.2489%" y="101" width="0.0192%" height="15" fill="rgb(220,174,26)" fg:x="769311" fg:w="167"/><text x="88.4989%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (1,127 samples, 0.13%)</title><rect x="88.2681%" y="117" width="0.1293%" height="15" fill="rgb(245,116,9)" fg:x="769478" fg:w="1127"/><text x="88.5181%" y="127.50"></text></g><g><title>absim::EventQueue&lt;S&gt;::clear (2,422 samples, 0.28%)</title><rect x="88.2195%" y="133" width="0.2778%" height="15" fill="rgb(209,72,35)" fg:x="769054" fg:w="2422"/><text x="88.4695%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (871 samples, 0.10%)</title><rect x="88.3974%" y="117" width="0.0999%" height="15" fill="rgb(226,126,21)" fg:x="770605" fg:w="871"/><text x="88.6474%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (108 samples, 0.01%)</title><rect x="88.5186%" y="85" width="0.0124%" height="15" fill="rgb(227,192,1)" fg:x="771662" fg:w="108"/><text x="88.7686%" y="95.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (136 samples, 0.02%)</title><rect x="88.5395%" y="69" width="0.0156%" height="15" fill="rgb(237,180,29)" fg:x="771844" fg:w="136"/><text x="88.7895%" y="79.50"></text></g><g><title>std::io::Write::write_all (105 samples, 0.01%)</title><rect x="88.5431%" y="53" width="0.0120%" height="15" fill="rgb(230,197,35)" fg:x="771875" fg:w="105"/><text x="88.7931%" y="63.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (749,182 samples, 85.94%)</title><rect x="2.6206%" y="149" width="85.9399%" height="15" fill="rgb(246,193,31)" fg:x="22845" fg:w="749182"/><text x="2.8706%" y="159.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>briolette_sim::check_exit_conditions_and_print_results_to_file_avged_out (551 samples, 0.06%)</title><rect x="88.4973%" y="133" width="0.0632%" height="15" fill="rgb(241,36,4)" fg:x="771476" fg:w="551"/><text x="88.7473%" y="143.50"></text></g><g><title>std::io::Write::write_fmt (514 samples, 0.06%)</title><rect x="88.5015%" y="117" width="0.0590%" height="15" fill="rgb(241,130,17)" fg:x="771513" fg:w="514"/><text x="88.7515%" y="127.50"></text></g><g><title>core::fmt::write (466 samples, 0.05%)</title><rect x="88.5070%" y="101" width="0.0535%" height="15" fill="rgb(206,137,32)" fg:x="771561" fg:w="466"/><text x="88.7570%" y="111.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (257 samples, 0.03%)</title><rect x="88.5310%" y="85" width="0.0295%" height="15" fill="rgb(237,228,51)" fg:x="771770" fg:w="257"/><text x="88.7810%" y="95.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (444 samples, 0.05%)</title><rect x="88.5605%" y="149" width="0.0509%" height="15" fill="rgb(243,6,42)" fg:x="772027" fg:w="444"/><text x="88.8105%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (457 samples, 0.05%)</title><rect x="88.6114%" y="149" width="0.0524%" height="15" fill="rgb(251,74,28)" fg:x="772471" fg:w="457"/><text x="88.8614%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (94,242 samples, 10.81%)</title><rect x="88.6639%" y="149" width="10.8107%" height="15" fill="rgb(218,20,49)" fg:x="772928" fg:w="94242"/><text x="88.9139%" y="159.50">&lt;std::collection..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94,242 samples, 10.81%)</title><rect x="88.6639%" y="133" width="10.8107%" height="15" fill="rgb(238,28,14)" fg:x="772928" fg:w="94242"/><text x="88.9139%" y="143.50">&lt;alloc::vec::int..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (66,668 samples, 7.65%)</title><rect x="91.8269%" y="117" width="7.6476%" height="15" fill="rgb(229,40,46)" fg:x="800502" fg:w="66668"/><text x="92.0769%" y="127.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (2,114 samples, 0.24%)</title><rect x="99.2320%" y="101" width="0.2425%" height="15" fill="rgb(244,195,20)" fg:x="865056" fg:w="2114"/><text x="99.4820%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (407 samples, 0.05%)</title><rect x="99.4278%" y="85" width="0.0467%" height="15" fill="rgb(253,56,35)" fg:x="866763" fg:w="407"/><text x="99.6778%" y="95.50"></text></g><g><title>__rdl_alloc (279 samples, 0.03%)</title><rect x="99.4745%" y="149" width="0.0320%" height="15" fill="rgb(210,149,44)" fg:x="867170" fg:w="279"/><text x="99.7245%" y="159.50"></text></g><g><title>__rdl_dealloc (419 samples, 0.05%)</title><rect x="99.5540%" y="117" width="0.0481%" height="15" fill="rgb(240,135,12)" fg:x="867863" fg:w="419"/><text x="99.8040%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (834 samples, 0.10%)</title><rect x="99.5066%" y="133" width="0.0957%" height="15" fill="rgb(251,24,50)" fg:x="867450" fg:w="834"/><text x="99.7566%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (4,025 samples, 0.46%)</title><rect x="99.5065%" y="149" width="0.4617%" height="15" fill="rgb(243,200,47)" fg:x="867449" fg:w="4025"/><text x="99.7565%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (3,190 samples, 0.37%)</title><rect x="99.6023%" y="133" width="0.3659%" height="15" fill="rgb(224,166,26)" fg:x="868284" fg:w="3190"/><text x="99.8523%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,190 samples, 0.37%)</title><rect x="99.6023%" y="117" width="0.3659%" height="15" fill="rgb(233,0,47)" fg:x="868284" fg:w="3190"/><text x="99.8523%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (252 samples, 0.03%)</title><rect x="99.9682%" y="149" width="0.0289%" height="15" fill="rgb(253,80,5)" fg:x="871474" fg:w="252"/><text x="100.2182%" y="159.50"></text></g><g><title>all (871,751 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(214,133,25)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="335.50"></text></g><g><title>briolette-sim (871,751 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(209,27,14)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="319.50">briolette-sim</text></g><g><title>_start (871,751 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(219,102,51)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="303.50">_start</text></g><g><title>__libc_start_main_impl (871,751 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,18,16)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="287.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (871,751 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,85,17)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="271.50">__libc_start_call_main</text></g><g><title>main (871,751 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,90,42)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="255.50">main</text></g><g><title>std::rt::lang_start_internal (871,751 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,57,21)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="239.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (871,751 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,12,36)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="223.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (871,751 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,128,47)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="207.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>briolette_sim::main (871,751 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(207,33,20)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="191.50">briolette_sim::main</text></g><g><title>briolette_sim::run_experiments (871,751 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(233,215,35)" fg:x="0" fg:w="871751"/><text x="0.2500%" y="175.50">briolette_sim::run_experiments</text></g></svg></svg>