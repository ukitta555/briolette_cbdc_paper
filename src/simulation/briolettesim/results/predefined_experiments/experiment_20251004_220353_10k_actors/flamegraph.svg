<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="2698"><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.19%)</title><rect x="0.0000%" y="165" width="0.1853%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.19%)</title><rect x="0.0000%" y="149" width="0.1853%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="159.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.19%)</title><rect x="0.0000%" y="133" width="0.1853%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="143.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (19 samples, 0.70%)</title><rect x="0.0000%" y="309" width="0.7042%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="19"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.70%)</title><rect x="0.0000%" y="293" width="0.7042%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="19"/><text x="0.2500%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.70%)</title><rect x="0.0000%" y="277" width="0.7042%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="19"/><text x="0.2500%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.70%)</title><rect x="0.0000%" y="261" width="0.7042%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="19"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.70%)</title><rect x="0.0000%" y="245" width="0.7042%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="19"/><text x="0.2500%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.70%)</title><rect x="0.0000%" y="229" width="0.7042%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="19"/><text x="0.2500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.70%)</title><rect x="0.0000%" y="213" width="0.7042%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="19"/><text x="0.2500%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (19 samples, 0.70%)</title><rect x="0.0000%" y="197" width="0.7042%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="19"/><text x="0.2500%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (19 samples, 0.70%)</title><rect x="0.0000%" y="181" width="0.7042%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="19"/><text x="0.2500%" y="191.50"></text></g><g><title>alloc::raw_vec::layout_array (14 samples, 0.52%)</title><rect x="0.1853%" y="165" width="0.5189%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="14"/><text x="0.4353%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat (14 samples, 0.52%)</title><rect x="0.1853%" y="149" width="0.5189%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="14"/><text x="0.4353%" y="159.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (124 samples, 4.60%)</title><rect x="0.0000%" y="437" width="4.5960%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="124"/><text x="0.2500%" y="447.50">&lt;absi..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (124 samples, 4.60%)</title><rect x="0.0000%" y="421" width="4.5960%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="124"/><text x="0.2500%" y="431.50">&lt;brio..</text></g><g><title>&lt;briolette_sim::PopulationAdd as core::clone::Clone&gt;::clone (124 samples, 4.60%)</title><rect x="0.0000%" y="405" width="4.5960%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="124"/><text x="0.2500%" y="415.50">&lt;brio..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (124 samples, 4.60%)</title><rect x="0.0000%" y="389" width="4.5960%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="124"/><text x="0.2500%" y="399.50">&lt;brio..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (124 samples, 4.60%)</title><rect x="0.0000%" y="373" width="4.5960%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="124"/><text x="0.2500%" y="383.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (124 samples, 4.60%)</title><rect x="0.0000%" y="357" width="4.5960%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="124"/><text x="0.2500%" y="367.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (124 samples, 4.60%)</title><rect x="0.0000%" y="341" width="4.5960%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="124"/><text x="0.2500%" y="351.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (124 samples, 4.60%)</title><rect x="0.0000%" y="325" width="4.5960%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="124"/><text x="0.2500%" y="335.50">&lt;T as..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (105 samples, 3.89%)</title><rect x="0.7042%" y="309" width="3.8918%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="105"/><text x="0.9542%" y="319.50">core..</text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::enqueue (127 samples, 4.71%)</title><rect x="0.0000%" y="453" width="4.7072%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="127"/><text x="0.2500%" y="463.50">&lt;absi..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="437" width="0.1112%" height="15" fill="rgb(241,131,45)" fg:x="124" fg:w="3"/><text x="4.8460%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::PopulationAdd&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="421" width="0.1112%" height="15" fill="rgb(249,31,29)" fg:x="124" fg:w="3"/><text x="4.8460%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="405" width="0.1112%" height="15" fill="rgb(225,111,53)" fg:x="124" fg:w="3"/><text x="4.8460%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::Coin&gt;&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="389" width="0.1112%" height="15" fill="rgb(238,160,17)" fg:x="124" fg:w="3"/><text x="4.8460%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="4.5960%" y="373" width="0.1112%" height="15" fill="rgb(214,148,48)" fg:x="124" fg:w="3"/><text x="4.8460%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::Coin]&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="357" width="0.1112%" height="15" fill="rgb(232,36,49)" fg:x="124" fg:w="3"/><text x="4.8460%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="341" width="0.1112%" height="15" fill="rgb(209,103,24)" fg:x="124" fg:w="3"/><text x="4.8460%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="325" width="0.1112%" height="15" fill="rgb(229,88,8)" fg:x="124" fg:w="3"/><text x="4.8460%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3 samples, 0.11%)</title><rect x="4.5960%" y="309" width="0.1112%" height="15" fill="rgb(213,181,19)" fg:x="124" fg:w="3"/><text x="4.8460%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="4.5960%" y="293" width="0.1112%" height="15" fill="rgb(254,191,54)" fg:x="124" fg:w="3"/><text x="4.8460%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3 samples, 0.11%)</title><rect x="4.5960%" y="277" width="0.1112%" height="15" fill="rgb(241,83,37)" fg:x="124" fg:w="3"/><text x="4.8460%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="4.5960%" y="261" width="0.1112%" height="15" fill="rgb(233,36,39)" fg:x="124" fg:w="3"/><text x="4.8460%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="4.5960%" y="245" width="0.1112%" height="15" fill="rgb(226,3,54)" fg:x="124" fg:w="3"/><text x="4.8460%" y="255.50"></text></g><g><title>&lt;absim::WorldView&lt;S&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="421" width="0.1112%" height="15" fill="rgb(245,192,40)" fg:x="152" fg:w="3"/><text x="5.8838%" y="431.50"></text></g><g><title>&lt;briolette_sim::ViewData as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="405" width="0.1112%" height="15" fill="rgb(238,167,29)" fg:x="152" fg:w="3"/><text x="5.8838%" y="415.50"></text></g><g><title>&lt;absim::graph_utils::SimulationGraph as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="389" width="0.1112%" height="15" fill="rgb(232,182,51)" fg:x="152" fg:w="3"/><text x="5.8838%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="373" width="0.1112%" height="15" fill="rgb(231,60,39)" fg:x="152" fg:w="3"/><text x="5.8838%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="5.6338%" y="357" width="0.1112%" height="15" fill="rgb(208,69,12)" fg:x="152" fg:w="3"/><text x="5.8838%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="5.6338%" y="341" width="0.1112%" height="15" fill="rgb(235,93,37)" fg:x="152" fg:w="3"/><text x="5.8838%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="5.6338%" y="325" width="0.1112%" height="15" fill="rgb(213,116,39)" fg:x="152" fg:w="3"/><text x="5.8838%" y="335.50"></text></g><g><title>&lt;absim::graph_utils::Vertex as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="309" width="0.1112%" height="15" fill="rgb(222,207,29)" fg:x="152" fg:w="3"/><text x="5.8838%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="5.6338%" y="293" width="0.1112%" height="15" fill="rgb(206,96,30)" fg:x="152" fg:w="3"/><text x="5.8838%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="5.6338%" y="277" width="0.1112%" height="15" fill="rgb(218,138,4)" fg:x="152" fg:w="3"/><text x="5.8838%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="5.6338%" y="261" width="0.1112%" height="15" fill="rgb(250,191,14)" fg:x="152" fg:w="3"/><text x="5.8838%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="5.6338%" y="245" width="0.1112%" height="15" fill="rgb(239,60,40)" fg:x="152" fg:w="3"/><text x="5.8838%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="5.6338%" y="229" width="0.1112%" height="15" fill="rgb(206,27,48)" fg:x="152" fg:w="3"/><text x="5.8838%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="5.6338%" y="213" width="0.1112%" height="15" fill="rgb(225,35,8)" fg:x="152" fg:w="3"/><text x="5.8838%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="5.6338%" y="197" width="0.1112%" height="15" fill="rgb(250,213,24)" fg:x="152" fg:w="3"/><text x="5.8838%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.11%)</title><rect x="5.6338%" y="181" width="0.1112%" height="15" fill="rgb(247,123,22)" fg:x="152" fg:w="3"/><text x="5.8838%" y="191.50"></text></g><g><title>&lt;briolette_sim::TransactionCoin as core::clone::Clone&gt;::clone (5 samples, 0.19%)</title><rect x="6.3380%" y="277" width="0.1853%" height="15" fill="rgb(231,138,38)" fg:x="171" fg:w="5"/><text x="6.5880%" y="287.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (5 samples, 0.19%)</title><rect x="6.3380%" y="261" width="0.1853%" height="15" fill="rgb(231,145,46)" fg:x="171" fg:w="5"/><text x="6.5880%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.19%)</title><rect x="6.3380%" y="245" width="0.1853%" height="15" fill="rgb(251,118,11)" fg:x="171" fg:w="5"/><text x="6.5880%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.19%)</title><rect x="6.3380%" y="229" width="0.1853%" height="15" fill="rgb(217,147,25)" fg:x="171" fg:w="5"/><text x="6.5880%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.19%)</title><rect x="6.3380%" y="213" width="0.1853%" height="15" fill="rgb(247,81,37)" fg:x="171" fg:w="5"/><text x="6.5880%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.19%)</title><rect x="6.3380%" y="197" width="0.1853%" height="15" fill="rgb(209,12,38)" fg:x="171" fg:w="5"/><text x="6.5880%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.19%)</title><rect x="6.3380%" y="181" width="0.1853%" height="15" fill="rgb(227,1,9)" fg:x="171" fg:w="5"/><text x="6.5880%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.19%)</title><rect x="6.3380%" y="165" width="0.1853%" height="15" fill="rgb(248,47,43)" fg:x="171" fg:w="5"/><text x="6.5880%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (5 samples, 0.19%)</title><rect x="6.3380%" y="149" width="0.1853%" height="15" fill="rgb(221,10,30)" fg:x="171" fg:w="5"/><text x="6.5880%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5 samples, 0.19%)</title><rect x="6.3380%" y="133" width="0.1853%" height="15" fill="rgb(210,229,1)" fg:x="171" fg:w="5"/><text x="6.5880%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.19%)</title><rect x="6.3380%" y="117" width="0.1853%" height="15" fill="rgb(222,148,37)" fg:x="171" fg:w="5"/><text x="6.5880%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.19%)</title><rect x="6.3380%" y="101" width="0.1853%" height="15" fill="rgb(234,67,33)" fg:x="171" fg:w="5"/><text x="6.5880%" y="111.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.19%)</title><rect x="6.3380%" y="85" width="0.1853%" height="15" fill="rgb(247,98,35)" fg:x="171" fg:w="5"/><text x="6.5880%" y="95.50"></text></g><g><title>&lt;briolette_sim::TransactData as core::clone::Clone&gt;::clone (10 samples, 0.37%)</title><rect x="6.3380%" y="357" width="0.3706%" height="15" fill="rgb(247,138,52)" fg:x="171" fg:w="10"/><text x="6.5880%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.37%)</title><rect x="6.3380%" y="341" width="0.3706%" height="15" fill="rgb(213,79,30)" fg:x="171" fg:w="10"/><text x="6.5880%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.37%)</title><rect x="6.3380%" y="325" width="0.3706%" height="15" fill="rgb(246,177,23)" fg:x="171" fg:w="10"/><text x="6.5880%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.37%)</title><rect x="6.3380%" y="309" width="0.3706%" height="15" fill="rgb(230,62,27)" fg:x="171" fg:w="10"/><text x="6.5880%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.37%)</title><rect x="6.3380%" y="293" width="0.3706%" height="15" fill="rgb(216,154,8)" fg:x="171" fg:w="10"/><text x="6.5880%" y="303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.19%)</title><rect x="6.5234%" y="277" width="0.1853%" height="15" fill="rgb(244,35,45)" fg:x="176" fg:w="5"/><text x="6.7734%" y="287.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="6.7087%" y="277" width="0.0371%" height="15" fill="rgb(251,115,12)" fg:x="181" fg:w="1"/><text x="6.9587%" y="287.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (34 samples, 1.26%)</title><rect x="5.8191%" y="389" width="1.2602%" height="15" fill="rgb(240,54,50)" fg:x="157" fg:w="34"/><text x="6.0691%" y="399.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (31 samples, 1.15%)</title><rect x="5.9303%" y="373" width="1.1490%" height="15" fill="rgb(233,84,52)" fg:x="160" fg:w="31"/><text x="6.1803%" y="383.50"></text></g><g><title>&lt;briolette_sim::ValidateData as core::clone::Clone&gt;::clone (10 samples, 0.37%)</title><rect x="6.7087%" y="357" width="0.3706%" height="15" fill="rgb(207,117,47)" fg:x="181" fg:w="10"/><text x="6.9587%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.37%)</title><rect x="6.7087%" y="341" width="0.3706%" height="15" fill="rgb(249,43,39)" fg:x="181" fg:w="10"/><text x="6.9587%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.37%)</title><rect x="6.7087%" y="325" width="0.3706%" height="15" fill="rgb(209,38,44)" fg:x="181" fg:w="10"/><text x="6.9587%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.37%)</title><rect x="6.7087%" y="309" width="0.3706%" height="15" fill="rgb(236,212,23)" fg:x="181" fg:w="10"/><text x="6.9587%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.37%)</title><rect x="6.7087%" y="293" width="0.3706%" height="15" fill="rgb(242,79,21)" fg:x="181" fg:w="10"/><text x="6.9587%" y="303.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (9 samples, 0.33%)</title><rect x="6.7457%" y="277" width="0.3336%" height="15" fill="rgb(211,96,35)" fg:x="182" fg:w="9"/><text x="6.9957%" y="287.50"></text></g><g><title>&lt;briolette_sim::TransactionCoin as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="7.2646%" y="293" width="0.0371%" height="15" fill="rgb(253,215,40)" fg:x="196" fg:w="1"/><text x="7.5146%" y="303.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="7.2646%" y="277" width="0.0371%" height="15" fill="rgb(211,81,21)" fg:x="196" fg:w="1"/><text x="7.5146%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="7.2646%" y="261" width="0.0371%" height="15" fill="rgb(208,190,38)" fg:x="196" fg:w="1"/><text x="7.5146%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="7.2646%" y="245" width="0.0371%" height="15" fill="rgb(235,213,38)" fg:x="196" fg:w="1"/><text x="7.5146%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="7.2646%" y="229" width="0.0371%" height="15" fill="rgb(237,122,38)" fg:x="196" fg:w="1"/><text x="7.5146%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="7.2646%" y="213" width="0.0371%" height="15" fill="rgb(244,218,35)" fg:x="196" fg:w="1"/><text x="7.5146%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="7.2646%" y="197" width="0.0371%" height="15" fill="rgb(240,68,47)" fg:x="196" fg:w="1"/><text x="7.5146%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="7.2646%" y="181" width="0.0371%" height="15" fill="rgb(210,16,53)" fg:x="196" fg:w="1"/><text x="7.5146%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="7.2646%" y="165" width="0.0371%" height="15" fill="rgb(235,124,12)" fg:x="196" fg:w="1"/><text x="7.5146%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="7.2646%" y="149" width="0.0371%" height="15" fill="rgb(224,169,11)" fg:x="196" fg:w="1"/><text x="7.5146%" y="159.50"></text></g><g><title>&lt;briolette_sim::TransactData as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="7.2646%" y="373" width="0.0741%" height="15" fill="rgb(250,166,2)" fg:x="196" fg:w="2"/><text x="7.5146%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="7.2646%" y="357" width="0.0741%" height="15" fill="rgb(242,216,29)" fg:x="196" fg:w="2"/><text x="7.5146%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="7.2646%" y="341" width="0.0741%" height="15" fill="rgb(230,116,27)" fg:x="196" fg:w="2"/><text x="7.5146%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="7.2646%" y="325" width="0.0741%" height="15" fill="rgb(228,99,48)" fg:x="196" fg:w="2"/><text x="7.5146%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="7.2646%" y="309" width="0.0741%" height="15" fill="rgb(253,11,6)" fg:x="196" fg:w="2"/><text x="7.5146%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="7.3017%" y="293" width="0.0371%" height="15" fill="rgb(247,143,39)" fg:x="197" fg:w="1"/><text x="7.5517%" y="303.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="7.3388%" y="293" width="0.1483%" height="15" fill="rgb(236,97,10)" fg:x="198" fg:w="4"/><text x="7.5888%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="7.3388%" y="277" width="0.1483%" height="15" fill="rgb(233,208,19)" fg:x="198" fg:w="4"/><text x="7.5888%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.15%)</title><rect x="7.3388%" y="261" width="0.1483%" height="15" fill="rgb(216,164,2)" fg:x="198" fg:w="4"/><text x="7.5888%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.15%)</title><rect x="7.3388%" y="245" width="0.1483%" height="15" fill="rgb(220,129,5)" fg:x="198" fg:w="4"/><text x="7.5888%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.15%)</title><rect x="7.3388%" y="229" width="0.1483%" height="15" fill="rgb(242,17,10)" fg:x="198" fg:w="4"/><text x="7.5888%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="7.3388%" y="213" width="0.1483%" height="15" fill="rgb(242,107,0)" fg:x="198" fg:w="4"/><text x="7.5888%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="7.3388%" y="197" width="0.1483%" height="15" fill="rgb(251,28,31)" fg:x="198" fg:w="4"/><text x="7.5888%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="7.3388%" y="181" width="0.1483%" height="15" fill="rgb(233,223,10)" fg:x="198" fg:w="4"/><text x="7.5888%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4 samples, 0.15%)</title><rect x="7.3388%" y="165" width="0.1483%" height="15" fill="rgb(215,21,27)" fg:x="198" fg:w="4"/><text x="7.5888%" y="175.50"></text></g><g><title>alloc::raw_vec::layout_array (4 samples, 0.15%)</title><rect x="7.3388%" y="149" width="0.1483%" height="15" fill="rgb(232,23,21)" fg:x="198" fg:w="4"/><text x="7.5888%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::repeat (4 samples, 0.15%)</title><rect x="7.3388%" y="133" width="0.1483%" height="15" fill="rgb(244,5,23)" fg:x="198" fg:w="4"/><text x="7.5888%" y="143.50"></text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (16 samples, 0.59%)</title><rect x="7.0793%" y="389" width="0.5930%" height="15" fill="rgb(226,81,46)" fg:x="191" fg:w="16"/><text x="7.3293%" y="399.50"></text></g><g><title>&lt;briolette_sim::ValidateData as core::clone::Clone&gt;::clone (9 samples, 0.33%)</title><rect x="7.3388%" y="373" width="0.3336%" height="15" fill="rgb(247,70,30)" fg:x="198" fg:w="9"/><text x="7.5888%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.33%)</title><rect x="7.3388%" y="357" width="0.3336%" height="15" fill="rgb(212,68,19)" fg:x="198" fg:w="9"/><text x="7.5888%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.33%)</title><rect x="7.3388%" y="341" width="0.3336%" height="15" fill="rgb(240,187,13)" fg:x="198" fg:w="9"/><text x="7.5888%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.33%)</title><rect x="7.3388%" y="325" width="0.3336%" height="15" fill="rgb(223,113,26)" fg:x="198" fg:w="9"/><text x="7.5888%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.33%)</title><rect x="7.3388%" y="309" width="0.3336%" height="15" fill="rgb(206,192,2)" fg:x="198" fg:w="9"/><text x="7.5888%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.19%)</title><rect x="7.4870%" y="293" width="0.1853%" height="15" fill="rgb(241,108,4)" fg:x="202" fg:w="5"/><text x="7.7370%" y="303.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::probability_check (15 samples, 0.56%)</title><rect x="7.6723%" y="389" width="0.5560%" height="15" fill="rgb(247,173,49)" fg:x="207" fg:w="15"/><text x="7.9223%" y="399.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (4 samples, 0.15%)</title><rect x="8.0801%" y="373" width="0.1483%" height="15" fill="rgb(224,114,35)" fg:x="218" fg:w="4"/><text x="8.3301%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (4 samples, 0.15%)</title><rect x="8.0801%" y="357" width="0.1483%" height="15" fill="rgb(245,159,27)" fg:x="218" fg:w="4"/><text x="8.3301%" y="367.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.15%)</title><rect x="8.0801%" y="341" width="0.1483%" height="15" fill="rgb(245,172,44)" fg:x="218" fg:w="4"/><text x="8.3301%" y="351.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.15%)</title><rect x="8.0801%" y="325" width="0.1483%" height="15" fill="rgb(236,23,11)" fg:x="218" fg:w="4"/><text x="8.3301%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.15%)</title><rect x="8.0801%" y="309" width="0.1483%" height="15" fill="rgb(205,117,38)" fg:x="218" fg:w="4"/><text x="8.3301%" y="319.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u64 (4 samples, 0.15%)</title><rect x="8.0801%" y="293" width="0.1483%" height="15" fill="rgb(237,72,25)" fg:x="218" fg:w="4"/><text x="8.3301%" y="303.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u64 (4 samples, 0.15%)</title><rect x="8.0801%" y="277" width="0.1483%" height="15" fill="rgb(244,70,9)" fg:x="218" fg:w="4"/><text x="8.3301%" y="287.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.15%)</title><rect x="8.0801%" y="261" width="0.1483%" height="15" fill="rgb(217,125,39)" fg:x="218" fg:w="4"/><text x="8.3301%" y="271.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (4 samples, 0.15%)</title><rect x="8.0801%" y="245" width="0.1483%" height="15" fill="rgb(235,36,10)" fg:x="218" fg:w="4"/><text x="8.3301%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.15%)</title><rect x="8.0801%" y="229" width="0.1483%" height="15" fill="rgb(251,123,47)" fg:x="218" fg:w="4"/><text x="8.3301%" y="239.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (4 samples, 0.15%)</title><rect x="8.0801%" y="213" width="0.1483%" height="15" fill="rgb(221,13,13)" fg:x="218" fg:w="4"/><text x="8.3301%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.15%)</title><rect x="8.0801%" y="197" width="0.1483%" height="15" fill="rgb(238,131,9)" fg:x="218" fg:w="4"/><text x="8.3301%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (4 samples, 0.15%)</title><rect x="8.0801%" y="181" width="0.1483%" height="15" fill="rgb(211,50,8)" fg:x="218" fg:w="4"/><text x="8.3301%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (4 samples, 0.15%)</title><rect x="8.0801%" y="165" width="0.1483%" height="15" fill="rgb(245,182,24)" fg:x="218" fg:w="4"/><text x="8.3301%" y="175.50"></text></g><g><title>rand_chacha::guts::diagonalize (4 samples, 0.15%)</title><rect x="8.0801%" y="149" width="0.1483%" height="15" fill="rgb(242,14,37)" fg:x="218" fg:w="4"/><text x="8.3301%" y="159.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (4 samples, 0.15%)</title><rect x="8.0801%" y="133" width="0.1483%" height="15" fill="rgb(246,228,12)" fg:x="218" fg:w="4"/><text x="8.3301%" y="143.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (4 samples, 0.15%)</title><rect x="8.0801%" y="117" width="0.1483%" height="15" fill="rgb(213,55,15)" fg:x="218" fg:w="4"/><text x="8.3301%" y="127.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (4 samples, 0.15%)</title><rect x="8.0801%" y="101" width="0.1483%" height="15" fill="rgb(209,9,3)" fg:x="218" fg:w="4"/><text x="8.3301%" y="111.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::relocate (8 samples, 0.30%)</title><rect x="8.2283%" y="389" width="0.2965%" height="15" fill="rgb(230,59,30)" fg:x="222" fg:w="8"/><text x="8.4783%" y="399.50"></text></g><g><title>rand_flight::Flight&lt;R,RD,T,_&gt;::step_graph (8 samples, 0.30%)</title><rect x="8.2283%" y="373" width="0.2965%" height="15" fill="rgb(209,121,21)" fg:x="222" fg:w="8"/><text x="8.4783%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (2 samples, 0.07%)</title><rect x="8.4507%" y="357" width="0.0741%" height="15" fill="rgb(220,109,13)" fg:x="228" fg:w="2"/><text x="8.7007%" y="367.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformFloat&lt;f64&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (2 samples, 0.07%)</title><rect x="8.4507%" y="341" width="0.0741%" height="15" fill="rgb(232,18,1)" fg:x="228" fg:w="2"/><text x="8.7007%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.07%)</title><rect x="8.4507%" y="325" width="0.0741%" height="15" fill="rgb(215,41,42)" fg:x="228" fg:w="2"/><text x="8.7007%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.07%)</title><rect x="8.4507%" y="309" width="0.0741%" height="15" fill="rgb(224,123,36)" fg:x="228" fg:w="2"/><text x="8.7007%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="8.4507%" y="293" width="0.0741%" height="15" fill="rgb(240,125,3)" fg:x="228" fg:w="2"/><text x="8.7007%" y="303.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="8.4507%" y="277" width="0.0741%" height="15" fill="rgb(205,98,50)" fg:x="228" fg:w="2"/><text x="8.7007%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="8.4507%" y="261" width="0.0741%" height="15" fill="rgb(205,185,37)" fg:x="228" fg:w="2"/><text x="8.7007%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="8.4507%" y="245" width="0.0741%" height="15" fill="rgb(238,207,15)" fg:x="228" fg:w="2"/><text x="8.7007%" y="255.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.07%)</title><rect x="8.4507%" y="229" width="0.0741%" height="15" fill="rgb(213,199,42)" fg:x="228" fg:w="2"/><text x="8.7007%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="8.4507%" y="213" width="0.0741%" height="15" fill="rgb(235,201,11)" fg:x="228" fg:w="2"/><text x="8.7007%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.07%)</title><rect x="8.4507%" y="197" width="0.0741%" height="15" fill="rgb(207,46,11)" fg:x="228" fg:w="2"/><text x="8.7007%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.07%)</title><rect x="8.4507%" y="181" width="0.0741%" height="15" fill="rgb(241,35,35)" fg:x="228" fg:w="2"/><text x="8.7007%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.07%)</title><rect x="8.4507%" y="165" width="0.0741%" height="15" fill="rgb(243,32,47)" fg:x="228" fg:w="2"/><text x="8.7007%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.07%)</title><rect x="8.4507%" y="149" width="0.0741%" height="15" fill="rgb(247,202,23)" fg:x="228" fg:w="2"/><text x="8.7007%" y="159.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt; (2 samples, 0.07%)</title><rect x="8.4507%" y="133" width="0.0741%" height="15" fill="rgb(219,102,11)" fg:x="228" fg:w="2"/><text x="8.7007%" y="143.50"></text></g><g><title> 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (2 samples, 0.07%)</title><rect x="8.4507%" y="117" width="0.0741%" height="15" fill="rgb(243,110,44)" fg:x="228" fg:w="2"/><text x="8.7007%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt; (2 samples, 0.07%)</title><rect x="8.4507%" y="101" width="0.0741%" height="15" fill="rgb(222,74,54)" fg:x="228" fg:w="2"/><text x="8.7007%" y="111.50"></text></g><g><title> 2]&gt;&gt;::from_lanes (2 samples, 0.07%)</title><rect x="8.4507%" y="85" width="0.0741%" height="15" fill="rgb(216,99,12)" fg:x="228" fg:w="2"/><text x="8.7007%" y="95.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (2 samples, 0.07%)</title><rect x="8.4507%" y="69" width="0.0741%" height="15" fill="rgb(226,22,26)" fg:x="228" fg:w="2"/><text x="8.7007%" y="79.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (2 samples, 0.07%)</title><rect x="8.4507%" y="53" width="0.0741%" height="15" fill="rgb(217,163,10)" fg:x="228" fg:w="2"/><text x="8.7007%" y="63.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (2 samples, 0.07%)</title><rect x="8.4507%" y="37" width="0.0741%" height="15" fill="rgb(213,25,53)" fg:x="228" fg:w="2"/><text x="8.7007%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="10.2669%" y="165" width="0.1112%" height="15" fill="rgb(252,105,26)" fg:x="277" fg:w="3"/><text x="10.5169%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="10.2669%" y="149" width="0.1112%" height="15" fill="rgb(220,39,43)" fg:x="277" fg:w="3"/><text x="10.5169%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="10.2669%" y="133" width="0.1112%" height="15" fill="rgb(229,68,48)" fg:x="277" fg:w="3"/><text x="10.5169%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.11%)</title><rect x="10.2669%" y="117" width="0.1112%" height="15" fill="rgb(252,8,32)" fg:x="277" fg:w="3"/><text x="10.5169%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="10.2669%" y="101" width="0.1112%" height="15" fill="rgb(223,20,43)" fg:x="277" fg:w="3"/><text x="10.5169%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="10.2669%" y="85" width="0.1112%" height="15" fill="rgb(229,81,49)" fg:x="277" fg:w="3"/><text x="10.5169%" y="95.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="10.2669%" y="69" width="0.1112%" height="15" fill="rgb(236,28,36)" fg:x="277" fg:w="3"/><text x="10.5169%" y="79.50"></text></g><g><title>&lt;briolette_sim::TransactionCoin as core::clone::Clone&gt;::clone (11 samples, 0.41%)</title><rect x="10.2669%" y="261" width="0.4077%" height="15" fill="rgb(249,185,26)" fg:x="277" fg:w="11"/><text x="10.5169%" y="271.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (11 samples, 0.41%)</title><rect x="10.2669%" y="245" width="0.4077%" height="15" fill="rgb(249,174,33)" fg:x="277" fg:w="11"/><text x="10.5169%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.41%)</title><rect x="10.2669%" y="229" width="0.4077%" height="15" fill="rgb(233,201,37)" fg:x="277" fg:w="11"/><text x="10.5169%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.41%)</title><rect x="10.2669%" y="213" width="0.4077%" height="15" fill="rgb(221,78,26)" fg:x="277" fg:w="11"/><text x="10.5169%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.41%)</title><rect x="10.2669%" y="197" width="0.4077%" height="15" fill="rgb(250,127,30)" fg:x="277" fg:w="11"/><text x="10.5169%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.41%)</title><rect x="10.2669%" y="181" width="0.4077%" height="15" fill="rgb(230,49,44)" fg:x="277" fg:w="11"/><text x="10.5169%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (8 samples, 0.30%)</title><rect x="10.3781%" y="165" width="0.2965%" height="15" fill="rgb(229,67,23)" fg:x="280" fg:w="8"/><text x="10.6281%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.30%)</title><rect x="10.3781%" y="149" width="0.2965%" height="15" fill="rgb(249,83,47)" fg:x="280" fg:w="8"/><text x="10.6281%" y="159.50"></text></g><g><title>&lt;absim::EventQueue&lt;S&gt; as absim::Enqueue&lt;S&gt;&gt;::enqueue (60 samples, 2.22%)</title><rect x="8.5248%" y="373" width="2.2239%" height="15" fill="rgb(215,43,3)" fg:x="230" fg:w="60"/><text x="8.7748%" y="383.50">&lt;..</text></g><g><title>&lt;briolette_sim::EventData as core::clone::Clone&gt;::clone (57 samples, 2.11%)</title><rect x="8.6360%" y="357" width="2.1127%" height="15" fill="rgb(238,154,13)" fg:x="233" fg:w="57"/><text x="8.8860%" y="367.50">&lt;..</text></g><g><title>&lt;briolette_sim::TransactData as core::clone::Clone&gt;::clone (35 samples, 1.30%)</title><rect x="9.4514%" y="341" width="1.2973%" height="15" fill="rgb(219,56,2)" fg:x="255" fg:w="35"/><text x="9.7014%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 1.30%)</title><rect x="9.4514%" y="325" width="1.2973%" height="15" fill="rgb(233,0,4)" fg:x="255" fg:w="35"/><text x="9.7014%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 1.30%)</title><rect x="9.4514%" y="309" width="1.2973%" height="15" fill="rgb(235,30,7)" fg:x="255" fg:w="35"/><text x="9.7014%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 1.30%)</title><rect x="9.4514%" y="293" width="1.2973%" height="15" fill="rgb(250,79,13)" fg:x="255" fg:w="35"/><text x="9.7014%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 1.30%)</title><rect x="9.4514%" y="277" width="1.2973%" height="15" fill="rgb(211,146,34)" fg:x="255" fg:w="35"/><text x="9.7014%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="10.6746%" y="261" width="0.0741%" height="15" fill="rgb(228,22,38)" fg:x="288" fg:w="2"/><text x="10.9246%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="10.6746%" y="245" width="0.0741%" height="15" fill="rgb(235,168,5)" fg:x="288" fg:w="2"/><text x="10.9246%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="10.6746%" y="229" width="0.0741%" height="15" fill="rgb(221,155,16)" fg:x="288" fg:w="2"/><text x="10.9246%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="10.6746%" y="213" width="0.0741%" height="15" fill="rgb(215,215,53)" fg:x="288" fg:w="2"/><text x="10.9246%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="10.6746%" y="197" width="0.0741%" height="15" fill="rgb(223,4,10)" fg:x="288" fg:w="2"/><text x="10.9246%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="10.6746%" y="181" width="0.0741%" height="15" fill="rgb(234,103,6)" fg:x="288" fg:w="2"/><text x="10.9246%" y="191.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="10.6746%" y="165" width="0.0741%" height="15" fill="rgb(227,97,0)" fg:x="288" fg:w="2"/><text x="10.9246%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (264 samples, 9.79%)</title><rect x="10.7487%" y="341" width="9.7850%" height="15" fill="rgb(234,150,53)" fg:x="290" fg:w="264"/><text x="10.9987%" y="351.50">&lt;alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_slice (264 samples, 9.79%)</title><rect x="10.7487%" y="325" width="9.7850%" height="15" fill="rgb(228,201,54)" fg:x="290" fg:w="264"/><text x="10.9987%" y="335.50">alloc::vec::Ve..</text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (265 samples, 9.82%)</title><rect x="10.7487%" y="373" width="9.8221%" height="15" fill="rgb(222,22,37)" fg:x="290" fg:w="265"/><text x="10.9987%" y="383.50">&lt;briolette_sim..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (265 samples, 9.82%)</title><rect x="10.7487%" y="357" width="9.8221%" height="15" fill="rgb(237,53,32)" fg:x="290" fg:w="265"/><text x="10.9987%" y="367.50">&lt;alloc::vec::V..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="20.5337%" y="341" width="0.0371%" height="15" fill="rgb(233,25,53)" fg:x="554" fg:w="1"/><text x="20.7837%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="20.5337%" y="325" width="0.0371%" height="15" fill="rgb(210,40,34)" fg:x="554" fg:w="1"/><text x="20.7837%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="20.5337%" y="309" width="0.0371%" height="15" fill="rgb(241,220,44)" fg:x="554" fg:w="1"/><text x="20.7837%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="20.5337%" y="293" width="0.0371%" height="15" fill="rgb(235,28,35)" fg:x="554" fg:w="1"/><text x="20.7837%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="20.5337%" y="277" width="0.0371%" height="15" fill="rgb(210,56,17)" fg:x="554" fg:w="1"/><text x="20.7837%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="20.5337%" y="261" width="0.0371%" height="15" fill="rgb(224,130,29)" fg:x="554" fg:w="1"/><text x="20.7837%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="20.5337%" y="245" width="0.0371%" height="15" fill="rgb(235,212,8)" fg:x="554" fg:w="1"/><text x="20.7837%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="20.5337%" y="229" width="0.0371%" height="15" fill="rgb(223,33,50)" fg:x="554" fg:w="1"/><text x="20.7837%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="20.5337%" y="213" width="0.0371%" height="15" fill="rgb(219,149,13)" fg:x="554" fg:w="1"/><text x="20.7837%" y="223.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="20.5337%" y="197" width="0.0371%" height="15" fill="rgb(250,156,29)" fg:x="554" fg:w="1"/><text x="20.7837%" y="207.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as briolette_sim::SimulationTools&gt;::get_uniform (2 samples, 0.07%)</title><rect x="20.5708%" y="373" width="0.0741%" height="15" fill="rgb(216,193,19)" fg:x="555" fg:w="2"/><text x="20.8208%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::Uniform&lt;X&gt; as rand::distributions::distribution::Distribution&lt;X&gt;&gt;::sample (2 samples, 0.07%)</title><rect x="20.5708%" y="357" width="0.0741%" height="15" fill="rgb(216,135,14)" fg:x="555" fg:w="2"/><text x="20.8208%" y="367.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample (2 samples, 0.07%)</title><rect x="20.5708%" y="341" width="0.0741%" height="15" fill="rgb(241,47,5)" fg:x="555" fg:w="2"/><text x="20.8208%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.07%)</title><rect x="20.5708%" y="325" width="0.0741%" height="15" fill="rgb(233,42,35)" fg:x="555" fg:w="2"/><text x="20.8208%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.07%)</title><rect x="20.5708%" y="309" width="0.0741%" height="15" fill="rgb(231,13,6)" fg:x="555" fg:w="2"/><text x="20.8208%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="20.5708%" y="293" width="0.0741%" height="15" fill="rgb(207,181,40)" fg:x="555" fg:w="2"/><text x="20.8208%" y="303.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="20.5708%" y="277" width="0.0741%" height="15" fill="rgb(254,173,49)" fg:x="555" fg:w="2"/><text x="20.8208%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="20.5708%" y="261" width="0.0741%" height="15" fill="rgb(221,1,38)" fg:x="555" fg:w="2"/><text x="20.8208%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="20.5708%" y="245" width="0.0741%" height="15" fill="rgb(206,124,46)" fg:x="555" fg:w="2"/><text x="20.8208%" y="255.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.07%)</title><rect x="20.5708%" y="229" width="0.0741%" height="15" fill="rgb(249,21,11)" fg:x="555" fg:w="2"/><text x="20.8208%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.07%)</title><rect x="20.5708%" y="213" width="0.0741%" height="15" fill="rgb(222,201,40)" fg:x="555" fg:w="2"/><text x="20.8208%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.07%)</title><rect x="20.5708%" y="197" width="0.0741%" height="15" fill="rgb(235,61,29)" fg:x="555" fg:w="2"/><text x="20.8208%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.07%)</title><rect x="20.5708%" y="181" width="0.0741%" height="15" fill="rgb(219,207,3)" fg:x="555" fg:w="2"/><text x="20.8208%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.07%)</title><rect x="20.5708%" y="165" width="0.0741%" height="15" fill="rgb(222,56,46)" fg:x="555" fg:w="2"/><text x="20.8208%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.07%)</title><rect x="20.5708%" y="149" width="0.0741%" height="15" fill="rgb(239,76,54)" fg:x="555" fg:w="2"/><text x="20.8208%" y="159.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.07%)</title><rect x="20.5708%" y="133" width="0.0741%" height="15" fill="rgb(231,124,27)" fg:x="555" fg:w="2"/><text x="20.8208%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (2 samples, 0.07%)</title><rect x="20.5708%" y="117" width="0.0741%" height="15" fill="rgb(249,195,6)" fg:x="555" fg:w="2"/><text x="20.8208%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (2 samples, 0.07%)</title><rect x="20.5708%" y="101" width="0.0741%" height="15" fill="rgb(237,174,47)" fg:x="555" fg:w="2"/><text x="20.8208%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (2 samples, 0.07%)</title><rect x="20.5708%" y="85" width="0.0741%" height="15" fill="rgb(206,201,31)" fg:x="555" fg:w="2"/><text x="20.8208%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.30%)</title><rect x="20.6820%" y="309" width="0.2965%" height="15" fill="rgb(231,57,52)" fg:x="558" fg:w="8"/><text x="20.9320%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.26%)</title><rect x="20.7191%" y="293" width="0.2595%" height="15" fill="rgb(248,177,22)" fg:x="559" fg:w="7"/><text x="20.9691%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.26%)</title><rect x="20.7191%" y="277" width="0.2595%" height="15" fill="rgb(215,211,37)" fg:x="559" fg:w="7"/><text x="20.9691%" y="287.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.26%)</title><rect x="20.7191%" y="261" width="0.2595%" height="15" fill="rgb(241,128,51)" fg:x="559" fg:w="7"/><text x="20.9691%" y="271.50"></text></g><g><title>__rdl_realloc (4 samples, 0.15%)</title><rect x="20.8302%" y="245" width="0.1483%" height="15" fill="rgb(227,165,31)" fg:x="562" fg:w="4"/><text x="21.0802%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4 samples, 0.15%)</title><rect x="20.8302%" y="229" width="0.1483%" height="15" fill="rgb(228,167,24)" fg:x="562" fg:w="4"/><text x="21.0802%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.59%)</title><rect x="20.6449%" y="373" width="0.5930%" height="15" fill="rgb(228,143,12)" fg:x="557" fg:w="16"/><text x="20.8949%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (16 samples, 0.59%)</title><rect x="20.6449%" y="357" width="0.5930%" height="15" fill="rgb(249,149,8)" fg:x="557" fg:w="16"/><text x="20.8949%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (16 samples, 0.59%)</title><rect x="20.6449%" y="341" width="0.5930%" height="15" fill="rgb(243,35,44)" fg:x="557" fg:w="16"/><text x="20.8949%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (16 samples, 0.59%)</title><rect x="20.6449%" y="325" width="0.5930%" height="15" fill="rgb(246,89,9)" fg:x="557" fg:w="16"/><text x="20.8949%" y="335.50"></text></g><g><title>core::cmp::max (7 samples, 0.26%)</title><rect x="20.9785%" y="309" width="0.2595%" height="15" fill="rgb(233,213,13)" fg:x="566" fg:w="7"/><text x="21.2285%" y="319.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.26%)</title><rect x="20.9785%" y="293" width="0.2595%" height="15" fill="rgb(233,141,41)" fg:x="566" fg:w="7"/><text x="21.2285%" y="303.50"></text></g><g><title>core::cmp::max_by (7 samples, 0.26%)</title><rect x="20.9785%" y="277" width="0.2595%" height="15" fill="rgb(239,167,4)" fg:x="566" fg:w="7"/><text x="21.2285%" y="287.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (345 samples, 12.79%)</title><rect x="8.5248%" y="389" width="12.7872%" height="15" fill="rgb(209,217,16)" fg:x="230" fg:w="345"/><text x="8.7748%" y="399.50">briolette_sim::simu..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="373" width="0.0741%" height="15" fill="rgb(219,88,35)" fg:x="573" fg:w="2"/><text x="21.4880%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactData&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="357" width="0.0741%" height="15" fill="rgb(220,193,23)" fg:x="573" fg:w="2"/><text x="21.4880%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::TransactionCoin&gt;&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="341" width="0.0741%" height="15" fill="rgb(230,90,52)" fg:x="573" fg:w="2"/><text x="21.4880%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="21.2380%" y="325" width="0.0741%" height="15" fill="rgb(252,106,19)" fg:x="573" fg:w="2"/><text x="21.4880%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::TransactionCoin]&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="309" width="0.0741%" height="15" fill="rgb(206,74,20)" fg:x="573" fg:w="2"/><text x="21.4880%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactionCoin&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="293" width="0.0741%" height="15" fill="rgb(230,138,44)" fg:x="573" fg:w="2"/><text x="21.4880%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="277" width="0.0741%" height="15" fill="rgb(235,182,43)" fg:x="573" fg:w="2"/><text x="21.4880%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="261" width="0.0741%" height="15" fill="rgb(242,16,51)" fg:x="573" fg:w="2"/><text x="21.4880%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="21.2380%" y="245" width="0.0741%" height="15" fill="rgb(248,9,4)" fg:x="573" fg:w="2"/><text x="21.4880%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="21.2380%" y="229" width="0.0741%" height="15" fill="rgb(210,31,22)" fg:x="573" fg:w="2"/><text x="21.4880%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.07%)</title><rect x="21.2380%" y="213" width="0.0741%" height="15" fill="rgb(239,54,39)" fg:x="573" fg:w="2"/><text x="21.4880%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="21.2380%" y="197" width="0.0741%" height="15" fill="rgb(230,99,41)" fg:x="573" fg:w="2"/><text x="21.4880%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="21.2380%" y="181" width="0.0741%" height="15" fill="rgb(253,106,12)" fg:x="573" fg:w="2"/><text x="21.4880%" y="191.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="21.2750%" y="165" width="0.0371%" height="15" fill="rgb(213,46,41)" fg:x="574" fg:w="1"/><text x="21.5250%" y="175.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="21.2750%" y="149" width="0.0371%" height="15" fill="rgb(215,133,35)" fg:x="574" fg:w="1"/><text x="21.5250%" y="159.50"></text></g><g><title>core::cmp::PartialEq::ne (1 samples, 0.04%)</title><rect x="21.3121%" y="389" width="0.0371%" height="15" fill="rgb(213,28,5)" fg:x="575" fg:w="1"/><text x="21.5621%" y="399.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="21.3121%" y="373" width="0.0371%" height="15" fill="rgb(215,77,49)" fg:x="575" fg:w="1"/><text x="21.5621%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="389" width="0.0741%" height="15" fill="rgb(248,100,22)" fg:x="576" fg:w="2"/><text x="21.5991%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactData&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="373" width="0.0741%" height="15" fill="rgb(208,67,9)" fg:x="576" fg:w="2"/><text x="21.5991%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::TransactionCoin&gt;&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="357" width="0.0741%" height="15" fill="rgb(219,133,21)" fg:x="576" fg:w="2"/><text x="21.5991%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="21.3491%" y="341" width="0.0741%" height="15" fill="rgb(246,46,29)" fg:x="576" fg:w="2"/><text x="21.5991%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::TransactionCoin]&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="325" width="0.0741%" height="15" fill="rgb(246,185,52)" fg:x="576" fg:w="2"/><text x="21.5991%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactionCoin&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="309" width="0.0741%" height="15" fill="rgb(252,136,11)" fg:x="576" fg:w="2"/><text x="21.5991%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="293" width="0.0741%" height="15" fill="rgb(219,138,53)" fg:x="576" fg:w="2"/><text x="21.5991%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="277" width="0.0741%" height="15" fill="rgb(211,51,23)" fg:x="576" fg:w="2"/><text x="21.5991%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="21.3491%" y="261" width="0.0741%" height="15" fill="rgb(247,221,28)" fg:x="576" fg:w="2"/><text x="21.5991%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="21.3491%" y="245" width="0.0741%" height="15" fill="rgb(251,222,45)" fg:x="576" fg:w="2"/><text x="21.5991%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.07%)</title><rect x="21.3491%" y="229" width="0.0741%" height="15" fill="rgb(217,162,53)" fg:x="576" fg:w="2"/><text x="21.5991%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="21.3491%" y="213" width="0.0741%" height="15" fill="rgb(229,93,14)" fg:x="576" fg:w="2"/><text x="21.5991%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="21.3491%" y="197" width="0.0741%" height="15" fill="rgb(209,67,49)" fg:x="576" fg:w="2"/><text x="21.5991%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (1 samples, 0.04%)</title><rect x="21.4233%" y="389" width="0.0371%" height="15" fill="rgb(213,87,29)" fg:x="578" fg:w="1"/><text x="21.6733%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.04%)</title><rect x="21.4233%" y="373" width="0.0371%" height="15" fill="rgb(205,151,52)" fg:x="578" fg:w="1"/><text x="21.6733%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.04%)</title><rect x="21.4233%" y="357" width="0.0371%" height="15" fill="rgb(253,215,39)" fg:x="578" fg:w="1"/><text x="21.6733%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="21.4233%" y="341" width="0.0371%" height="15" fill="rgb(221,220,41)" fg:x="578" fg:w="1"/><text x="21.6733%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockWriteGuard&lt;briolette_sim::SimulatorHelpers&gt;&gt; (43 samples, 1.59%)</title><rect x="21.4603%" y="389" width="1.5938%" height="15" fill="rgb(218,133,21)" fg:x="579" fg:w="43"/><text x="21.7103%" y="399.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockWriteGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 1.59%)</title><rect x="21.4603%" y="373" width="1.5938%" height="15" fill="rgb(221,193,43)" fg:x="579" fg:w="43"/><text x="21.7103%" y="383.50"></text></g><g><title>std::sys::sync::rwlock::futex::RwLock::write_unlock (43 samples, 1.59%)</title><rect x="21.4603%" y="357" width="1.5938%" height="15" fill="rgb(240,128,52)" fg:x="579" fg:w="43"/><text x="21.7103%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (43 samples, 1.59%)</title><rect x="21.4603%" y="341" width="1.5938%" height="15" fill="rgb(253,114,12)" fg:x="579" fg:w="43"/><text x="21.7103%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (43 samples, 1.59%)</title><rect x="21.4603%" y="325" width="1.5938%" height="15" fill="rgb(215,223,47)" fg:x="579" fg:w="43"/><text x="21.7103%" y="335.50"></text></g><g><title>rand::rng::Rng::gen_range (2 samples, 0.07%)</title><rect x="23.0541%" y="389" width="0.0741%" height="15" fill="rgb(248,225,23)" fg:x="622" fg:w="2"/><text x="23.3041%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (2 samples, 0.07%)</title><rect x="23.0541%" y="373" width="0.0741%" height="15" fill="rgb(250,108,0)" fg:x="622" fg:w="2"/><text x="23.3041%" y="383.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (2 samples, 0.07%)</title><rect x="23.0541%" y="357" width="0.0741%" height="15" fill="rgb(228,208,7)" fg:x="622" fg:w="2"/><text x="23.3041%" y="367.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (2 samples, 0.07%)</title><rect x="23.0541%" y="341" width="0.0741%" height="15" fill="rgb(244,45,10)" fg:x="622" fg:w="2"/><text x="23.3041%" y="351.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.07%)</title><rect x="23.0541%" y="325" width="0.0741%" height="15" fill="rgb(207,125,25)" fg:x="622" fg:w="2"/><text x="23.3041%" y="335.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.07%)</title><rect x="23.0541%" y="309" width="0.0741%" height="15" fill="rgb(210,195,18)" fg:x="622" fg:w="2"/><text x="23.3041%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="23.0541%" y="293" width="0.0741%" height="15" fill="rgb(249,80,12)" fg:x="622" fg:w="2"/><text x="23.3041%" y="303.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="23.0541%" y="277" width="0.0741%" height="15" fill="rgb(221,65,9)" fg:x="622" fg:w="2"/><text x="23.3041%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="23.0541%" y="261" width="0.0741%" height="15" fill="rgb(235,49,36)" fg:x="622" fg:w="2"/><text x="23.3041%" y="271.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2 samples, 0.07%)</title><rect x="23.0541%" y="245" width="0.0741%" height="15" fill="rgb(225,32,20)" fg:x="622" fg:w="2"/><text x="23.3041%" y="255.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 0.04%)</title><rect x="23.0912%" y="229" width="0.0371%" height="15" fill="rgb(215,141,46)" fg:x="623" fg:w="1"/><text x="23.3412%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 0.04%)</title><rect x="23.0912%" y="213" width="0.0371%" height="15" fill="rgb(250,160,47)" fg:x="623" fg:w="1"/><text x="23.3412%" y="223.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 0.04%)</title><rect x="23.0912%" y="197" width="0.0371%" height="15" fill="rgb(216,222,40)" fg:x="623" fg:w="1"/><text x="23.3412%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 0.04%)</title><rect x="23.0912%" y="181" width="0.0371%" height="15" fill="rgb(234,217,39)" fg:x="623" fg:w="1"/><text x="23.3412%" y="191.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 0.04%)</title><rect x="23.0912%" y="165" width="0.0371%" height="15" fill="rgb(207,178,40)" fg:x="623" fg:w="1"/><text x="23.3412%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 0.04%)</title><rect x="23.0912%" y="149" width="0.0371%" height="15" fill="rgb(221,136,13)" fg:x="623" fg:w="1"/><text x="23.3412%" y="159.50"></text></g><g><title>rand_chacha::guts::round (1 samples, 0.04%)</title><rect x="23.0912%" y="133" width="0.0371%" height="15" fill="rgb(249,199,10)" fg:x="623" fg:w="1"/><text x="23.3412%" y="143.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (1 samples, 0.04%)</title><rect x="23.0912%" y="117" width="0.0371%" height="15" fill="rgb(249,222,13)" fg:x="623" fg:w="1"/><text x="23.3412%" y="127.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (1 samples, 0.04%)</title><rect x="23.0912%" y="101" width="0.0371%" height="15" fill="rgb(244,185,38)" fg:x="623" fg:w="1"/><text x="23.3412%" y="111.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (1 samples, 0.04%)</title><rect x="23.0912%" y="85" width="0.0371%" height="15" fill="rgb(236,202,9)" fg:x="623" fg:w="1"/><text x="23.3412%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.19%)</title><rect x="23.1282%" y="373" width="1.1861%" height="15" fill="rgb(250,229,37)" fg:x="624" fg:w="32"/><text x="23.3782%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (32 samples, 1.19%)</title><rect x="23.1282%" y="357" width="1.1861%" height="15" fill="rgb(206,174,23)" fg:x="624" fg:w="32"/><text x="23.3782%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 1.19%)</title><rect x="23.1282%" y="341" width="1.1861%" height="15" fill="rgb(211,33,43)" fg:x="624" fg:w="32"/><text x="23.3782%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (32 samples, 1.19%)</title><rect x="23.1282%" y="325" width="1.1861%" height="15" fill="rgb(245,58,50)" fg:x="624" fg:w="32"/><text x="23.3782%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32 samples, 1.19%)</title><rect x="23.1282%" y="309" width="1.1861%" height="15" fill="rgb(244,68,36)" fg:x="624" fg:w="32"/><text x="23.3782%" y="319.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate::{{closure}} (32 samples, 1.19%)</title><rect x="23.1282%" y="293" width="1.1861%" height="15" fill="rgb(232,229,15)" fg:x="624" fg:w="32"/><text x="23.3782%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (23 samples, 0.85%)</title><rect x="30.0222%" y="149" width="0.8525%" height="15" fill="rgb(254,30,23)" fg:x="810" fg:w="23"/><text x="30.2722%" y="159.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (23 samples, 0.85%)</title><rect x="30.0222%" y="133" width="0.8525%" height="15" fill="rgb(235,160,14)" fg:x="810" fg:w="23"/><text x="30.2722%" y="143.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (23 samples, 0.85%)</title><rect x="30.0222%" y="117" width="0.8525%" height="15" fill="rgb(212,155,44)" fg:x="810" fg:w="23"/><text x="30.2722%" y="127.50"></text></g><g><title>rand_chacha::guts::round (23 samples, 0.85%)</title><rect x="30.0222%" y="101" width="0.8525%" height="15" fill="rgb(226,2,50)" fg:x="810" fg:w="23"/><text x="30.2722%" y="111.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.85%)</title><rect x="30.0222%" y="85" width="0.8525%" height="15" fill="rgb(234,177,6)" fg:x="810" fg:w="23"/><text x="30.2722%" y="95.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.85%)</title><rect x="30.0222%" y="69" width="0.8525%" height="15" fill="rgb(217,24,9)" fg:x="810" fg:w="23"/><text x="30.2722%" y="79.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (23 samples, 0.85%)</title><rect x="30.0222%" y="53" width="0.8525%" height="15" fill="rgb(220,13,46)" fg:x="810" fg:w="23"/><text x="30.2722%" y="63.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (23 samples, 0.85%)</title><rect x="30.0222%" y="37" width="0.8525%" height="15" fill="rgb(239,221,27)" fg:x="810" fg:w="23"/><text x="30.2722%" y="47.50"></text></g><g><title>rand::seq::IteratorRandom::choose (210 samples, 7.78%)</title><rect x="23.1282%" y="389" width="7.7835%" height="15" fill="rgb(222,198,25)" fg:x="624" fg:w="210"/><text x="23.3782%" y="399.50">rand::seq::..</text></g><g><title>rand::seq::gen_index (178 samples, 6.60%)</title><rect x="24.3143%" y="373" width="6.5975%" height="15" fill="rgb(211,99,13)" fg:x="656" fg:w="178"/><text x="24.5643%" y="383.50">rand::seq..</text></g><g><title>rand::rng::Rng::gen_range (178 samples, 6.60%)</title><rect x="24.3143%" y="357" width="6.5975%" height="15" fill="rgb(232,111,31)" fg:x="656" fg:w="178"/><text x="24.5643%" y="367.50">rand::rng..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (178 samples, 6.60%)</title><rect x="24.3143%" y="341" width="6.5975%" height="15" fill="rgb(245,82,37)" fg:x="656" fg:w="178"/><text x="24.5643%" y="351.50">&lt;core::op..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (178 samples, 6.60%)</title><rect x="24.3143%" y="325" width="6.5975%" height="15" fill="rgb(227,149,46)" fg:x="656" fg:w="178"/><text x="24.5643%" y="335.50">&lt;rand::di..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;u32&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (178 samples, 6.60%)</title><rect x="24.3143%" y="309" width="6.5975%" height="15" fill="rgb(218,36,50)" fg:x="656" fg:w="178"/><text x="24.5643%" y="319.50">&lt;rand::di..</text></g><g><title>rand::rng::Rng::gen (178 samples, 6.60%)</title><rect x="24.3143%" y="293" width="6.5975%" height="15" fill="rgb(226,80,48)" fg:x="656" fg:w="178"/><text x="24.5643%" y="303.50">rand::rng..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (178 samples, 6.60%)</title><rect x="24.3143%" y="277" width="6.5975%" height="15" fill="rgb(238,224,15)" fg:x="656" fg:w="178"/><text x="24.5643%" y="287.50">rand::dis..</text></g><g><title>&lt;alloc::boxed::Box&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (178 samples, 6.60%)</title><rect x="24.3143%" y="261" width="6.5975%" height="15" fill="rgb(241,136,10)" fg:x="656" fg:w="178"/><text x="24.5643%" y="271.50">&lt;alloc::b..</text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u32 (178 samples, 6.60%)</title><rect x="24.3143%" y="245" width="6.5975%" height="15" fill="rgb(208,32,45)" fg:x="656" fg:w="178"/><text x="24.5643%" y="255.50">&lt;rand::rn..</text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u32 (178 samples, 6.60%)</title><rect x="24.3143%" y="229" width="6.5975%" height="15" fill="rgb(207,135,9)" fg:x="656" fg:w="178"/><text x="24.5643%" y="239.50">&lt;rand_cha..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (178 samples, 6.60%)</title><rect x="24.3143%" y="213" width="6.5975%" height="15" fill="rgb(206,86,44)" fg:x="656" fg:w="178"/><text x="24.5643%" y="223.50">&lt;rand_cor..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (24 samples, 0.89%)</title><rect x="30.0222%" y="197" width="0.8895%" height="15" fill="rgb(245,177,15)" fg:x="810" fg:w="24"/><text x="30.2722%" y="207.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (24 samples, 0.89%)</title><rect x="30.0222%" y="181" width="0.8895%" height="15" fill="rgb(206,64,50)" fg:x="810" fg:w="24"/><text x="30.2722%" y="191.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (24 samples, 0.89%)</title><rect x="30.0222%" y="165" width="0.8895%" height="15" fill="rgb(234,36,40)" fg:x="810" fg:w="24"/><text x="30.2722%" y="175.50"></text></g><g><title>rand_chacha::guts::refill_wide (1 samples, 0.04%)</title><rect x="30.8747%" y="149" width="0.0371%" height="15" fill="rgb(213,64,8)" fg:x="833" fg:w="1"/><text x="31.1247%" y="159.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (1 samples, 0.04%)</title><rect x="30.8747%" y="133" width="0.0371%" height="15" fill="rgb(210,75,36)" fg:x="833" fg:w="1"/><text x="31.1247%" y="143.50"></text></g><g><title>std_detect::detect::check_for (1 samples, 0.04%)</title><rect x="30.8747%" y="117" width="0.0371%" height="15" fill="rgb(229,88,21)" fg:x="833" fg:w="1"/><text x="31.1247%" y="127.50"></text></g><g><title>std_detect::detect::cache::test (1 samples, 0.04%)</title><rect x="30.8747%" y="101" width="0.0371%" height="15" fill="rgb(252,204,47)" fg:x="833" fg:w="1"/><text x="31.1247%" y="111.50"></text></g><g><title>std_detect::detect::cache::Cache::test (1 samples, 0.04%)</title><rect x="30.8747%" y="85" width="0.0371%" height="15" fill="rgb(208,77,27)" fg:x="833" fg:w="1"/><text x="31.1247%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.04%)</title><rect x="30.8747%" y="69" width="0.0371%" height="15" fill="rgb(221,76,26)" fg:x="833" fg:w="1"/><text x="31.1247%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.04%)</title><rect x="30.8747%" y="53" width="0.0371%" height="15" fill="rgb(225,139,18)" fg:x="833" fg:w="1"/><text x="31.1247%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="30.9118%" y="341" width="0.1112%" height="15" fill="rgb(230,137,11)" fg:x="834" fg:w="3"/><text x="31.1618%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="30.9118%" y="325" width="0.1112%" height="15" fill="rgb(212,28,1)" fg:x="834" fg:w="3"/><text x="31.1618%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="30.9118%" y="309" width="0.1112%" height="15" fill="rgb(248,164,17)" fg:x="834" fg:w="3"/><text x="31.1618%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="30.9118%" y="293" width="0.1112%" height="15" fill="rgb(222,171,42)" fg:x="834" fg:w="3"/><text x="31.1618%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.11%)</title><rect x="30.9118%" y="277" width="0.1112%" height="15" fill="rgb(243,84,45)" fg:x="834" fg:w="3"/><text x="31.1618%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="30.9859%" y="261" width="0.0371%" height="15" fill="rgb(252,49,23)" fg:x="836" fg:w="1"/><text x="31.2359%" y="271.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run::{{closure}} (684 samples, 25.35%)</title><rect x="5.7450%" y="421" width="25.3521%" height="15" fill="rgb(215,19,7)" fg:x="155" fg:w="684"/><text x="5.9950%" y="431.50">&lt;absim::clients::LocalSimulationClient&lt;S..</text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::generate (684 samples, 25.35%)</title><rect x="5.7450%" y="405" width="25.3521%" height="15" fill="rgb(238,81,41)" fg:x="155" fg:w="684"/><text x="5.9950%" y="415.50">&lt;briolette_sim::simulator::Simulator as ..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.19%)</title><rect x="30.9118%" y="389" width="0.1853%" height="15" fill="rgb(210,199,37)" fg:x="834" fg:w="5"/><text x="31.1618%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.19%)</title><rect x="30.9118%" y="373" width="0.1853%" height="15" fill="rgb(244,192,49)" fg:x="834" fg:w="5"/><text x="31.1618%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.19%)</title><rect x="30.9118%" y="357" width="0.1853%" height="15" fill="rgb(226,211,11)" fg:x="834" fg:w="5"/><text x="31.1618%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.07%)</title><rect x="31.0230%" y="341" width="0.0741%" height="15" fill="rgb(236,162,54)" fg:x="837" fg:w="2"/><text x="31.2730%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.07%)</title><rect x="31.0230%" y="325" width="0.0741%" height="15" fill="rgb(220,229,9)" fg:x="837" fg:w="2"/><text x="31.2730%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.07%)</title><rect x="31.0230%" y="309" width="0.0741%" height="15" fill="rgb(250,87,22)" fg:x="837" fg:w="2"/><text x="31.2730%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="31.0230%" y="293" width="0.0741%" height="15" fill="rgb(239,43,17)" fg:x="837" fg:w="2"/><text x="31.2730%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="31.0230%" y="277" width="0.0741%" height="15" fill="rgb(231,177,25)" fg:x="837" fg:w="2"/><text x="31.2730%" y="287.50"></text></g><g><title>&lt;absim::clients::LocalSimulationClient&lt;S&gt; as absim::SimulationClient&lt;S&gt;&gt;::run (692 samples, 25.65%)</title><rect x="5.4855%" y="437" width="25.6486%" height="15" fill="rgb(219,179,1)" fg:x="148" fg:w="692"/><text x="5.7355%" y="447.50">&lt;absim::clients::LocalSimulationClient&lt;S&gt;..</text></g><g><title>&lt;briolette_sim::simulator::Simulator as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="421" width="0.0371%" height="15" fill="rgb(238,219,53)" fg:x="839" fg:w="1"/><text x="31.3471%" y="431.50"></text></g><g><title>&lt;briolette_sim::SimulatorHelpers as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="405" width="0.0371%" height="15" fill="rgb(232,167,36)" fg:x="839" fg:w="1"/><text x="31.3471%" y="415.50"></text></g><g><title>&lt;briolette_sim::Flights as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="389" width="0.0371%" height="15" fill="rgb(244,19,51)" fg:x="839" fg:w="1"/><text x="31.3471%" y="399.50"></text></g><g><title>&lt;rand_flight::Flight&lt;R,RD,T,_&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="373" width="0.0371%" height="15" fill="rgb(224,6,22)" fg:x="839" fg:w="1"/><text x="31.3471%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="357" width="0.0371%" height="15" fill="rgb(224,145,5)" fg:x="839" fg:w="1"/><text x="31.3471%" y="367.50"></text></g><g><title>&lt;T as core::clone::CloneToUninit&gt;::clone_to_uninit (1 samples, 0.04%)</title><rect x="31.0971%" y="341" width="0.0371%" height="15" fill="rgb(234,130,49)" fg:x="839" fg:w="1"/><text x="31.3471%" y="351.50"></text></g><g><title>&lt;T as core::clone::uninit::CopySpec&gt;::clone_one (1 samples, 0.04%)</title><rect x="31.0971%" y="325" width="0.0371%" height="15" fill="rgb(254,6,2)" fg:x="839" fg:w="1"/><text x="31.3471%" y="335.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="309" width="0.0371%" height="15" fill="rgb(208,96,46)" fg:x="839" fg:w="1"/><text x="31.3471%" y="319.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="293" width="0.0371%" height="15" fill="rgb(239,3,39)" fg:x="839" fg:w="1"/><text x="31.3471%" y="303.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="31.0971%" y="277" width="0.0371%" height="15" fill="rgb(233,210,1)" fg:x="839" fg:w="1"/><text x="31.3471%" y="287.50"></text></g><g><title>&lt;absim::extras::SimulationPopulation&lt;S&gt; as absim::Population&lt;S&gt;&gt;::get_mut (71 samples, 2.63%)</title><rect x="31.1342%" y="437" width="2.6316%" height="15" fill="rgb(244,137,37)" fg:x="840" fg:w="71"/><text x="31.3842%" y="447.50">&lt;a..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (71 samples, 2.63%)</title><rect x="31.1342%" y="421" width="2.6316%" height="15" fill="rgb(240,136,2)" fg:x="840" fg:w="71"/><text x="31.3842%" y="431.50">st..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (71 samples, 2.63%)</title><rect x="31.1342%" y="405" width="2.6316%" height="15" fill="rgb(239,18,37)" fg:x="840" fg:w="71"/><text x="31.3842%" y="415.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (71 samples, 2.63%)</title><rect x="31.1342%" y="389" width="2.6316%" height="15" fill="rgb(218,185,22)" fg:x="840" fg:w="71"/><text x="31.3842%" y="399.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (71 samples, 2.63%)</title><rect x="31.1342%" y="373" width="2.6316%" height="15" fill="rgb(225,218,4)" fg:x="840" fg:w="71"/><text x="31.3842%" y="383.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (71 samples, 2.63%)</title><rect x="31.1342%" y="357" width="2.6316%" height="15" fill="rgb(230,182,32)" fg:x="840" fg:w="71"/><text x="31.3842%" y="367.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (71 samples, 2.63%)</title><rect x="31.1342%" y="341" width="2.6316%" height="15" fill="rgb(242,56,43)" fg:x="840" fg:w="71"/><text x="31.3842%" y="351.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (71 samples, 2.63%)</title><rect x="31.1342%" y="325" width="2.6316%" height="15" fill="rgb(233,99,24)" fg:x="840" fg:w="71"/><text x="31.3842%" y="335.50">ha..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (71 samples, 2.63%)</title><rect x="31.1342%" y="309" width="2.6316%" height="15" fill="rgb(234,209,42)" fg:x="840" fg:w="71"/><text x="31.3842%" y="319.50">ha..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (71 samples, 2.63%)</title><rect x="31.1342%" y="293" width="2.6316%" height="15" fill="rgb(227,7,12)" fg:x="840" fg:w="71"/><text x="31.3842%" y="303.50">&lt;Q..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 2.63%)</title><rect x="31.1342%" y="277" width="2.6316%" height="15" fill="rgb(245,203,43)" fg:x="840" fg:w="71"/><text x="31.3842%" y="287.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (71 samples, 2.63%)</title><rect x="31.1342%" y="261" width="2.6316%" height="15" fill="rgb(238,205,33)" fg:x="840" fg:w="71"/><text x="31.3842%" y="271.50">co..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="33.7658%" y="197" width="0.0371%" height="15" fill="rgb(231,56,7)" fg:x="911" fg:w="1"/><text x="34.0158%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="33.7658%" y="181" width="0.0371%" height="15" fill="rgb(244,186,29)" fg:x="911" fg:w="1"/><text x="34.0158%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="33.7658%" y="165" width="0.0371%" height="15" fill="rgb(234,111,31)" fg:x="911" fg:w="1"/><text x="34.0158%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="33.7658%" y="149" width="0.0371%" height="15" fill="rgb(241,149,10)" fg:x="911" fg:w="1"/><text x="34.0158%" y="159.50"></text></g><g><title>&lt;absim::graph_utils::SimulationGraph as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="33.7658%" y="421" width="0.1483%" height="15" fill="rgb(249,206,44)" fg:x="911" fg:w="4"/><text x="34.0158%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="33.7658%" y="405" width="0.1483%" height="15" fill="rgb(251,153,30)" fg:x="911" fg:w="4"/><text x="34.0158%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.15%)</title><rect x="33.7658%" y="389" width="0.1483%" height="15" fill="rgb(239,152,38)" fg:x="911" fg:w="4"/><text x="34.0158%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.15%)</title><rect x="33.7658%" y="373" width="0.1483%" height="15" fill="rgb(249,139,47)" fg:x="911" fg:w="4"/><text x="34.0158%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.15%)</title><rect x="33.7658%" y="357" width="0.1483%" height="15" fill="rgb(244,64,35)" fg:x="911" fg:w="4"/><text x="34.0158%" y="367.50"></text></g><g><title>&lt;absim::graph_utils::Vertex as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="33.7658%" y="341" width="0.1483%" height="15" fill="rgb(216,46,15)" fg:x="911" fg:w="4"/><text x="34.0158%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="33.7658%" y="325" width="0.1483%" height="15" fill="rgb(250,74,19)" fg:x="911" fg:w="4"/><text x="34.0158%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.15%)</title><rect x="33.7658%" y="309" width="0.1483%" height="15" fill="rgb(249,42,33)" fg:x="911" fg:w="4"/><text x="34.0158%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.15%)</title><rect x="33.7658%" y="293" width="0.1483%" height="15" fill="rgb(242,149,17)" fg:x="911" fg:w="4"/><text x="34.0158%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.15%)</title><rect x="33.7658%" y="277" width="0.1483%" height="15" fill="rgb(244,29,21)" fg:x="911" fg:w="4"/><text x="34.0158%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="33.7658%" y="261" width="0.1483%" height="15" fill="rgb(220,130,37)" fg:x="911" fg:w="4"/><text x="34.0158%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="33.7658%" y="245" width="0.1483%" height="15" fill="rgb(211,67,2)" fg:x="911" fg:w="4"/><text x="34.0158%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (4 samples, 0.15%)</title><rect x="33.7658%" y="229" width="0.1483%" height="15" fill="rgb(235,68,52)" fg:x="911" fg:w="4"/><text x="34.0158%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (4 samples, 0.15%)</title><rect x="33.7658%" y="213" width="0.1483%" height="15" fill="rgb(246,142,3)" fg:x="911" fg:w="4"/><text x="34.0158%" y="223.50"></text></g><g><title>alloc::raw_vec::layout_array (3 samples, 0.11%)</title><rect x="33.8028%" y="197" width="0.1112%" height="15" fill="rgb(241,25,7)" fg:x="912" fg:w="3"/><text x="34.0528%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat (3 samples, 0.11%)</title><rect x="33.8028%" y="181" width="0.1112%" height="15" fill="rgb(242,119,39)" fg:x="912" fg:w="3"/><text x="34.0528%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (3 samples, 0.11%)</title><rect x="33.8028%" y="165" width="0.1112%" height="15" fill="rgb(241,98,45)" fg:x="912" fg:w="3"/><text x="34.0528%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (3 samples, 0.11%)</title><rect x="33.8028%" y="149" width="0.1112%" height="15" fill="rgb(254,28,30)" fg:x="912" fg:w="3"/><text x="34.0528%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (3 samples, 0.11%)</title><rect x="33.8028%" y="133" width="0.1112%" height="15" fill="rgb(241,142,54)" fg:x="912" fg:w="3"/><text x="34.0528%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="33.9140%" y="421" width="0.0371%" height="15" fill="rgb(222,85,15)" fg:x="915" fg:w="1"/><text x="34.1640%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="33.9140%" y="405" width="0.0371%" height="15" fill="rgb(210,85,47)" fg:x="915" fg:w="1"/><text x="34.1640%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="33.9140%" y="389" width="0.0371%" height="15" fill="rgb(224,206,25)" fg:x="915" fg:w="1"/><text x="34.1640%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="33.9140%" y="373" width="0.0371%" height="15" fill="rgb(243,201,19)" fg:x="915" fg:w="1"/><text x="34.1640%" y="383.50"></text></g><g><title>&lt;briolette_sim::SyncState as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="33.9140%" y="357" width="0.0371%" height="15" fill="rgb(236,59,4)" fg:x="915" fg:w="1"/><text x="34.1640%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="33.9140%" y="341" width="0.0371%" height="15" fill="rgb(254,179,45)" fg:x="915" fg:w="1"/><text x="34.1640%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="33.9140%" y="325" width="0.0371%" height="15" fill="rgb(226,14,10)" fg:x="915" fg:w="1"/><text x="34.1640%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="33.9140%" y="309" width="0.0371%" height="15" fill="rgb(244,27,41)" fg:x="915" fg:w="1"/><text x="34.1640%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="33.9140%" y="293" width="0.0371%" height="15" fill="rgb(235,35,32)" fg:x="915" fg:w="1"/><text x="34.1640%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="33.9140%" y="277" width="0.0371%" height="15" fill="rgb(218,68,31)" fg:x="915" fg:w="1"/><text x="34.1640%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="33.9140%" y="261" width="0.0371%" height="15" fill="rgb(207,120,37)" fg:x="915" fg:w="1"/><text x="34.1640%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="33.9140%" y="245" width="0.0371%" height="15" fill="rgb(227,98,0)" fg:x="915" fg:w="1"/><text x="34.1640%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="33.9140%" y="229" width="0.0371%" height="15" fill="rgb(207,7,3)" fg:x="915" fg:w="1"/><text x="34.1640%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="33.9140%" y="213" width="0.0371%" height="15" fill="rgb(206,98,19)" fg:x="915" fg:w="1"/><text x="34.1640%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="33.9140%" y="197" width="0.0371%" height="15" fill="rgb(217,5,26)" fg:x="915" fg:w="1"/><text x="34.1640%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="33.9140%" y="181" width="0.0371%" height="15" fill="rgb(235,190,38)" fg:x="915" fg:w="1"/><text x="34.1640%" y="191.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (17 samples, 0.63%)</title><rect x="33.9511%" y="421" width="0.6301%" height="15" fill="rgb(247,86,24)" fg:x="916" fg:w="17"/><text x="34.2011%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.63%)</title><rect x="33.9511%" y="405" width="0.6301%" height="15" fill="rgb(205,101,16)" fg:x="916" fg:w="17"/><text x="34.2011%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.63%)</title><rect x="33.9511%" y="389" width="0.6301%" height="15" fill="rgb(246,168,33)" fg:x="916" fg:w="17"/><text x="34.2011%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.63%)</title><rect x="33.9511%" y="373" width="0.6301%" height="15" fill="rgb(231,114,1)" fg:x="916" fg:w="17"/><text x="34.2011%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.63%)</title><rect x="33.9511%" y="357" width="0.6301%" height="15" fill="rgb(207,184,53)" fg:x="916" fg:w="17"/><text x="34.2011%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.63%)</title><rect x="33.9511%" y="341" width="0.6301%" height="15" fill="rgb(224,95,51)" fg:x="916" fg:w="17"/><text x="34.2011%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.63%)</title><rect x="33.9511%" y="325" width="0.6301%" height="15" fill="rgb(212,188,45)" fg:x="916" fg:w="17"/><text x="34.2011%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (17 samples, 0.63%)</title><rect x="33.9511%" y="309" width="0.6301%" height="15" fill="rgb(223,154,38)" fg:x="916" fg:w="17"/><text x="34.2011%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (17 samples, 0.63%)</title><rect x="33.9511%" y="293" width="0.6301%" height="15" fill="rgb(251,22,52)" fg:x="916" fg:w="17"/><text x="34.2011%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.63%)</title><rect x="33.9511%" y="277" width="0.6301%" height="15" fill="rgb(229,209,22)" fg:x="916" fg:w="17"/><text x="34.2011%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.63%)</title><rect x="33.9511%" y="261" width="0.6301%" height="15" fill="rgb(234,138,34)" fg:x="916" fg:w="17"/><text x="34.2011%" y="271.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.63%)</title><rect x="33.9511%" y="245" width="0.6301%" height="15" fill="rgb(212,95,11)" fg:x="916" fg:w="17"/><text x="34.2011%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (2 samples, 0.07%)</title><rect x="34.5812%" y="421" width="0.0741%" height="15" fill="rgb(240,179,47)" fg:x="933" fg:w="2"/><text x="34.8312%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[absim::Event&lt;briolette_sim::EventData&gt;]&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="405" width="0.0741%" height="15" fill="rgb(240,163,11)" fg:x="933" fg:w="2"/><text x="34.8312%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="389" width="0.0741%" height="15" fill="rgb(236,37,12)" fg:x="933" fg:w="2"/><text x="34.8312%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="373" width="0.0741%" height="15" fill="rgb(232,164,16)" fg:x="933" fg:w="2"/><text x="34.8312%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactData&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="357" width="0.0741%" height="15" fill="rgb(244,205,15)" fg:x="933" fg:w="2"/><text x="34.8312%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::TransactionCoin&gt;&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="341" width="0.0741%" height="15" fill="rgb(223,117,47)" fg:x="933" fg:w="2"/><text x="34.8312%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="34.5812%" y="325" width="0.0741%" height="15" fill="rgb(244,107,35)" fg:x="933" fg:w="2"/><text x="34.8312%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::TransactionCoin]&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="309" width="0.0741%" height="15" fill="rgb(205,140,8)" fg:x="933" fg:w="2"/><text x="34.8312%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::TransactionCoin&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="293" width="0.0741%" height="15" fill="rgb(228,84,46)" fg:x="933" fg:w="2"/><text x="34.8312%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="277" width="0.0741%" height="15" fill="rgb(254,188,9)" fg:x="933" fg:w="2"/><text x="34.8312%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="261" width="0.0741%" height="15" fill="rgb(206,112,54)" fg:x="933" fg:w="2"/><text x="34.8312%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="34.5812%" y="245" width="0.0741%" height="15" fill="rgb(216,84,49)" fg:x="933" fg:w="2"/><text x="34.8312%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="34.5812%" y="229" width="0.0741%" height="15" fill="rgb(214,194,35)" fg:x="933" fg:w="2"/><text x="34.8312%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="34.6553%" y="421" width="0.0371%" height="15" fill="rgb(249,28,3)" fg:x="935" fg:w="1"/><text x="34.9053%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.04%)</title><rect x="34.6553%" y="405" width="0.0371%" height="15" fill="rgb(222,56,52)" fg:x="935" fg:w="1"/><text x="34.9053%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (1 samples, 0.04%)</title><rect x="34.6553%" y="389" width="0.0371%" height="15" fill="rgb(245,217,50)" fg:x="935" fg:w="1"/><text x="34.9053%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="34.6553%" y="373" width="0.0371%" height="15" fill="rgb(213,201,24)" fg:x="935" fg:w="1"/><text x="34.9053%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="34.6553%" y="357" width="0.0371%" height="15" fill="rgb(248,116,28)" fg:x="935" fg:w="1"/><text x="34.9053%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="34.6553%" y="341" width="0.0371%" height="15" fill="rgb(219,72,43)" fg:x="935" fg:w="1"/><text x="34.9053%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="34.6553%" y="325" width="0.0371%" height="15" fill="rgb(209,138,14)" fg:x="935" fg:w="1"/><text x="34.9053%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="34.6553%" y="309" width="0.0371%" height="15" fill="rgb(222,18,33)" fg:x="935" fg:w="1"/><text x="34.9053%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (1 samples, 0.04%)</title><rect x="34.6924%" y="341" width="0.0371%" height="15" fill="rgb(213,199,7)" fg:x="936" fg:w="1"/><text x="34.9424%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.19%)</title><rect x="34.7294%" y="341" width="0.1853%" height="15" fill="rgb(250,110,10)" fg:x="937" fg:w="5"/><text x="34.9794%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="34.8777%" y="325" width="0.0371%" height="15" fill="rgb(248,123,6)" fg:x="941" fg:w="1"/><text x="35.1277%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="34.8777%" y="309" width="0.0371%" height="15" fill="rgb(206,91,31)" fg:x="941" fg:w="1"/><text x="35.1277%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="34.8777%" y="293" width="0.0371%" height="15" fill="rgb(211,154,13)" fg:x="941" fg:w="1"/><text x="35.1277%" y="303.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="34.8777%" y="277" width="0.0371%" height="15" fill="rgb(225,148,7)" fg:x="941" fg:w="1"/><text x="35.1277%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.30%)</title><rect x="34.6924%" y="389" width="0.2965%" height="15" fill="rgb(220,160,43)" fg:x="936" fg:w="8"/><text x="34.9424%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_one (8 samples, 0.30%)</title><rect x="34.6924%" y="373" width="0.2965%" height="15" fill="rgb(213,52,39)" fg:x="936" fg:w="8"/><text x="34.9424%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_amortized (8 samples, 0.30%)</title><rect x="34.6924%" y="357" width="0.2965%" height="15" fill="rgb(243,137,7)" fg:x="936" fg:w="8"/><text x="34.9424%" y="367.50"></text></g><g><title>alloc::raw_vec::layout_array (2 samples, 0.07%)</title><rect x="34.9148%" y="341" width="0.0741%" height="15" fill="rgb(230,79,13)" fg:x="942" fg:w="2"/><text x="35.1648%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::repeat (2 samples, 0.07%)</title><rect x="34.9148%" y="325" width="0.0741%" height="15" fill="rgb(247,105,23)" fg:x="942" fg:w="2"/><text x="35.1648%" y="335.50"></text></g><g><title>briolette_sim::simulator::Simulator::do_transaction (409 samples, 15.16%)</title><rect x="34.6924%" y="421" width="15.1594%" height="15" fill="rgb(223,179,41)" fg:x="936" fg:w="409"/><text x="34.9424%" y="431.50">briolette_sim::simulato..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (409 samples, 15.16%)</title><rect x="34.6924%" y="405" width="15.1594%" height="15" fill="rgb(218,9,34)" fg:x="936" fg:w="409"/><text x="34.9424%" y="415.50">alloc::vec::Vec&lt;T,A&gt;::p..</text></g><g><title>core::ptr::write (401 samples, 14.86%)</title><rect x="34.9889%" y="389" width="14.8629%" height="15" fill="rgb(222,106,8)" fg:x="944" fg:w="401"/><text x="35.2389%" y="399.50">core::ptr::write</text></g><g><title>core::cmp::PartialEq::ne (15 samples, 0.56%)</title><rect x="49.8517%" y="421" width="0.5560%" height="15" fill="rgb(211,220,0)" fg:x="1345" fg:w="15"/><text x="50.1017%" y="431.50"></text></g><g><title>&lt;briolette_sim::Statistics as core::cmp::PartialEq&gt;::eq (15 samples, 0.56%)</title><rect x="49.8517%" y="405" width="0.5560%" height="15" fill="rgb(229,52,16)" fg:x="1345" fg:w="15"/><text x="50.1017%" y="415.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (3 samples, 0.11%)</title><rect x="50.2965%" y="389" width="0.1112%" height="15" fill="rgb(212,155,18)" fg:x="1357" fg:w="3"/><text x="50.5465%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (3 samples, 0.11%)</title><rect x="50.2965%" y="373" width="0.1112%" height="15" fill="rgb(242,21,14)" fg:x="1357" fg:w="3"/><text x="50.5465%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.04%)</title><rect x="50.3706%" y="357" width="0.0371%" height="15" fill="rgb(222,19,48)" fg:x="1359" fg:w="1"/><text x="50.6206%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="50.3706%" y="341" width="0.0371%" height="15" fill="rgb(232,45,27)" fg:x="1359" fg:w="1"/><text x="50.6206%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.04%)</title><rect x="50.3706%" y="325" width="0.0371%" height="15" fill="rgb(249,103,42)" fg:x="1359" fg:w="1"/><text x="50.6206%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (22 samples, 0.82%)</title><rect x="50.4077%" y="357" width="0.8154%" height="15" fill="rgb(246,81,33)" fg:x="1360" fg:w="22"/><text x="50.6577%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (22 samples, 0.82%)</title><rect x="50.4077%" y="341" width="0.8154%" height="15" fill="rgb(252,33,42)" fg:x="1360" fg:w="22"/><text x="50.6577%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.82%)</title><rect x="50.4077%" y="325" width="0.8154%" height="15" fill="rgb(209,212,41)" fg:x="1360" fg:w="22"/><text x="50.6577%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (22 samples, 0.82%)</title><rect x="50.4077%" y="309" width="0.8154%" height="15" fill="rgb(207,154,6)" fg:x="1360" fg:w="22"/><text x="50.6577%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.07%)</title><rect x="51.1490%" y="293" width="0.0741%" height="15" fill="rgb(223,64,47)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="303.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply::{{closure}} (2 samples, 0.07%)</title><rect x="51.1490%" y="277" width="0.0741%" height="15" fill="rgb(211,161,38)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="287.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="51.1490%" y="261" width="0.0741%" height="15" fill="rgb(219,138,40)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="51.1490%" y="245" width="0.0741%" height="15" fill="rgb(241,228,46)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="51.1490%" y="229" width="0.0741%" height="15" fill="rgb(223,209,38)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="51.1490%" y="213" width="0.0741%" height="15" fill="rgb(236,164,45)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="51.1490%" y="197" width="0.0741%" height="15" fill="rgb(231,15,5)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="51.1490%" y="181" width="0.0741%" height="15" fill="rgb(252,35,15)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="51.1490%" y="165" width="0.0741%" height="15" fill="rgb(248,181,18)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="51.1490%" y="149" width="0.0741%" height="15" fill="rgb(233,39,42)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="51.1490%" y="133" width="0.0741%" height="15" fill="rgb(238,110,33)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="51.1490%" y="117" width="0.0741%" height="15" fill="rgb(233,195,10)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="51.1490%" y="101" width="0.0741%" height="15" fill="rgb(254,105,3)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="111.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="51.1490%" y="85" width="0.0741%" height="15" fill="rgb(221,225,9)" fg:x="1380" fg:w="2"/><text x="51.3990%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (48 samples, 1.78%)</title><rect x="50.4077%" y="421" width="1.7791%" height="15" fill="rgb(224,227,45)" fg:x="1360" fg:w="48"/><text x="50.6577%" y="431.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (48 samples, 1.78%)</title><rect x="50.4077%" y="405" width="1.7791%" height="15" fill="rgb(229,198,43)" fg:x="1360" fg:w="48"/><text x="50.6577%" y="415.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 1.78%)</title><rect x="50.4077%" y="389" width="1.7791%" height="15" fill="rgb(206,209,35)" fg:x="1360" fg:w="48"/><text x="50.6577%" y="399.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (48 samples, 1.78%)</title><rect x="50.4077%" y="373" width="1.7791%" height="15" fill="rgb(245,195,53)" fg:x="1360" fg:w="48"/><text x="50.6577%" y="383.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.96%)</title><rect x="51.2231%" y="357" width="0.9637%" height="15" fill="rgb(240,92,26)" fg:x="1382" fg:w="26"/><text x="51.4731%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (26 samples, 0.96%)</title><rect x="51.2231%" y="341" width="0.9637%" height="15" fill="rgb(207,40,23)" fg:x="1382" fg:w="26"/><text x="51.4731%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 0.96%)</title><rect x="51.2231%" y="325" width="0.9637%" height="15" fill="rgb(223,111,35)" fg:x="1382" fg:w="26"/><text x="51.4731%" y="335.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply::{{closure}} (26 samples, 0.96%)</title><rect x="51.2231%" y="309" width="0.9637%" height="15" fill="rgb(229,147,28)" fg:x="1382" fg:w="26"/><text x="51.4731%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (1 samples, 0.04%)</title><rect x="52.1868%" y="421" width="0.0371%" height="15" fill="rgb(211,29,28)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="52.1868%" y="405" width="0.0371%" height="15" fill="rgb(228,72,33)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="52.1868%" y="389" width="0.0371%" height="15" fill="rgb(205,214,31)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="52.1868%" y="373" width="0.0371%" height="15" fill="rgb(224,111,15)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.04%)</title><rect x="52.1868%" y="357" width="0.0371%" height="15" fill="rgb(253,21,26)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="52.1868%" y="341" width="0.0371%" height="15" fill="rgb(245,139,43)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="52.1868%" y="325" width="0.0371%" height="15" fill="rgb(252,170,7)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="335.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="52.1868%" y="309" width="0.0371%" height="15" fill="rgb(231,118,14)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="52.1868%" y="293" width="0.0371%" height="15" fill="rgb(238,83,0)" fg:x="1408" fg:w="1"/><text x="52.4368%" y="303.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::apply (502 samples, 18.61%)</title><rect x="33.7658%" y="437" width="18.6064%" height="15" fill="rgb(221,39,39)" fg:x="911" fg:w="502"/><text x="34.0158%" y="447.50">&lt;briolette_sim::simulator::Si..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (4 samples, 0.15%)</title><rect x="52.2239%" y="421" width="0.1483%" height="15" fill="rgb(222,119,46)" fg:x="1409" fg:w="4"/><text x="52.4739%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt; (4 samples, 0.15%)</title><rect x="52.2239%" y="405" width="0.1483%" height="15" fill="rgb(222,165,49)" fg:x="1409" fg:w="4"/><text x="52.4739%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (4 samples, 0.15%)</title><rect x="52.2239%" y="389" width="0.1483%" height="15" fill="rgb(219,113,52)" fg:x="1409" fg:w="4"/><text x="52.4739%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="52.2239%" y="373" width="0.1483%" height="15" fill="rgb(214,7,15)" fg:x="1409" fg:w="4"/><text x="52.4739%" y="383.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (16 samples, 0.59%)</title><rect x="52.4092%" y="325" width="0.5930%" height="15" fill="rgb(235,32,4)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.59%)</title><rect x="52.4092%" y="309" width="0.5930%" height="15" fill="rgb(238,90,54)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.59%)</title><rect x="52.4092%" y="293" width="0.5930%" height="15" fill="rgb(213,208,19)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.59%)</title><rect x="52.4092%" y="277" width="0.5930%" height="15" fill="rgb(233,156,4)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.59%)</title><rect x="52.4092%" y="261" width="0.5930%" height="15" fill="rgb(207,194,5)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.59%)</title><rect x="52.4092%" y="245" width="0.5930%" height="15" fill="rgb(206,111,30)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.59%)</title><rect x="52.4092%" y="229" width="0.5930%" height="15" fill="rgb(243,70,54)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (16 samples, 0.59%)</title><rect x="52.4092%" y="213" width="0.5930%" height="15" fill="rgb(242,28,8)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (16 samples, 0.59%)</title><rect x="52.4092%" y="197" width="0.5930%" height="15" fill="rgb(219,106,18)" fg:x="1414" fg:w="16"/><text x="52.6592%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="52.9652%" y="181" width="0.0371%" height="15" fill="rgb(244,222,10)" fg:x="1429" fg:w="1"/><text x="53.2152%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="52.9652%" y="165" width="0.0371%" height="15" fill="rgb(236,179,52)" fg:x="1429" fg:w="1"/><text x="53.2152%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="52.9652%" y="149" width="0.0371%" height="15" fill="rgb(213,23,39)" fg:x="1429" fg:w="1"/><text x="53.2152%" y="159.50"></text></g><g><title>&lt;absim::extras::SimulationPopulation&lt;S&gt; as absim::Population&lt;S&gt;&gt;::new_agents (136 samples, 5.04%)</title><rect x="52.3721%" y="421" width="5.0408%" height="15" fill="rgb(238,48,10)" fg:x="1413" fg:w="136"/><text x="52.6221%" y="431.50">&lt;absim..</text></g><g><title>&lt;briolette_sim::AgentData as core::clone::Clone&gt;::clone (136 samples, 5.04%)</title><rect x="52.3721%" y="405" width="5.0408%" height="15" fill="rgb(251,196,23)" fg:x="1413" fg:w="136"/><text x="52.6221%" y="415.50">&lt;briol..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (135 samples, 5.00%)</title><rect x="52.4092%" y="389" width="5.0037%" height="15" fill="rgb(250,152,24)" fg:x="1414" fg:w="135"/><text x="52.6592%" y="399.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (135 samples, 5.00%)</title><rect x="52.4092%" y="373" width="5.0037%" height="15" fill="rgb(209,150,17)" fg:x="1414" fg:w="135"/><text x="52.6592%" y="383.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (135 samples, 5.00%)</title><rect x="52.4092%" y="357" width="5.0037%" height="15" fill="rgb(234,202,34)" fg:x="1414" fg:w="135"/><text x="52.6592%" y="367.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (135 samples, 5.00%)</title><rect x="52.4092%" y="341" width="5.0037%" height="15" fill="rgb(253,148,53)" fg:x="1414" fg:w="135"/><text x="52.6592%" y="351.50">&lt;T as ..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (119 samples, 4.41%)</title><rect x="53.0022%" y="325" width="4.4107%" height="15" fill="rgb(218,129,16)" fg:x="1430" fg:w="119"/><text x="53.2522%" y="335.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;absim::Agent&lt;briolette_sim::AgentData&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="405" width="0.0371%" height="15" fill="rgb(216,85,19)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Agent&lt;briolette_sim::AgentData&gt;&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="389" width="0.0371%" height="15" fill="rgb(235,228,7)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="373" width="0.0371%" height="15" fill="rgb(245,175,0)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::Coin&gt;&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="357" width="0.0371%" height="15" fill="rgb(208,168,36)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.4129%" y="341" width="0.0371%" height="15" fill="rgb(246,171,24)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::Coin]&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="325" width="0.0371%" height="15" fill="rgb(215,142,24)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="309" width="0.0371%" height="15" fill="rgb(250,187,7)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="293" width="0.0371%" height="15" fill="rgb(228,66,33)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="57.4129%" y="277" width="0.0371%" height="15" fill="rgb(234,215,21)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.4129%" y="261" width="0.0371%" height="15" fill="rgb(222,191,20)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.04%)</title><rect x="57.4129%" y="245" width="0.0371%" height="15" fill="rgb(245,79,54)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="57.4129%" y="229" width="0.0371%" height="15" fill="rgb(240,10,37)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="57.4129%" y="213" width="0.0371%" height="15" fill="rgb(214,192,32)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="223.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="57.4129%" y="197" width="0.0371%" height="15" fill="rgb(209,36,54)" fg:x="1549" fg:w="1"/><text x="57.6629%" y="207.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::population_apply (138 samples, 5.11%)</title><rect x="52.3721%" y="437" width="5.1149%" height="15" fill="rgb(220,10,11)" fg:x="1413" fg:w="138"/><text x="52.6221%" y="447.50">&lt;briol..</text></g><g><title>&lt;absim::extras::SimulationPopulation&lt;S&gt; as absim::Population&lt;S&gt;&gt;::remove (2 samples, 0.07%)</title><rect x="57.4129%" y="421" width="0.0741%" height="15" fill="rgb(221,106,17)" fg:x="1549" fg:w="2"/><text x="57.6629%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (1 samples, 0.04%)</title><rect x="57.4500%" y="405" width="0.0371%" height="15" fill="rgb(251,142,44)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1 samples, 0.04%)</title><rect x="57.4500%" y="389" width="0.0371%" height="15" fill="rgb(238,13,15)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (1 samples, 0.04%)</title><rect x="57.4500%" y="373" width="0.0371%" height="15" fill="rgb(208,107,27)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.04%)</title><rect x="57.4500%" y="357" width="0.0371%" height="15" fill="rgb(205,136,37)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="57.4500%" y="341" width="0.0371%" height="15" fill="rgb(250,205,27)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="57.4500%" y="325" width="0.0371%" height="15" fill="rgb(210,80,43)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.04%)</title><rect x="57.4500%" y="309" width="0.0371%" height="15" fill="rgb(247,160,36)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="57.4500%" y="293" width="0.0371%" height="15" fill="rgb(234,13,49)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (1 samples, 0.04%)</title><rect x="57.4500%" y="277" width="0.0371%" height="15" fill="rgb(234,122,0)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="57.4500%" y="261" width="0.0371%" height="15" fill="rgb(207,146,38)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (1 samples, 0.04%)</title><rect x="57.4500%" y="245" width="0.0371%" height="15" fill="rgb(207,177,25)" fg:x="1550" fg:w="1"/><text x="57.7000%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.37%)</title><rect x="57.4870%" y="421" width="0.3706%" height="15" fill="rgb(211,178,42)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.37%)</title><rect x="57.4870%" y="405" width="0.3706%" height="15" fill="rgb(230,69,54)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.37%)</title><rect x="57.4870%" y="389" width="0.3706%" height="15" fill="rgb(214,135,41)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (10 samples, 0.37%)</title><rect x="57.4870%" y="373" width="0.3706%" height="15" fill="rgb(237,67,25)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (10 samples, 0.37%)</title><rect x="57.4870%" y="357" width="0.3706%" height="15" fill="rgb(222,189,50)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (10 samples, 0.37%)</title><rect x="57.4870%" y="341" width="0.3706%" height="15" fill="rgb(245,148,34)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.37%)</title><rect x="57.4870%" y="325" width="0.3706%" height="15" fill="rgb(222,29,6)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (10 samples, 0.37%)</title><rect x="57.4870%" y="309" width="0.3706%" height="15" fill="rgb(221,189,43)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.37%)</title><rect x="57.4870%" y="293" width="0.3706%" height="15" fill="rgb(207,36,27)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (10 samples, 0.37%)</title><rect x="57.4870%" y="277" width="0.3706%" height="15" fill="rgb(217,90,24)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (10 samples, 0.37%)</title><rect x="57.4870%" y="261" width="0.3706%" height="15" fill="rgb(224,66,35)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="271.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply::{{closure}} (10 samples, 0.37%)</title><rect x="57.4870%" y="245" width="0.3706%" height="15" fill="rgb(221,13,50)" fg:x="1551" fg:w="10"/><text x="57.7370%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;briolette_sim::CoinState&gt;&gt; (1 samples, 0.04%)</title><rect x="57.8577%" y="421" width="0.0371%" height="15" fill="rgb(236,68,49)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::CoinState&gt; (1 samples, 0.04%)</title><rect x="57.8577%" y="405" width="0.0371%" height="15" fill="rgb(229,146,28)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (1 samples, 0.04%)</title><rect x="57.8577%" y="389" width="0.0371%" height="15" fill="rgb(225,31,38)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="57.8577%" y="373" width="0.0371%" height="15" fill="rgb(250,208,3)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="57.8577%" y="357" width="0.0371%" height="15" fill="rgb(246,54,23)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.8577%" y="341" width="0.0371%" height="15" fill="rgb(243,76,11)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.04%)</title><rect x="57.8577%" y="325" width="0.0371%" height="15" fill="rgb(245,21,50)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="57.8577%" y="309" width="0.0371%" height="15" fill="rgb(228,9,43)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="57.8577%" y="293" width="0.0371%" height="15" fill="rgb(208,100,47)" fg:x="1561" fg:w="1"/><text x="58.1077%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="57.8947%" y="373" width="0.1112%" height="15" fill="rgb(232,26,8)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="57.8947%" y="357" width="0.1112%" height="15" fill="rgb(216,166,38)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.11%)</title><rect x="57.8947%" y="341" width="0.1112%" height="15" fill="rgb(251,202,51)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.11%)</title><rect x="57.8947%" y="325" width="0.1112%" height="15" fill="rgb(254,216,34)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.11%)</title><rect x="57.8947%" y="309" width="0.1112%" height="15" fill="rgb(251,32,27)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.11%)</title><rect x="57.8947%" y="293" width="0.1112%" height="15" fill="rgb(208,127,28)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.11%)</title><rect x="57.8947%" y="277" width="0.1112%" height="15" fill="rgb(224,137,22)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.11%)</title><rect x="57.8947%" y="261" width="0.1112%" height="15" fill="rgb(254,70,32)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 0.11%)</title><rect x="57.8947%" y="245" width="0.1112%" height="15" fill="rgb(229,75,37)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.11%)</title><rect x="57.8947%" y="229" width="0.1112%" height="15" fill="rgb(252,64,23)" fg:x="1562" fg:w="3"/><text x="58.1447%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (144 samples, 5.34%)</title><rect x="57.8947%" y="421" width="5.3373%" height="15" fill="rgb(232,162,48)" fg:x="1562" fg:w="144"/><text x="58.1447%" y="431.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (144 samples, 5.34%)</title><rect x="57.8947%" y="405" width="5.3373%" height="15" fill="rgb(246,160,12)" fg:x="1562" fg:w="144"/><text x="58.1447%" y="415.50">hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (144 samples, 5.34%)</title><rect x="57.8947%" y="389" width="5.3373%" height="15" fill="rgb(247,166,0)" fg:x="1562" fg:w="144"/><text x="58.1447%" y="399.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (141 samples, 5.23%)</title><rect x="58.0059%" y="373" width="5.2261%" height="15" fill="rgb(249,219,21)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="383.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (141 samples, 5.23%)</title><rect x="58.0059%" y="357" width="5.2261%" height="15" fill="rgb(205,209,3)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="367.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (141 samples, 5.23%)</title><rect x="58.0059%" y="341" width="5.2261%" height="15" fill="rgb(243,44,1)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="351.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (141 samples, 5.23%)</title><rect x="58.0059%" y="325" width="5.2261%" height="15" fill="rgb(206,159,16)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="335.50">hashbr..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (141 samples, 5.23%)</title><rect x="58.0059%" y="309" width="5.2261%" height="15" fill="rgb(244,77,30)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="319.50">hashbr..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (141 samples, 5.23%)</title><rect x="58.0059%" y="293" width="5.2261%" height="15" fill="rgb(218,69,12)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="303.50">&lt;Q as ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (141 samples, 5.23%)</title><rect x="58.0059%" y="277" width="5.2261%" height="15" fill="rgb(212,87,7)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="287.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (141 samples, 5.23%)</title><rect x="58.0059%" y="261" width="5.2261%" height="15" fill="rgb(245,114,25)" fg:x="1565" fg:w="141"/><text x="58.2559%" y="271.50">core::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.04%)</title><rect x="63.2320%" y="421" width="0.0371%" height="15" fill="rgb(210,61,42)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="63.2320%" y="405" width="0.0371%" height="15" fill="rgb(211,52,33)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.04%)</title><rect x="63.2320%" y="389" width="0.0371%" height="15" fill="rgb(234,58,33)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="63.2320%" y="373" width="0.0371%" height="15" fill="rgb(220,115,36)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="63.2320%" y="357" width="0.0371%" height="15" fill="rgb(243,153,54)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="367.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="63.2320%" y="341" width="0.0371%" height="15" fill="rgb(251,47,18)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="63.2320%" y="325" width="0.0371%" height="15" fill="rgb(242,102,42)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="63.2320%" y="309" width="0.0371%" height="15" fill="rgb(234,31,38)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.04%)</title><rect x="63.2320%" y="293" width="0.0371%" height="15" fill="rgb(221,117,51)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="63.2320%" y="277" width="0.0371%" height="15" fill="rgb(212,20,18)" fg:x="1706" fg:w="1"/><text x="63.4820%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="63.2691%" y="357" width="0.0741%" height="15" fill="rgb(245,133,36)" fg:x="1707" fg:w="2"/><text x="63.5191%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="63.2691%" y="341" width="0.0741%" height="15" fill="rgb(212,6,19)" fg:x="1707" fg:w="2"/><text x="63.5191%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="63.2691%" y="325" width="0.0741%" height="15" fill="rgb(218,1,36)" fg:x="1707" fg:w="2"/><text x="63.5191%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="63.2691%" y="389" width="0.1112%" height="15" fill="rgb(246,84,54)" fg:x="1707" fg:w="3"/><text x="63.5191%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="63.2691%" y="373" width="0.1112%" height="15" fill="rgb(242,110,6)" fg:x="1707" fg:w="3"/><text x="63.5191%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="63.3432%" y="357" width="0.0371%" height="15" fill="rgb(214,47,5)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.04%)</title><rect x="63.3432%" y="341" width="0.0371%" height="15" fill="rgb(218,159,25)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.04%)</title><rect x="63.3432%" y="325" width="0.0371%" height="15" fill="rgb(215,211,28)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="63.3432%" y="309" width="0.0371%" height="15" fill="rgb(238,59,32)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="63.3432%" y="293" width="0.0371%" height="15" fill="rgb(226,82,3)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="63.3432%" y="277" width="0.0371%" height="15" fill="rgb(240,164,32)" fg:x="1709" fg:w="1"/><text x="63.5932%" y="287.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::world_apply (160 samples, 5.93%)</title><rect x="57.4870%" y="437" width="5.9303%" height="15" fill="rgb(232,46,7)" fg:x="1551" fg:w="160"/><text x="57.7370%" y="447.50">&lt;briolet..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.15%)</title><rect x="63.2691%" y="421" width="0.1483%" height="15" fill="rgb(229,129,53)" fg:x="1707" fg:w="4"/><text x="63.5191%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.15%)</title><rect x="63.2691%" y="405" width="0.1483%" height="15" fill="rgb(234,188,29)" fg:x="1707" fg:w="4"/><text x="63.5191%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="63.3803%" y="389" width="0.0371%" height="15" fill="rgb(246,141,4)" fg:x="1710" fg:w="1"/><text x="63.6303%" y="399.50"></text></g><g><title>&lt;absim::extras::SimulationPopulation&lt;S&gt; as absim::Population&lt;S&gt;&gt;::get (38 samples, 1.41%)</title><rect x="63.4173%" y="421" width="1.4085%" height="15" fill="rgb(229,23,39)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (38 samples, 1.41%)</title><rect x="63.4173%" y="405" width="1.4085%" height="15" fill="rgb(206,12,3)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (38 samples, 1.41%)</title><rect x="63.4173%" y="389" width="1.4085%" height="15" fill="rgb(252,226,20)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (38 samples, 1.41%)</title><rect x="63.4173%" y="373" width="1.4085%" height="15" fill="rgb(216,123,35)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (38 samples, 1.41%)</title><rect x="63.4173%" y="357" width="1.4085%" height="15" fill="rgb(212,68,40)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (38 samples, 1.41%)</title><rect x="63.4173%" y="341" width="1.4085%" height="15" fill="rgb(254,125,32)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (38 samples, 1.41%)</title><rect x="63.4173%" y="325" width="1.4085%" height="15" fill="rgb(253,97,22)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (38 samples, 1.41%)</title><rect x="63.4173%" y="309" width="1.4085%" height="15" fill="rgb(241,101,14)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="319.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (38 samples, 1.41%)</title><rect x="63.4173%" y="293" width="1.4085%" height="15" fill="rgb(238,103,29)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (38 samples, 1.41%)</title><rect x="63.4173%" y="277" width="1.4085%" height="15" fill="rgb(233,195,47)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (38 samples, 1.41%)</title><rect x="63.4173%" y="261" width="1.4085%" height="15" fill="rgb(246,218,30)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (38 samples, 1.41%)</title><rect x="63.4173%" y="245" width="1.4085%" height="15" fill="rgb(219,145,47)" fg:x="1711" fg:w="38"/><text x="63.6673%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="64.8258%" y="421" width="0.0371%" height="15" fill="rgb(243,12,26)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="64.8258%" y="405" width="0.0371%" height="15" fill="rgb(214,87,16)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="64.8258%" y="389" width="0.0371%" height="15" fill="rgb(208,99,42)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="64.8258%" y="373" width="0.0371%" height="15" fill="rgb(253,99,2)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="383.50"></text></g><g><title>&lt;briolette_sim::SyncState as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="64.8258%" y="357" width="0.0371%" height="15" fill="rgb(220,168,23)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="64.8258%" y="341" width="0.0371%" height="15" fill="rgb(242,38,24)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="64.8258%" y="325" width="0.0371%" height="15" fill="rgb(225,182,9)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="64.8258%" y="309" width="0.0371%" height="15" fill="rgb(243,178,37)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="64.8258%" y="293" width="0.0371%" height="15" fill="rgb(232,139,19)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="64.8258%" y="277" width="0.0371%" height="15" fill="rgb(225,201,24)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="64.8258%" y="261" width="0.0371%" height="15" fill="rgb(221,47,46)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="64.8258%" y="245" width="0.0371%" height="15" fill="rgb(249,23,13)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="64.8258%" y="229" width="0.0371%" height="15" fill="rgb(219,9,5)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="239.50"></text></g><g><title>alloc::raw_vec::layout_array (1 samples, 0.04%)</title><rect x="64.8258%" y="213" width="0.0371%" height="15" fill="rgb(254,171,16)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="223.50"></text></g><g><title>core::alloc::layout::Layout::repeat (1 samples, 0.04%)</title><rect x="64.8258%" y="197" width="0.0371%" height="15" fill="rgb(230,171,20)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (1 samples, 0.04%)</title><rect x="64.8258%" y="181" width="0.0371%" height="15" fill="rgb(210,71,41)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="64.8258%" y="165" width="0.0371%" height="15" fill="rgb(206,173,20)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="64.8258%" y="149" width="0.0371%" height="15" fill="rgb(233,88,34)" fg:x="1749" fg:w="1"/><text x="65.0758%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="64.8629%" y="293" width="0.1483%" height="15" fill="rgb(223,209,46)" fg:x="1750" fg:w="4"/><text x="65.1129%" y="303.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (4 samples, 0.15%)</title><rect x="64.8629%" y="277" width="0.1483%" height="15" fill="rgb(250,43,18)" fg:x="1750" fg:w="4"/><text x="65.1129%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.22%)</title><rect x="64.8629%" y="357" width="0.2224%" height="15" fill="rgb(208,13,10)" fg:x="1750" fg:w="6"/><text x="65.1129%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.22%)</title><rect x="64.8629%" y="341" width="0.2224%" height="15" fill="rgb(212,200,36)" fg:x="1750" fg:w="6"/><text x="65.1129%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (6 samples, 0.22%)</title><rect x="64.8629%" y="325" width="0.2224%" height="15" fill="rgb(225,90,30)" fg:x="1750" fg:w="6"/><text x="65.1129%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (6 samples, 0.22%)</title><rect x="64.8629%" y="309" width="0.2224%" height="15" fill="rgb(236,182,39)" fg:x="1750" fg:w="6"/><text x="65.1129%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (2 samples, 0.07%)</title><rect x="65.0111%" y="293" width="0.0741%" height="15" fill="rgb(212,144,35)" fg:x="1754" fg:w="2"/><text x="65.2611%" y="303.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (2 samples, 0.07%)</title><rect x="65.0111%" y="277" width="0.0741%" height="15" fill="rgb(228,63,44)" fg:x="1754" fg:w="2"/><text x="65.2611%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="65.0111%" y="261" width="0.0741%" height="15" fill="rgb(228,109,6)" fg:x="1754" fg:w="2"/><text x="65.2611%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="65.0111%" y="245" width="0.0741%" height="15" fill="rgb(238,117,24)" fg:x="1754" fg:w="2"/><text x="65.2611%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::find_or_find_insert_slot (10 samples, 0.37%)</title><rect x="64.8629%" y="389" width="0.3706%" height="15" fill="rgb(242,26,26)" fg:x="1750" fg:w="10"/><text x="65.1129%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.37%)</title><rect x="64.8629%" y="373" width="0.3706%" height="15" fill="rgb(221,92,48)" fg:x="1750" fg:w="10"/><text x="65.1129%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.15%)</title><rect x="65.0852%" y="357" width="0.1483%" height="15" fill="rgb(209,209,32)" fg:x="1756" fg:w="4"/><text x="65.3352%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.15%)</title><rect x="65.0852%" y="341" width="0.1483%" height="15" fill="rgb(221,70,22)" fg:x="1756" fg:w="4"/><text x="65.3352%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="65.2335%" y="357" width="0.0741%" height="15" fill="rgb(248,145,5)" fg:x="1760" fg:w="2"/><text x="65.4835%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="65.2335%" y="341" width="0.0741%" height="15" fill="rgb(226,116,26)" fg:x="1760" fg:w="2"/><text x="65.4835%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="65.2335%" y="325" width="0.0741%" height="15" fill="rgb(244,5,17)" fg:x="1760" fg:w="2"/><text x="65.4835%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.07%)</title><rect x="65.2335%" y="309" width="0.0741%" height="15" fill="rgb(252,159,33)" fg:x="1760" fg:w="2"/><text x="65.4835%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="65.2335%" y="293" width="0.0741%" height="15" fill="rgb(206,71,0)" fg:x="1760" fg:w="2"/><text x="65.4835%" y="303.50"></text></g><g><title>&lt;briolette_sim::simulator::Simulator as absim::Simulation&gt;::worldview (52 samples, 1.93%)</title><rect x="63.4173%" y="437" width="1.9274%" height="15" fill="rgb(233,118,54)" fg:x="1711" fg:w="52"/><text x="63.6673%" y="447.50">&lt;..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.48%)</title><rect x="64.8629%" y="421" width="0.4818%" height="15" fill="rgb(234,83,48)" fg:x="1750" fg:w="13"/><text x="65.1129%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.48%)</title><rect x="64.8629%" y="405" width="0.4818%" height="15" fill="rgb(228,3,54)" fg:x="1750" fg:w="13"/><text x="65.1129%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.11%)</title><rect x="65.2335%" y="389" width="0.1112%" height="15" fill="rgb(226,155,13)" fg:x="1760" fg:w="3"/><text x="65.4835%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.11%)</title><rect x="65.2335%" y="373" width="0.1112%" height="15" fill="rgb(241,28,37)" fg:x="1760" fg:w="3"/><text x="65.4835%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="65.3076%" y="357" width="0.0371%" height="15" fill="rgb(233,93,10)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (1 samples, 0.04%)</title><rect x="65.3076%" y="341" width="0.0371%" height="15" fill="rgb(225,113,19)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u64 (1 samples, 0.04%)</title><rect x="65.3076%" y="325" width="0.0371%" height="15" fill="rgb(241,2,18)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="65.3076%" y="309" width="0.0371%" height="15" fill="rgb(228,207,21)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="65.3076%" y="293" width="0.0371%" height="15" fill="rgb(213,211,35)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="65.3076%" y="277" width="0.0371%" height="15" fill="rgb(209,83,10)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="65.3076%" y="261" width="0.0371%" height="15" fill="rgb(209,164,1)" fg:x="1762" fg:w="1"/><text x="65.5576%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::PopulationAdd&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="357" width="0.7042%" height="15" fill="rgb(213,184,43)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="341" width="0.7042%" height="15" fill="rgb(231,61,34)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::Coin&gt;&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="325" width="0.7042%" height="15" fill="rgb(235,75,3)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.70%)</title><rect x="65.3818%" y="309" width="0.7042%" height="15" fill="rgb(220,106,47)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::Coin]&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="293" width="0.7042%" height="15" fill="rgb(210,196,33)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="277" width="0.7042%" height="15" fill="rgb(229,154,42)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="261" width="0.7042%" height="15" fill="rgb(228,114,26)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (19 samples, 0.70%)</title><rect x="65.3818%" y="245" width="0.7042%" height="15" fill="rgb(208,144,1)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.70%)</title><rect x="65.3818%" y="229" width="0.7042%" height="15" fill="rgb(239,112,37)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (19 samples, 0.70%)</title><rect x="65.3818%" y="213" width="0.7042%" height="15" fill="rgb(210,96,50)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (19 samples, 0.70%)</title><rect x="65.3818%" y="197" width="0.7042%" height="15" fill="rgb(222,178,2)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (19 samples, 0.70%)</title><rect x="65.3818%" y="181" width="0.7042%" height="15" fill="rgb(226,74,18)" fg:x="1764" fg:w="19"/><text x="65.6318%" y="191.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.15%)</title><rect x="65.9377%" y="165" width="0.1483%" height="15" fill="rgb(225,67,54)" fg:x="1779" fg:w="4"/><text x="66.1877%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::EventData&gt; (21 samples, 0.78%)</title><rect x="65.3818%" y="373" width="0.7784%" height="15" fill="rgb(251,92,32)" fg:x="1764" fg:w="21"/><text x="65.6318%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::ValidateData&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="357" width="0.0741%" height="15" fill="rgb(228,149,22)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::Coin&gt;&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="341" width="0.0741%" height="15" fill="rgb(243,54,13)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="66.0860%" y="325" width="0.0741%" height="15" fill="rgb(243,180,28)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::Coin]&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="309" width="0.0741%" height="15" fill="rgb(208,167,24)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="293" width="0.0741%" height="15" fill="rgb(245,73,45)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="277" width="0.0741%" height="15" fill="rgb(237,203,48)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (2 samples, 0.07%)</title><rect x="66.0860%" y="261" width="0.0741%" height="15" fill="rgb(211,197,16)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="66.0860%" y="245" width="0.0741%" height="15" fill="rgb(243,99,51)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (2 samples, 0.07%)</title><rect x="66.0860%" y="229" width="0.0741%" height="15" fill="rgb(215,123,29)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="66.0860%" y="213" width="0.0741%" height="15" fill="rgb(239,186,37)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="66.0860%" y="197" width="0.0741%" height="15" fill="rgb(252,136,39)" fg:x="1783" fg:w="2"/><text x="66.3360%" y="207.50"></text></g><g><title>&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run (1,676 samples, 62.12%)</title><rect x="4.7072%" y="453" width="62.1201%" height="15" fill="rgb(223,213,32)" fg:x="127" fg:w="1676"/><text x="4.9572%" y="463.50">&lt;absim::Manager&lt;S&gt; as absim::ManagerInterface&lt;S&gt;&gt;::run</text></g><g><title>absim::EventQueue&lt;S&gt;::clear (40 samples, 1.48%)</title><rect x="65.3447%" y="437" width="1.4826%" height="15" fill="rgb(233,115,5)" fg:x="1763" fg:w="40"/><text x="65.5947%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (40 samples, 1.48%)</title><rect x="65.3447%" y="421" width="1.4826%" height="15" fill="rgb(207,226,44)" fg:x="1763" fg:w="40"/><text x="65.5947%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[absim::Event&lt;briolette_sim::EventData&gt;]&gt; (40 samples, 1.48%)</title><rect x="65.3447%" y="405" width="1.4826%" height="15" fill="rgb(208,126,0)" fg:x="1763" fg:w="40"/><text x="65.5947%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Event&lt;briolette_sim::EventData&gt;&gt; (40 samples, 1.48%)</title><rect x="65.3447%" y="389" width="1.4826%" height="15" fill="rgb(244,66,21)" fg:x="1763" fg:w="40"/><text x="65.5947%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Statistics&gt; (18 samples, 0.67%)</title><rect x="66.1601%" y="373" width="0.6672%" height="15" fill="rgb(222,97,12)" fg:x="1785" fg:w="18"/><text x="66.4101%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (18 samples, 0.67%)</title><rect x="66.1601%" y="357" width="0.6672%" height="15" fill="rgb(219,213,19)" fg:x="1785" fg:w="18"/><text x="66.4101%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (18 samples, 0.67%)</title><rect x="66.1601%" y="341" width="0.6672%" height="15" fill="rgb(252,169,30)" fg:x="1785" fg:w="18"/><text x="66.4101%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.67%)</title><rect x="66.1601%" y="325" width="0.6672%" height="15" fill="rgb(206,32,51)" fg:x="1785" fg:w="18"/><text x="66.4101%" y="335.50"></text></g><g><title>&lt;briolette_sim::Coin as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="66.8273%" y="453" width="0.1112%" height="15" fill="rgb(250,172,42)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="66.8273%" y="437" width="0.1112%" height="15" fill="rgb(209,34,43)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.11%)</title><rect x="66.8273%" y="421" width="0.1112%" height="15" fill="rgb(223,11,35)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.11%)</title><rect x="66.8273%" y="405" width="0.1112%" height="15" fill="rgb(251,219,26)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.11%)</title><rect x="66.8273%" y="389" width="0.1112%" height="15" fill="rgb(231,119,3)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="66.8273%" y="373" width="0.1112%" height="15" fill="rgb(216,97,11)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="66.8273%" y="357" width="0.1112%" height="15" fill="rgb(223,59,9)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="66.8273%" y="341" width="0.1112%" height="15" fill="rgb(233,93,31)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (3 samples, 0.11%)</title><rect x="66.8273%" y="325" width="0.1112%" height="15" fill="rgb(239,81,33)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="66.8273%" y="309" width="0.1112%" height="15" fill="rgb(213,120,34)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="66.8273%" y="293" width="0.1112%" height="15" fill="rgb(243,49,53)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="303.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="66.8273%" y="277" width="0.1112%" height="15" fill="rgb(247,216,33)" fg:x="1803" fg:w="3"/><text x="67.0773%" y="287.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.11%)</title><rect x="66.9385%" y="453" width="0.1112%" height="15" fill="rgb(226,26,14)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="66.9385%" y="437" width="0.1112%" height="15" fill="rgb(215,49,53)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="66.9385%" y="421" width="0.1112%" height="15" fill="rgb(245,162,40)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="431.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="66.9385%" y="405" width="0.1112%" height="15" fill="rgb(229,68,17)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="415.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="66.9385%" y="389" width="0.1112%" height="15" fill="rgb(213,182,10)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="399.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.11%)</title><rect x="66.9385%" y="373" width="0.1112%" height="15" fill="rgb(245,125,30)" fg:x="1806" fg:w="3"/><text x="67.1885%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (244 samples, 9.04%)</title><rect x="67.0497%" y="453" width="9.0437%" height="15" fill="rgb(232,202,2)" fg:x="1809" fg:w="244"/><text x="67.2997%" y="463.50">alloc::vec::V..</text></g><g><title>core::ptr::write (244 samples, 9.04%)</title><rect x="67.0497%" y="437" width="9.0437%" height="15" fill="rgb(237,140,51)" fg:x="1809" fg:w="244"/><text x="67.2997%" y="447.50">core::ptr::wr..</text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.52%)</title><rect x="84.5441%" y="213" width="0.5189%" height="15" fill="rgb(236,157,25)" fg:x="2281" fg:w="14"/><text x="84.7941%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.52%)</title><rect x="84.5441%" y="197" width="0.5189%" height="15" fill="rgb(219,209,0)" fg:x="2281" fg:w="14"/><text x="84.7941%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.52%)</title><rect x="84.5441%" y="181" width="0.5189%" height="15" fill="rgb(240,116,54)" fg:x="2281" fg:w="14"/><text x="84.7941%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 0.52%)</title><rect x="84.5441%" y="165" width="0.5189%" height="15" fill="rgb(216,10,36)" fg:x="2281" fg:w="14"/><text x="84.7941%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 0.52%)</title><rect x="84.5441%" y="149" width="0.5189%" height="15" fill="rgb(222,72,44)" fg:x="2281" fg:w="14"/><text x="84.7941%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.59%)</title><rect x="84.5441%" y="245" width="0.5930%" height="15" fill="rgb(232,159,9)" fg:x="2281" fg:w="16"/><text x="84.7941%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.59%)</title><rect x="84.5441%" y="229" width="0.5930%" height="15" fill="rgb(210,39,32)" fg:x="2281" fg:w="16"/><text x="84.7941%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.07%)</title><rect x="85.0630%" y="213" width="0.0741%" height="15" fill="rgb(216,194,45)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.07%)</title><rect x="85.0630%" y="197" width="0.0741%" height="15" fill="rgb(218,18,35)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.07%)</title><rect x="85.0630%" y="181" width="0.0741%" height="15" fill="rgb(207,83,51)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="85.0630%" y="165" width="0.0741%" height="15" fill="rgb(225,63,43)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="85.0630%" y="149" width="0.0741%" height="15" fill="rgb(207,57,36)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.07%)</title><rect x="85.0630%" y="133" width="0.0741%" height="15" fill="rgb(216,99,33)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="143.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.07%)</title><rect x="85.0630%" y="117" width="0.0741%" height="15" fill="rgb(225,42,16)" fg:x="2295" fg:w="2"/><text x="85.3130%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (591 samples, 21.91%)</title><rect x="76.0934%" y="453" width="21.9051%" height="15" fill="rgb(220,201,45)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="463.50">core::iter::traits::iterator::Itera..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (591 samples, 21.91%)</title><rect x="76.0934%" y="437" width="21.9051%" height="15" fill="rgb(225,33,4)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="447.50">&lt;std::collections::hash::map::HashM..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (591 samples, 21.91%)</title><rect x="76.0934%" y="421" width="21.9051%" height="15" fill="rgb(224,33,50)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="431.50">&lt;std::collections::hash::map::HashM..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (591 samples, 21.91%)</title><rect x="76.0934%" y="405" width="21.9051%" height="15" fill="rgb(246,198,51)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="415.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (591 samples, 21.91%)</title><rect x="76.0934%" y="389" width="21.9051%" height="15" fill="rgb(205,22,4)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="399.50">core::iter::traits::iterator::Itera..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (591 samples, 21.91%)</title><rect x="76.0934%" y="373" width="21.9051%" height="15" fill="rgb(206,3,8)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="383.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (591 samples, 21.91%)</title><rect x="76.0934%" y="357" width="21.9051%" height="15" fill="rgb(251,23,15)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="367.50">&lt;core::iter::adapters::enumerate::E..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (591 samples, 21.91%)</title><rect x="76.0934%" y="341" width="21.9051%" height="15" fill="rgb(252,88,28)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="351.50">&lt;alloc::vec::into_iter::IntoIter&lt;T,..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (591 samples, 21.91%)</title><rect x="76.0934%" y="325" width="21.9051%" height="15" fill="rgb(212,127,14)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="335.50">&lt;core::iter::adapters::enumerate::E..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (591 samples, 21.91%)</title><rect x="76.0934%" y="309" width="21.9051%" height="15" fill="rgb(247,145,37)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="319.50">core::iter::adapters::map::map_fold..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (591 samples, 21.91%)</title><rect x="76.0934%" y="293" width="21.9051%" height="15" fill="rgb(209,117,53)" fg:x="2053" fg:w="591"/><text x="76.3434%" y="303.50">core::iter::traits::iterator::Itera..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::{{closure}} (363 samples, 13.45%)</title><rect x="84.5441%" y="277" width="13.4544%" height="15" fill="rgb(212,90,42)" fg:x="2281" fg:w="363"/><text x="84.7941%" y="287.50">&lt;hashbrown::map::Has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (363 samples, 13.45%)</title><rect x="84.5441%" y="261" width="13.4544%" height="15" fill="rgb(218,164,37)" fg:x="2281" fg:w="363"/><text x="84.7941%" y="271.50">hashbrown::map::Hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (347 samples, 12.86%)</title><rect x="85.1371%" y="245" width="12.8614%" height="15" fill="rgb(246,65,34)" fg:x="2297" fg:w="347"/><text x="85.3871%" y="255.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (347 samples, 12.86%)</title><rect x="85.1371%" y="229" width="12.8614%" height="15" fill="rgb(231,100,33)" fg:x="2297" fg:w="347"/><text x="85.3871%" y="239.50">hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (347 samples, 12.86%)</title><rect x="85.1371%" y="213" width="12.8614%" height="15" fill="rgb(228,126,14)" fg:x="2297" fg:w="347"/><text x="85.3871%" y="223.50">hashbrown::raw::Buc..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (347 samples, 12.86%)</title><rect x="85.1371%" y="197" width="12.8614%" height="15" fill="rgb(215,173,21)" fg:x="2297" fg:w="347"/><text x="85.3871%" y="207.50">core::ptr::mut_ptr:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.15%)</title><rect x="97.9985%" y="117" width="0.1483%" height="15" fill="rgb(210,6,40)" fg:x="2644" fg:w="4"/><text x="98.2485%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.15%)</title><rect x="97.9985%" y="101" width="0.1483%" height="15" fill="rgb(212,48,18)" fg:x="2644" fg:w="4"/><text x="98.2485%" y="111.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.15%)</title><rect x="97.9985%" y="85" width="0.1483%" height="15" fill="rgb(230,214,11)" fg:x="2644" fg:w="4"/><text x="98.2485%" y="95.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.15%)</title><rect x="97.9985%" y="69" width="0.1483%" height="15" fill="rgb(254,105,39)" fg:x="2644" fg:w="4"/><text x="98.2485%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::extras::SimulationPopulation&lt;briolette_sim::simulator::Simulator&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="437" width="0.2965%" height="15" fill="rgb(245,158,5)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,absim::Agent&lt;briolette_sim::AgentData&gt;,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="421" width="0.2965%" height="15" fill="rgb(249,208,11)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,absim::Agent&lt;briolette_sim::AgentData&gt;,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="405" width="0.2965%" height="15" fill="rgb(210,39,28)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="389" width="0.2965%" height="15" fill="rgb(211,56,53)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="97.9985%" y="373" width="0.2965%" height="15" fill="rgb(226,201,30)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (8 samples, 0.30%)</title><rect x="97.9985%" y="357" width="0.2965%" height="15" fill="rgb(239,101,34)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (8 samples, 0.30%)</title><rect x="97.9985%" y="341" width="0.2965%" height="15" fill="rgb(226,209,5)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (8 samples, 0.30%)</title><rect x="97.9985%" y="325" width="0.2965%" height="15" fill="rgb(250,105,47)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (8 samples, 0.30%)</title><rect x="97.9985%" y="309" width="0.2965%" height="15" fill="rgb(230,72,3)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,absim::Agent&lt;briolette_sim::AgentData&gt;)&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="293" width="0.2965%" height="15" fill="rgb(232,218,39)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Agent&lt;briolette_sim::AgentData&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="277" width="0.2965%" height="15" fill="rgb(248,166,6)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::AgentData&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="261" width="0.2965%" height="15" fill="rgb(247,89,20)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;briolette_sim::Coin&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="245" width="0.2965%" height="15" fill="rgb(248,130,54)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="97.9985%" y="229" width="0.2965%" height="15" fill="rgb(234,196,4)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[briolette_sim::Coin]&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="213" width="0.2965%" height="15" fill="rgb(250,143,31)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="197" width="0.2965%" height="15" fill="rgb(211,110,34)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="181" width="0.2965%" height="15" fill="rgb(215,124,48)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (8 samples, 0.30%)</title><rect x="97.9985%" y="165" width="0.2965%" height="15" fill="rgb(216,46,13)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="97.9985%" y="149" width="0.2965%" height="15" fill="rgb(205,184,25)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (8 samples, 0.30%)</title><rect x="97.9985%" y="133" width="0.2965%" height="15" fill="rgb(228,1,10)" fg:x="2644" fg:w="8"/><text x="98.2485%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::current_memory (4 samples, 0.15%)</title><rect x="98.1468%" y="117" width="0.1483%" height="15" fill="rgb(213,116,27)" fg:x="2648" fg:w="4"/><text x="98.3968%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (4 samples, 0.15%)</title><rect x="98.1468%" y="101" width="0.1483%" height="15" fill="rgb(241,95,50)" fg:x="2648" fg:w="4"/><text x="98.3968%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (41 samples, 1.52%)</title><rect x="98.2950%" y="261" width="1.5196%" height="15" fill="rgb(238,48,32)" fg:x="2652" fg:w="41"/><text x="98.5450%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (41 samples, 1.52%)</title><rect x="98.2950%" y="245" width="1.5196%" height="15" fill="rgb(235,113,49)" fg:x="2652" fg:w="41"/><text x="98.5450%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 1.52%)</title><rect x="98.2950%" y="229" width="1.5196%" height="15" fill="rgb(205,127,43)" fg:x="2652" fg:w="41"/><text x="98.5450%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;absim::Manager&lt;briolette_sim::simulator::Simulator&gt;&gt; (50 samples, 1.85%)</title><rect x="97.9985%" y="453" width="1.8532%" height="15" fill="rgb(250,162,2)" fg:x="2644" fg:w="50"/><text x="98.2485%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::WorldData&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="437" width="1.5567%" height="15" fill="rgb(220,13,41)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;usize,briolette_sim::CoinState&gt;&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="421" width="1.5567%" height="15" fill="rgb(249,221,25)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;usize,briolette_sim::CoinState,std::hash::random::RandomState&gt;&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="405" width="1.5567%" height="15" fill="rgb(215,208,19)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(usize,briolette_sim::CoinState)&gt;&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="389" width="1.5567%" height="15" fill="rgb(236,175,2)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 1.56%)</title><rect x="98.2950%" y="373" width="1.5567%" height="15" fill="rgb(241,52,2)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (42 samples, 1.56%)</title><rect x="98.2950%" y="357" width="1.5567%" height="15" fill="rgb(248,140,14)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (42 samples, 1.56%)</title><rect x="98.2950%" y="341" width="1.5567%" height="15" fill="rgb(253,22,42)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (42 samples, 1.56%)</title><rect x="98.2950%" y="325" width="1.5567%" height="15" fill="rgb(234,61,47)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (42 samples, 1.56%)</title><rect x="98.2950%" y="309" width="1.5567%" height="15" fill="rgb(208,226,15)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,briolette_sim::CoinState)&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="293" width="1.5567%" height="15" fill="rgb(217,221,4)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::CoinState&gt; (42 samples, 1.56%)</title><rect x="98.2950%" y="277" width="1.5567%" height="15" fill="rgb(212,174,34)" fg:x="2652" fg:w="42"/><text x="98.5450%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;briolette_sim::Coin&gt; (1 samples, 0.04%)</title><rect x="99.8147%" y="261" width="0.0371%" height="15" fill="rgb(253,83,4)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="99.8147%" y="245" width="0.0371%" height="15" fill="rgb(250,195,49)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="99.8147%" y="229" width="0.0371%" height="15" fill="rgb(241,192,25)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="99.8147%" y="213" width="0.0371%" height="15" fill="rgb(208,124,10)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (1 samples, 0.04%)</title><rect x="99.8147%" y="197" width="0.0371%" height="15" fill="rgb(222,33,0)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="99.8147%" y="181" width="0.0371%" height="15" fill="rgb(234,209,28)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="99.8147%" y="165" width="0.0371%" height="15" fill="rgb(224,11,23)" fg:x="2693" fg:w="1"/><text x="100.0647%" y="175.50"></text></g><g><title>all (2,698 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(232,99,1)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="783.50"></text></g><g><title>briolette-sim (2,698 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(237,95,45)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="767.50">briolette-sim</text></g><g><title>_start (2,698 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(208,109,11)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="751.50">_start</text></g><g><title>__libc_start_main_impl (2,698 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(216,190,48)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="735.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (2,698 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(251,171,36)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="719.50">__libc_start_call_main</text></g><g><title>main (2,698 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(230,62,22)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (2,698 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(225,114,35)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,698 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(215,118,42)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,698 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(243,119,21)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,698 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(252,177,53)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,698 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(237,209,29)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="623.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,698 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(212,65,23)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,698 samples, 100.00%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(230,222,46)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,698 samples, 100.00%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(215,135,32)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,698 samples, 100.00%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(246,101,22)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,698 samples, 100.00%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(206,107,13)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="543.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,698 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(250,100,44)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="527.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,698 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(231,147,38)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>briolette_sim::main (2,698 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(229,8,40)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="495.50">briolette_sim::main</text></g><g><title>briolette_sim::run_experiments (2,698 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(221,135,30)" fg:x="0" fg:w="2698"/><text x="0.2500%" y="479.50">briolette_sim::run_experiments</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.15%)</title><rect x="99.8517%" y="453" width="0.1483%" height="15" fill="rgb(249,193,18)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.15%)</title><rect x="99.8517%" y="437" width="0.1483%" height="15" fill="rgb(209,133,39)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.15%)</title><rect x="99.8517%" y="421" width="0.1483%" height="15" fill="rgb(232,100,14)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.15%)</title><rect x="99.8517%" y="405" width="0.1483%" height="15" fill="rgb(224,185,1)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.15%)</title><rect x="99.8517%" y="389" width="0.1483%" height="15" fill="rgb(223,139,8)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.15%)</title><rect x="99.8517%" y="373" width="0.1483%" height="15" fill="rgb(232,213,38)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (4 samples, 0.15%)</title><rect x="99.8517%" y="357" width="0.1483%" height="15" fill="rgb(207,94,22)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.15%)</title><rect x="99.8517%" y="341" width="0.1483%" height="15" fill="rgb(219,183,54)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="351.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.15%)</title><rect x="99.8517%" y="325" width="0.1483%" height="15" fill="rgb(216,185,54)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.15%)</title><rect x="99.8517%" y="309" width="0.1483%" height="15" fill="rgb(254,217,39)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.15%)</title><rect x="99.8517%" y="293" width="0.1483%" height="15" fill="rgb(240,178,23)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.15%)</title><rect x="99.8517%" y="277" width="0.1483%" height="15" fill="rgb(218,11,47)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.15%)</title><rect x="99.8517%" y="261" width="0.1483%" height="15" fill="rgb(218,51,51)" fg:x="2694" fg:w="4"/><text x="100.1017%" y="271.50"></text></g></svg></svg>